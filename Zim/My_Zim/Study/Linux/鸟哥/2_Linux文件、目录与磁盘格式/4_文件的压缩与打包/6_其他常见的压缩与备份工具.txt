Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2017-12-11T16:41:44+08:00

====== 6 其他常见的压缩与备份工具 ======
Created Monday 11 December 2017

6. 其他常见的压缩与备份工具
　　6.1 dd
　　6.2 cpio
 大标题的图示其他常见的压缩与备份工具
还有一些很好用的工具得要跟大家介绍介绍，尤其是 dd 这个玩意儿呢！


小标题的图示dd
我们在第八章当中的特殊 loop 装置挂载时使用过 dd 这个命令对吧？ 不过，这个命令可不只是制作一个文件而已喔～这个 dd 命令最大的功效，鸟哥认为，应该是在於『备份』啊！ 因为 dd 可以读取磁碟装置的内容(几乎是直接读取磁区"sector")，然后将整个装置备份成一个文件呢！真的是相当的好用啊～ dd 的用途有很多啦～但是我们仅讲一些比较重要的选项，如下：

[root@www ~]# dd if="input_file" of="output_file" bs="block_size" \
> count="number"
选项与参数：
if   ：就是 input file 罗～也可以是装置喔！
of   ：就是 output file 喔～也可以是装置；
bs   ：规划的一个 block 的大小，若未指定则默认是 512 bytes(一个 sector 的大小)
count：多少个 bs 的意思。

范例一：将 /etc/passwd 备份到 /tmp/passwd.back 当中
[root@www ~]# dd if=/etc/passwd of=/tmp/passwd.back
3+1 records in
3+1 records out
1945 bytes (1.9 kB) copied, 0.000332893 seconds, 5.8 MB/s
[root@www ~]# ll /etc/passwd /tmp/passwd.back
-rw-r--r-- 1 root root 1945 Sep 29 02:21 /etc/passwd
-rw-r--r-- 1 root root 1945 Dec 17 18:09 /tmp/passwd.back
# 仔细的看一下，我的 /etc/passwd 文件大小为 1945 bytes，因为我没有配置 bs ，
# 所以默认是 512 bytes 为一个单位，因此，上面那个 3+1 表示有 3 个完整的 
# 512 bytes，以及未满 512 bytes 的另一个 block 的意思啦！
# 事实上，感觉好像是 cp 这个命令啦～

范例二：将自己的磁碟之第一个磁区备份下来
[root@www ~]# dd if=/dev/hdc of=/tmp/mbr.back bs=512 count=1
1+0 records in
1+0 records out
512 bytes (512 B) copied, 0.0104586 seconds, 49.0 kB/s
# 第一个磁区内含有 MBR 与 partition table ，透过这个动作，
# 我们可以一口气将这个磁碟的 MBR 与 partition table 进行备份哩！

范例三：找出你系统最小的那个分割槽，并且将他备份下来：
[root@www ~]# df -h
Filesystem            Size  Used Avail Use% Mounted on
/dev/hdc2             9.5G  3.9G  5.1G  44% /
/dev/hdc3             4.8G  651M  3.9G  15% /home
/dev/hdc1              99M   21M   73M  23% /boot  <==就捉他好了！
[root@www ~]# dd if=/dev/hdc1 of=/tmp/boot.whole.disk
208782+0 records in
208782+0 records out
106896384 bytes (107 MB) copied, 6.24721 seconds, 17.1 MB/s
[root@www ~]# ll -h /tmp/boot.whole.disk
-rw-r--r-- 1 root root 102M Dec 17 18:14 /tmp/boot.whole.disk
# 等於是将整个 /dev/hdc1 通通捉下来的意思～如果要还原呢？就反向回去！
# dd if=/tmp/boot.whole.disk of=/dev/hdc1 即可！非常简单吧！
# 简单的说，如果想要整个硬盘备份的话，就类似 Norton 的 ghost 软件一般，
# 由 disk 到 disk ，嘿嘿～利用 dd 就可以啦～厉害厉害！
你可以说， tar 可以用来备份关键数据，而 dd 则可以用来备份整颗 partition 或 整颗 disk ，很不错啊～不过，如果要将数据填回到 filesystem 当中， 可能需要考虑到原本的 filesystem 才能成功啊！让我们来完成底下的例题试看看：

例题：
你想要将你的 /dev/hdc1 进行完整的复制到另一个 partition 上，请使用你的系统上面未分割完毕的容量再创建一个与 /dev/hdc1 差不多大小的分割槽 (只能比 /dev/hdc1 大，不能比他小！)，然后将之进行完整的复制 (包括需要复制 boot sector 的区块)。
答：
由於需要复制 boot sector 的区块，所以使用 cp 或者是 tar 这种命令是无法达成需求的！ 此时那个 dd 就派的上用场了。你可以这样做：
# 1. 先进行分割的动作
[root@www ~]# fdisk -l /dev/hdc
   Device Boot   Start    End    Blocks   Id  System
/dev/hdc1   *        1     13    104391   83  Linux
# 上面鸟哥仅撷取重要的数据而已！我们可以看到 /dev/hdc1 仅有 13 个磁柱

[root@www ~]# fdisk /dev/hdc
Command (m for help): n
First cylinder (2354-5005, default 2354): 这里按 enter
Using default value 2354
Last cylinder or +size or +sizeM or +sizeK (2354-5005, default 5005): 2366

Command (m for help): p
   Device Boot   Start    End    Blocks   Id  System
/dev/hdc9         2354   2366    104391   83  Linux

Command (m for help): w
# 为什么要使用 2366 呢？因为 /dev/hdc1 使用 13 个磁柱，因此新的 partition
# 我们也给她 13 个磁柱，因此 2354 + 13 -1 = 2366 罗！

[root@www ~]# partprobe

# 2. 不需要格式化，直接进行 sector 表面的复制！
[root@www ~]# dd if=/dev/hdc1 of=/dev/hdc9
208782+0 records in
208782+0 records out
106896384 bytes (107 MB) copied, 16.8797 seconds, 6.3 MB/s

[root@www ~]# mount /dev/hdc9 /mnt
[root@www ~]# df
Filesystem           1K-blocks      Used Available Use% Mounted on
/dev/hdc1               101086     21408     74459  23% /boot
/dev/hdc9               101086     21408     74459  23% /mnt
# 这两个玩意儿会『一模一样』喔！
[root@www ~]# umount /mnt
非常有趣的范例吧！新分割出来的 partition 不需要经过格式化，因为 dd 可以将原本旧的 partition 上面，将 sector 表面的数据整个复制过来！ 当然连同 superblock, boot sector, meta data 等等通通也会复制过来！是否很有趣呢？未来你想要建置两颗一模一样的磁碟时， 只要下达类似： dd if=/dev/sda of=/dev/sdb ，就能够让两颗磁碟一模一样，甚至 /dev/sdb 不需要分割与格式化， 因为该命令可以将 /dev/sda 内的所有数据，包括 MBR 与 partition table 也复制到 /dev/sdb 说！ ^_^

小标题的图示cpio
这个命令挺有趣的，因为 cpio 可以备份任何东西，包括装置设备文件。不过 cpio 有个大问题， 那就是 cpio 不会主动的去找文件来备份！啊！那怎办？所以罗，一般来说， cpio 得要配合类似 find 等可以找到档名的命令来告知 cpio 该被备份的数据在哪里啊！ 有点小麻烦啦～因为牵涉到我们在第三篇才会谈到的数据流重导向说～ 所以这里你就先背一下语法，等到第三篇讲完你就知道如何使用 cpio 罗！

[root@www ~]# cpio -ovcB  > [file|device] <==备份
[root@www ~]# cpio -ivcdu < [file|device] <==还原
[root@www ~]# cpio -ivct  < [file|device] <==察看
备份会使用到的选项与参数：
  -o ：将数据 copy 输出到文件或装置上 
  -B ：让默认的 Blocks 可以添加至 5120 bytes ，默认是 512 bytes ！ 
　  　 这样的好处是可以让大文件的储存速度加快(请参考 i-nodes 的观念) 
还原会使用到的选项与参数：
  -i ：将数据自文件或装置 copy 出来系统当中 
  -d ：自动创建目录！使用 cpio 所备份的数据内容不见得会在同一层目录中，因此我们
	   必须要让 cpio 在还原时可以创建新目录，此时就得要 -d 选项的帮助！
  -u ：自动的将较新的文件覆盖较旧的文件！
  -t ：需配合 -i 选项，可用在"察看"以 cpio 创建的文件或装置的内容 
一些可共享的选项与参数：
  -v ：让储存的过程中文件名称可以在萤幕上显示 
  -c ：一种较新的 portable format 方式储存 
你应该会发现一件事情，就是上述的选项与命令中怎么会没有指定需要备份的数据呢？还有那个大於 (>) 与小於 (<) 符号是怎么回事啊？因为 cpio 会将数据整个显示到萤幕上，因此我们可以透过将这些萤幕的数据重新导向 (>) 一个新的文件！ 至於还原呢？就是将备份文件读进来 cpio (<) 进行处理之意！我们来进行几个案例你就知道啥是啥了！

范例：找出 /boot 底下的所有文件，然后将他备份到 /tmp/boot.cpio 去！
[root@www ~]# find /boot -print
/boot
/boot/message
/boot/initrd-2.6.18-128.el5.img
....以下省略....
# 透过这个 find 我们可以找到 /boot 底下应该要存在的档名！包括文件与目录

[root@www ~]# find /boot | cpio -ocvB > /tmp/boot.cpio
[root@www ~]# ll -h /tmp/boot.cpio
-rw-r--r-- 1 root root 16M Dec 17 23:30 /tmp/boot.cpio
我们使用 find /boot 可以找出档名，然后透过那条管线 (|, 亦即键盘上的 shift+\ 的组合)， 就能将档名传给 cpio 来进行处理！最终会得到 /tmp/boot.cpio 那个文件喔！接下来让我们来进行解压缩看看。

范例：将刚刚的文件给他在 /root/ 目录下解开
[root@www ~]# cpio -idvc < /tmp/boot.cpio
[root@www ~]# ll /root/boot
# 你可以自行比较一下 /root/boot 与 /boot 的内容是否一模一样！
事实上 cpio 可以将系统的数据完整的备份到磁带机上头去喔！如果你有磁带机的话！

备份：find / | cpio -ocvB > /dev/st0
还原：cpio -idvc < /dev/st0
这个 cpio 好像不怎么好用呦！但是，他可是备份的时候的一项利器呢！因为他可以备份任何的文件， 包括 /dev 底下的任何装置文件！所以他可是相当重要的呢！而由於 cpio 必需要配合其他的程序，例如 find 来创建档名，所以 cpio 与管线命令及数据流重导向的相关性就相当的重要了！

其实系统里面已经含有一个使用 cpio 创建的文件喔！那就是 /boot/initrd-xxx 这个文件啦！ 现在让我们来将这个文件解压缩看看，看你能不能发现该文件的内容为何？

# 1. 我们先来看看该文件是属於什么文件格式，然后再加以处理：
[root@www ~]# file /boot/initrd-2.6.18-128.el5.img
/boot/initrd-2.6.18-128.el5.img: gzip compressed data, ...
# 唔！看起来似乎是使用 gzip 进行压缩过～那如何处理呢？

# 2. 透过更名，将该文件添加扩展名，然后予以解压缩看看：
[root@www ~]# mkdir initrd
[root@www ~]# cd initrd
[root@www initrd]# cp /boot/initrd-2.6.18-128.el5.img initrd.img.gz
[root@www initrd]# gzip -d initrd.img.gz
[root@www initrd]# ll
-rw------- 1 root root 5408768 Dec 17 23:53 initrd.img
[root@www initrd]# file initrd.img
initrd.img: ASCII cpio archive (SVR4 with no CRC)
# 嘿嘿！露出马脚了吧！确实是 cpio 的文件档喔！

# 3. 开始使用 cpio 解开此文件：
[root@www initrd]# cpio -iduvc < initrd.img
sbin
init
sysroot
....以下省略....
# 瞧！这样就将这个文件解开罗！这样了解乎？
