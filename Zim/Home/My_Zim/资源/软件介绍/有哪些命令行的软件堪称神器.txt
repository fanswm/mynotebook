Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2018-01-04T13:41:30+08:00

====== 有哪些命令行的软件堪称神器 ======
Created Thursday 04 January 2018

作者：韦易笑
链接：https://www.zhihu.com/question/59227720/answer/286665684
来源：知乎
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。

cppman：C++ 98/11/14 手册查询 for Linux/MacOS

我知道你在 Windows 下有 Zeal ，你在 Mac OS X 用 Dash，但是你想在服务器上或者任意命令行环境下查看 C/C++ 语言手册么？偶尔看别人代码里调用到一个冷僻的 libc 函数（比如 strpbrk这种），网页搜索太慢，运行 zeal/dash 麻烦，想在命令行直接查看帮助怎么办？
这是个台湾小伙写的工具，使用很简单，跟 man一样，命令行输入：
cppman std::thread
即可查看 thread 相关手册
<img src="https://pic1.zhimg.com/50/v2-5d0143b2bc7fff5d20d382d82dfc0fa2_hd.jpg"; data-caption="" data-size="normal" data-rawwidth="726" data-rawheight="480" class="origin_image zh-lightbox-thumb" width="726" data-original="https://pic1.zhimg.com/v2-5d0143b2bc7fff5d20d382d82dfc0fa2_r.jpg">;
可以配置到终端编辑器里设定个快捷键，一按下去就可以显示光标下面 token 的 reference，清晰的排版，美观的着色：
<img src="https://pic2.zhimg.com/50/v2-5b5fc72003662197cf2e7fc4e8f2f480_hd.jpg"; data-caption="" data-size="normal" data-rawwidth="727" data-rawheight="483" class="origin_image zh-lightbox-thumb" width="727" data-original="https://pic2.zhimg.com/v2-5b5fc72003662197cf2e7fc4e8f2f480_r.jpg">;
关键是速度快，比你开网页查便捷多了，
<img src="https://pic1.zhimg.com/50/v2-9882a6de7b93abc939f523d728c699ae_hd.jpg"; data-caption="" data-size="normal" data-rawwidth="717" data-rawheight="479" class="origin_image zh-lightbox-thumb" width="717" data-original="https://pic1.zhimg.com/v2-9882a6de7b93abc939f523d728c699ae_r.jpg">;
Windows 下用不了，可以在 Cygwin 下面安装了一个，编辑器里照样一键弹出对应的帮助窗口，默认是在线请求 cppreference.com / cplusplus.com 的内容，可以花半小时一次性全部缓存到本地，提供离线帮助。

mcedit：终端下面的 NotePad++

Windows 切换到 Linux 下工作，最缺的就是一款终端下趁手的编辑器，而如果你不想用 Vim/Emacs 的话，难道就只有用 nano 那么简陋的东西？或者 joe 这种奇葩的编辑器？有没有符合我 Windows 编辑习惯的趁手的终端编辑器呢？
有，mcedit （midnight commander 里面的一个工具）为你解决后顾之忧，快速安装：
apt-get install mc
或者 OS X 下：
brew install mc
即可安装 mc (midnight commander) 和 mcedit (mc internal editor)
不管是在终端下从事开发，还是链接到树莓派上改下配置，mcedit 将为你提供类似 NotePad++ 的编辑体验（按 F9 显示下拉菜单，或者鼠标点击第一行，或者 ALT_F）：
<img src="https://pic1.zhimg.com/50/v2-b3bd57fbf57a36e904135b6f98817612_hd.jpg"; data-caption="" data-size="normal" data-rawwidth="720" data-rawheight="480" class="origin_image zh-lightbox-thumb" width="720" data-original="https://pic1.zhimg.com/v2-b3bd57fbf57a36e904135b6f98817612_r.jpg">;
这款编辑器完全符合 NotePad++ 的编辑习惯：下拉菜单，多文件编辑+多子窗口管理，弹出对话框进行搜索/配置等，你记得住 Vim / Emacs 里复杂的查找替换规则么？mcedit里面不用记，UI上操作一切（知乎缩略图效果实在太糟糕了，请点击查看清晰大图）：
<img src="https://pic2.zhimg.com/50/v2-e53afa23d8fc2ea6d5c6a5ff0ee9c75c_hd.jpg"; data-caption="" data-size="normal" data-rawwidth="720" data-rawheight="482" class="origin_image zh-lightbox-thumb" width="720" data-original="https://pic2.zhimg.com/v2-e53afa23d8fc2ea6d5c6a5ff0ee9c75c_r.jpg">;
不需要学习任何配置文件格式，对话框里直接以UI的形式全部展现给你：
<img src="https://pic3.zhimg.com/50/v2-e2fa8c1f8d98b697a78a3980d6254399_hd.jpg"; data-caption="" data-size="normal" data-rawwidth="718" data-rawheight="459" class="origin_image zh-lightbox-thumb" width="718" data-original="https://pic3.zhimg.com/v2-e2fa8c1f8d98b697a78a3980d6254399_r.jpg">;
初次使用记得把设置里的 “visible tabs" 选项给干掉，它默认显示tab我觉得很丑。
你记得住 Emacs 的复制粘贴么？背得过来 Vim 那么多命令么？mcedit 不用背诵，它的帮助文档十分霸气，就一句话：“这个编辑器十分简单，不需要任何 手册和 tutor，要查看哪个键是干什么的，看看下拉目录就行了”，的确如此：
<img src="https://pic1.zhimg.com/50/v2-d2b47d6d9e549d0adf17b68fbb199702_hd.jpg"; data-caption="" data-size="normal" data-rawwidth="723" data-rawheight="483" class="origin_image zh-lightbox-thumb" width="723" data-original="https://pic1.zhimg.com/v2-d2b47d6d9e549d0adf17b68fbb199702_r.jpg">;
是不是很简单？不用看任何冗长的入门文档了？不会就鼠标点点点，什么都有了。连复制粘贴都是跟 NotePad++ 一样的 SHIFT+方向键 进行区域选择（想用鼠标拖？当然可以）。能同时打开多个窗口，任意切割窗口布局。
使用 NotePad++ 最方便的地方在于同开发工具链整合，能配置快捷键工具，F1编译，F2运行，对吧？ mcedit 决不让你失望，按 F11弹出 User Menu：
<img src="https://pic4.zhimg.com/50/v2-9b38157e36275219b19da7007a19337f_hd.jpg"; data-caption="" data-size="normal" data-rawwidth="723" data-rawheight="482" class="origin_image zh-lightbox-thumb" width="723" data-original="https://pic4.zhimg.com/v2-9b38157e36275219b19da7007a19337f_r.jpg">;
上面是一些常用的代码片段，中间是编译运行选项，还有一些格式化，查询帮助等命令，这个 User Menu 针对不同的文件后缀展现不同的内容，关键是，完全可以配置，你可以使用各种宏配置你的程序的编译运行规则，配置入口在 Menu->Options->Menu File，当然，这里你需要写几行配置文件了，不过十分简单，可以参考已有的。
<img src="https://pic1.zhimg.com/50/v2-3cd8d8e282dd66bd485537e98be6c4fc_hd.jpg"; data-caption="" data-size="normal" data-rawwidth="722" data-rawheight="484" class="origin_image zh-lightbox-thumb" width="722" data-original="https://pic1.zhimg.com/v2-3cd8d8e282dd66bd485537e98be6c4fc_r.jpg">;
窗口管理也是贴合 Windows 的使用习惯，文件窗口可以任意覆盖，移动，最大化，堆叠。
默认使用鼠标即可，如果你想更高效点，可以研究下怎么再终端正确输入 ALT_X 按键。
怀旧的同志们也许还会想起以前的 Borland C++ 3.1，对吧？冲这点就赢得了我不少好感，说太多也没必要，基本都是鼠标点点点就知道大概的用法了，有这玩意儿，可以让你在 nano 和 vim/emacs 中间多一个负责任的选择。

icdiff：分屏显示 diff
常规 diff：
<img src="https://pic2.zhimg.com/50/v2-2438730fc9ccebb8376b81b8426e9bff_hd.jpg"; data-caption="" data-size="normal" data-rawwidth="1208" data-rawheight="920" class="origin_image zh-lightbox-thumb" width="1208" data-original="https://pic2.zhimg.com/v2-2438730fc9ccebb8376b81b8426e9bff_r.jpg">;
icdiff：
<img src="https://pic1.zhimg.com/50/v2-33b4fd7ae4b2c0e4f11e1f8aa617311e_hd.jpg"; data-caption="" data-size="normal" data-rawwidth="1208" data-rawheight="920" class="origin_image zh-lightbox-thumb" width="1208" data-original="https://pic1.zhimg.com/v2-33b4fd7ae4b2c0e4f11e1f8aa617311e_r.jpg">;
比传统 diff 更明白些，是吧？效果比 sdiff 好不少，还可以配置到 git 里，变成默认的 git diff查看工具，比原来的 diff 漂亮不少吧？

pm：在 bash / zsh 中迅速切换项目目录
将你常去的目录添加到 pm 中，然后一条命令进行切换：
cd projects/awesome-project
pm add awesome-project
上面的 pm add + 名称，可以将当前目录存储到 pm 中，并取一个名字。
类似的方法再添加几个目录，然后用 pm list 查看一下现在添加了哪些：
pm list
# awesome-project
# another-project
然后使用 pm go + 名字，迅速切换到该目录：
pm go awesome-project
# Current project: awesome-project
最后还有一个命令：pm remove + 名字，进行删除。

cgasm：命令行查询汇编指令
Intel x86/x64 开发者手册，上千页的 PDF 里漫游，效率很低，对不对？cgasm 支持本地模糊搜索，比如查询 aes 相关的指令：
<img src="https://pic3.zhimg.com/50/v2-3108c9f58aaed0a76d5bff1756859994_hd.jpg"; data-caption="" data-size="normal" data-rawwidth="997" data-rawheight="439" class="origin_image zh-lightbox-thumb" width="997" data-original="https://pic3.zhimg.com/v2-3108c9f58aaed0a76d5bff1756859994_r.jpg">;
看 Intel 的 PDF 你要这么搞很费力吧？默认 cgasm + 指令，会显示简介。
<img src="https://pic4.zhimg.com/50/v2-ff50fa954c3612b11306a7b318b4eb5c_hd.jpg"; data-caption="" data-size="normal" data-rawwidth="1087" data-rawheight="484" class="origin_image zh-lightbox-thumb" width="1087" data-original="https://pic4.zhimg.com/v2-ff50fa954c3612b11306a7b318b4eb5c_r.jpg">;
当然，具体使用你会需要看更详细的说明，那么可以使用 cgasm -v aesenc，将会显示和开发手册 PDF里一致的内容：指令字节码，编码模式，状态影响，伪操作码描述和等价的 Intrinsic 等详细内容，比搜网页和查询 PDF效率高多了。

owncloud：DropBox 的开源替代品，提供命令行客户端 owncloudcmd
后端开发经常再不同的主机上跳来跳去，同步一些常用文件变得必不可少，当然你可以放到 DropBox 里，但我的 DropBox 账号只有一个，个人文件太多，不想再各种主机上乱放，且我发现 Linux 下的 DropBox 命令行客户端有时候会 100% cpu 占用，死循环了。
使用 owncloud 当然要搭建公网服务端，这有一定门槛，但如果你有一台 vps 或者公网固定 ip 的服务器，可以用 docker 直接拉一个 owncloud 服务器下来就行，五分钟都不到。作为 DropBox 的代替品 owncloud 我很喜欢它一句口号：你的数据，你掌握。
把 owncloudcmd 工具放到 crontab 里面，每五分钟对你的 ~/.cloud/ 目录进行一次同步，你直接修改一台机器上的 ~/.cloud/ 下面的文件，基本上一处修改，所有地方就及时自动同步上了，比用 git 同步常用资料方便多了。

ncdu：可视化的空间分析程序
你发现有人把 /home 空间撑爆了，影响了大家的工作，你愤怒了一层层的 du，一层层的 cd，整个过程就像刨垃圾堆一样的恶心，后来发现了 ncdu 这个基于 ncurses 的空间分析程序：
<img src="https://pic3.zhimg.com/50/v2-7393290c052eee5384b63f0c746b8df2_hd.jpg"; data-caption="" data-size="normal" data-rawwidth="631" data-rawheight="482" class="origin_image zh-lightbox-thumb" width="631" data-original="https://pic3.zhimg.com/v2-7393290c052eee5384b63f0c746b8df2_r.jpg">;
不但能用光标上下键移动，回车还可以进入对应目录又可以查看最新的占用，很快就揪出了占用空间最大的罪魁祸首。

glances：更强大的 htop / top 代替者
htop 代替 top，glances 代替 htop：
<img src="https://pic3.zhimg.com/50/v2-a51e6657ceddf9229cab5adadb016887_hd.jpg"; data-caption="" data-size="normal" data-rawwidth="1293" data-rawheight="802" class="origin_image zh-lightbox-thumb" width="1293" data-original="https://pic3.zhimg.com/v2-a51e6657ceddf9229cab5adadb016887_r.jpg">;
信息比 htop 丰富了不少，更全了，对吧？除了命令行查看外，glances 还提供页面服务，让你从页面上随时查看某服务器的状态。

mc ：内容浏览/预览
即便能舒适的呆在终端命令行里工作的人，有时候面对有些事情，也会感到烦躁，比如浏览一个目录的结构和里面文件内容，比如从源文件夹选择拷贝一批特定的文件到目标文件夹，这时候你需要 mc ，对就是前面 mcedit 的父项目 midnight commander ，安装方法同 mcedit：
<img src="https://pic3.zhimg.com/50/v2-8f421743d5683f3a160f59307b16a9fa_hd.jpg"; data-caption="" data-size="normal" data-rawwidth="722" data-rawheight="502" class="origin_image zh-lightbox-thumb" width="722" data-original="https://pic3.zhimg.com/v2-8f421743d5683f3a160f59307b16a9fa_r.jpg">;
和原来 Windows 下的 Total Commander 很类似，直接光标上下移动浏览文件，按 TAB键切换左右窗口，支持鼠标，支持内容预览，让你快速了解一堆文件夹里有些什么东西，按 F3 可以唤出 mcedit 预览文件，还可以用二进制查看文件内容，F4可以编辑文件。

ranger：内容浏览/预览
另一款内容预览软件，界面没有 mc 那么漂亮，标记拷贝也没它强，但是预览功能做的很不错，如果你习惯 vim 键位的话，你会发现ranger有些地方比 mc做的好不少：
<img src="https://pic3.zhimg.com/50/v2-f4e14d61cb4eb3e80057d2314003f0c9_hd.jpg"; data-caption="" data-size="normal" data-rawwidth="721" data-rawheight="500" class="origin_image zh-lightbox-thumb" width="721" data-original="https://pic3.zhimg.com/v2-f4e14d61cb4eb3e80057d2314003f0c9_r.jpg">;
上下键（或者j, k）移动光标，内容预览自动出现在右边，左键可以回退上一层目录，q退出，如果你对预览很依赖，你会喜欢上 ranger 这款软件，apt-get 直接安装即可。

dstat：vmstat 代替者
可能不少人都用过，但是本问题下好像没人提？
<img src="https://pic3.zhimg.com/50/v2-d83885f16e9a80bc5a2435c06a41fd5c_hd.jpg"; data-caption="" data-size="normal" data-rawwidth="657" data-rawheight="244" class="origin_image zh-lightbox-thumb" width="657" data-original="https://pic3.zhimg.com/v2-d83885f16e9a80bc5a2435c06a41fd5c_r.jpg">;
能输出比 vmstat 更加：美观，整洁，强大的内容。

cheat：命令行笔记
就是各种 cheat sheet ，比如经常搞忘 redis 命令的话，你可以新建 ~/.cheat/redis 这个文件，写一些内容，比如：
cat /etc/passwd | redis-cli -x set mypasswd
redis-cli get mypasswd
redis-cli -r 100 lpush mylist x
redis-cli -r 100 -i 1 info | grep used_memory_human:
redis-cli --eval myscript.lua key1 key2 , arg1 arg2 arg3
redis-cli --scan --pattern '*:12345*'
然后使用的时候，cheat redis 命令就可以显示出来刚才新建的 cheat sheet 了：
<img src="https://pic3.zhimg.com/50/v2-7c70095da32c9ac864c76e4b4d14949a_hd.jpg"; data-caption="" data-size="normal" data-rawwidth="566" data-rawheight="182" class="origin_image zh-lightbox-thumb" width="566" data-original="https://pic3.zhimg.com/v2-7c70095da32c9ac864c76e4b4d14949a_r.jpg">;
同样 cheat 本身还自带了很多常用 cheat sheet，比如你可以试试：
cheat tar # 当你忘记 tar 命令时候
cheat vim # vim cheat sheet
cheat rsync # 文件同步的 cheat sheet
忘记 Vim 怎么退出了？没关系 cheat vim 就可以显示 vim cheat sheet了，对于一些重要的，但是不常用的，经常搞忘的东西，特别有用，比如我最痛恨的 https + svn 搭建过程，第一次查资料弄好，然后忘了，半年后又要再弄时又得全部重新查找资料，然后又忘记了，有了这个就比较好办。
再比如 rsync 的用法，我就老记不住，man rsync 又是废话连篇不着重点，看它自带的 cheat 效率提高不少，注意时常更新，作者会不断添加 cheat sheet。
这显然比你查询网页开 evernote 效率来的快，使用环境变量 DEFAULT_CHEAT_DIR 可以设定 ~/.cheat 以外的个人 cheat 目录，一般很多人都会在 github 上建立一个个人配置文件的项目，里面放满自己的 vim / zsh / bash 等配置，现在可以把个人 cheat 文件也纳入这个项目的管理，这样你就比较方便的能在不同的机器上同步你自己建立的各种 cheat sheet 了。
随着你自定义了越来越多的 cheat sheet，你的工作效率会变得越来越高。

multitail：多重 tail
通常你不止一个日志文件要监控，怎么办？终端软件里开多个 tab 太占地方，可以试试这个工具：
<img src="https://pic4.zhimg.com/50/v2-2f08bb89bba60fffbf2793e8222b2330_hd.jpg"; data-caption="" data-size="normal" data-rawwidth="506" data-rawheight="366" class="origin_image zh-lightbox-thumb" width="506" data-original="https://pic4.zhimg.com/v2-2f08bb89bba60fffbf2793e8222b2330_r.jpg">;
上面演示了同时监控两个日志文件，有高亮显示不同内容，当然还可以同时监控更多日志：
<img src="https://pic2.zhimg.com/50/v2-2791dc0d275e4d8a63b3ea2bf16ca4cc_hd.jpg"; data-caption="" data-size="normal" data-rawwidth="1564" data-rawheight="1044" class="origin_image zh-lightbox-thumb" width="1564" data-original="https://pic2.zhimg.com/v2-2791dc0d275e4d8a63b3ea2bf16ca4cc_r.jpg">;
也许你会问，这和 tmux + tail 有什么区别？区别大了，multitail 可以做太多 tmux + tail 做不了的事情了，比如：

	* 日志色彩高亮
	* 窗口自动管理，自动调整大小。
	* 多个日志文件窗口可以合并到一个里面，就像一个 log 文件一样查看。
	* 临时显示/隐藏某个日志文件窗口。
	* 可以对所有日志文件进行同一关键字搜索。
	* 日志过滤，外部正则表达式工具分析。
	* 众多常见服务的日志高亮模板，如：tcpdump，apache，squid，strace

等等，自己到它主页看吧，比 tmux + tail 强多了，操作也比 tmux 方便。
