Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2019-04-02T16:41:50+08:00

====== 为什么说 zsh 是 shell 中的极品 ======
创建日期 星期二 02 四月 2019

https://www.zhihu.com/question/21418449/answer/300879747
2019/4/2 (1 封私信 / 77 条消息) 为什么说 zsh 是 shell 中的极品？ - 知乎
__⾊彩⾼亮__
并不是传统基于正则表达式的⾊彩⾼亮，⽽是真的会判断你输⼊的是啥的⾊彩⾼亮：
__⽩⾊代表普通命令或者程序，红⾊代表错误命令，__这个很管⽤，你再⼀个个字⺟的敲命令，前⾯都是红⾊
的，如果敲对了最后⼀个字⺟的话，你会看到整条命令连着前⾯的都变成了⽩⾊，代表你敲对了。以前⽆
⾼亮的时候敲错了都不知道，还要往上翻着左右检查。下⾯__⻘⾊的代表内建命令或者 alias （echo 和 ls__
__），这些都不是正则判断出来的，是真的去检查的__。
细⼼的⼈会发现__⾮零的错误码，也会⾼亮显⽰在最右边__（上⼀条 data命令错误，返回127）。
__命令提⽰__
注意，命令提⽰和补全是两个完全不同的系统，很多时候提⽰⽐补全更有⽤：
你才输⼊完 “tar”命令，后⾯就⽤灰⾊给你提⽰ tar 命令的参数，⽽且是随着你动态输⼊完每⼀个字⺟不
断修正变化：
⽐如你输⼊到 - 后，没有跟着它上⾯的提⽰，⽽是输⼊了⼀个c字⺟，它⻢上明⽩你是要压缩，不是解压，
然后随即给出你压缩对应的命令提⽰。
这个命令提⽰是基于你的历史命令数据库进⾏分析的，随着你输⼊的命令越来越多，提⽰将会越来越准确
和顺⼿，某些不常输⼊的命令特别管⽤，⽐如偶尔查看下⽹卡配置：
2019/4/2 (1 封私信 / 77 条消息) 为什么说 zsh 是 shell 中的极品？ - 知乎
https://www.zhihu.com/question/21418449/answer/300879747 2/7
刚输⼊完：cat /etc/n 它后⾯已经猜出你可能要查看⽹卡配置了，然后⻢上给出你提⽰，⽤不着你 tab 补全
半天，你才敲 gc ，它就猜测出你可能想运⾏ gcc，然后⻢上给出完整建议：
__如果你觉得它提⽰的正确，你可以 CTRL+F 表⽰采纳，后⾯就会⾃动帮你⼀次性全部输⼊完了__，不⽤⼀个
字⼀个字的照着敲。前⾯的⾼亮就不说了，⽤惯这套提⽰系统，你就再也难以回到光秃秃的 bash 时代了。
__智能补全__
传统 shell 的补全在 zsh ⾯前基本都可以下班了：
即便可以在终端下舒适⼯作的⼈，⾯对有些任务也会觉得烦躁，⽐如频繁的切换路径，这种缩写路径补全
是我⽤ zsh 的⼀⼤痛点之⼀，特别是路径⽐较⻓的时候，⽐如 OS X 下⼯具链层层套的那种路径，⽐如某
java 代码树，有了这种缩写补全，能让你切换路径流畅不少。
当补全内容较多时，不⽤像 bash ⼀样持续提⽰你需要继续输⼊，也不会像 cmd 永⽆⽌境的循环下去，连
续敲击两次 TAB 键 zsh 给你⼀个补全⽬录，让你上下左右选择：
2019/4/2 (1 封私信 / 77 条消息) 为什么说 zsh 是 shell 中的极品？ - 知乎
https://www.zhihu.com/question/21418449/answer/300879747 3/7
这叫选择模式，由两次连续 TAB 进⼊，进⼊后，除了 tab/shift+tab 可以前后切换外，你还可以使⽤光标键
上下左右移动，或者使⽤ emacs 键位：ctrl + f/b/p/n (左右上下：forward, backward, previous, next) 。
如果你觉得光标键太远难按，CTRL+f/b/p/n 太伤⼩拇指，可以跟我⼀样新定义出⼀套：ALT+hjkl （左下上
右）来选择，⼗分顺⼿。__回⻋表⽰确认选择，⽤ CTRL+G 表⽰退出。__
命令参数补全更不在话下，输⼊ svn 后⾯按 TAB：
就出现了 svn 的参数，这种⼀级参数补全基本只会对很少⽤的命令才有效果，svn/git 这种⼀级参数基本都
不需要补全的，我们⼀般会需要到⼆级参数补全，⽐如已经输⼊了 svn commit，但是有⼀个 commit 的参
数我忘记了，我只记得两个减号开头的，于是：

这时候两次 TAB 进⼊选择模式就⽐较管⽤了，svn 的⼆级参数往往很⻓，选择模式⽐如信任 server 那个，
选择完回⻋确认，或者 CTRL+G 退出选择模式。
zsh的补全真的太强了，我这⾥只说了⼗分之⼀不到，没法⼀⼀展开了，但就上⾯⼏个已经让我有充分的理
由切换到 zsh 了。
__快速跳转__
前⾯也说过命令⾏⼯作中，不同的路径间切来切去是个头疼的问题，除了上⾯提到的缩写补全外，有⽆更
快的办法让我⻢上切换到我最近跳转过的某个路径？当然有“cd -”命令：
输⼊ cd 后⾯加⼀个减号后，按⼀次 tab ⻢上就列出本次登陆后去过的最近⼏次路径，接着根据下⾯的提⽰
输⼊数字按回⻋就过去了，⽐如输⼊：

$ cd -5 <回⻋>
就跳转到 ~/software/libclang-python3 路径下了。当然你还可以不输⼊数字，⽽是再按⼀次 tab 进⼊选择
模式，上下键或者 ctrl+n/p 来选择，回⻋确认，ctrl+g 返回。
__⾃动跳转__
有了前⾯的路径缩写展开，和这⾥的最近访问路径切换，你已经没法再回到过去那种按部就班输⼊路径外
加点弱智补全的⽅式了，但是可能你还会问，能否更进⼀步，不限于本次登陆或者最近去过的⼏级路径，
有没有办法让我快速进⼊⾃我开始⽤ zsh 之后进⼊过的某个路径呢？当然可以，__我们⽤ z 命令，查看历史__
__上进⼊过的⽬录：__
__敲⼊ z 命令，__列出了⾃从我开始⽤zsh进⼊过的⽬录和他们的权重，进⼊次数越多，权重越⼤，便于演⽰，
我删除了我的历史，随便 cd 了⼀下，保持列表的简洁。z 后⾯加⼀个关键词就能跳转到所有匹配的历史路
径中权重最⾼的那个了：
⽐如所有历史路径都包含 o ，那么 z o 就会跳转到权重最⾼的 ~/software ⽬录中。使⽤：“z -l foo 可以
列出包含 foo 的所有历史路径：

⽐如我们查询包含关键字为 c 的所有历史路径和他们的权重，有时你搞不清楚权重，可能会跳转错了，⽐
如有两个路径：
project1/src
project2/src
那么你 z src 的时候可能并不能如你愿跳转到你想要去的路径，那怎么办呢？第⼀个办法是实际 cd
project1/src 过去，增加它的权重，权重超过 project2/src 那么下次 z src 的时候就会跳转过去，你可以实
时⽤ z -l src 查看包含 src 的所有路径权重。
__更加可靠的⽅法是，增加⼀个关键字，⽐如 z 1 src ，空格分隔多个关键字__，z会先匹配出第⼀个来，⽐如1
，然后再匹配第⼆个 src ，⻢上锁定 project1/src 了。⼤家实际使⽤起来，⼀般是 z + 最后⼀级⽬录名，⽐
如：
$ z vim # -> /home/skywind/software/vim
$ z tmp # -> /home/skywind/tmp
$ z local # -> /home/skywind/.local
99%的时候这样做就⾜够了，当没有按照你要求跳转的时候，你可以再补充⼀下再上⼀级⽬录的⼀些信
息，⽐如 z vim/src 或者 z v src 都可以，弄不明⽩会跳转到哪⾥，可以随时⽤：
$ z -l key1 [key2 ... ]
查看权重。不过常使⽤你根本必担⼼这个问题，基本上常去的地⽅，z 都是指哪打哪。如果说前⾯的路径缩
写展开和最近访问快速切换是⽕箭的话，z 就是加速燃料了。
熟练的掌握上⾯⼏点内容，可让你体验到在终端⾥溜冰的感觉，再也没有泥⾥⾛路的抓狂。
__热键绑定__
__zsh ⾥⾯使⽤ bindkey 命令可以设置⼀系列热键，⽤来运⾏某⼀个 zsh 内部命令或者某个 shell 命令，__谁规
定终端只能敲字⺟呢？我们还可以按热键，⽐如从⽹上下载了⼀个 tar 包解开后要稍微浏览⼀下⾥⾯的内
容，⽤的最多的两条命令是啥呢？第⼀条是 ls 命令，每到⼀个⼦⽬录都要先按⼀下，还有就是 cd .. 对吧，
经过配置：
bindkey -s '\eo' 'cd ..\n' # 按下ALT+O 就执⾏ cd .. 命令
bindkey -s '\e;' 'ls -l\n' # 按下 ALT+; 就执⾏ ls -l 命令
你还可以设置⼀键打开编辑器，或者⼀键帮你输⼊某常⽤命令的⼀部分。除了这些命令外，⽇常命令编写
也可以加强⼀下：
bindkey '\e[1;3D' backward-word # ALT+左键：向后跳⼀个单词
bindkey '\e[1;3C' forward-word # ALT+右键：前跳⼀个单词

bindkey '\e[1;3A' beginning-of-line # ALT+上键：跳到⾏⾸
bindkey '\e[1;3B' end-of-line # ALT+下键：调到⾏尾
敲命令时经常需要对已有命令进⾏修改，默认⼀个字符⼀个字符的跳太慢了，这样设置以后基于单词的跳
转快速很多，配合其他⼀些快捷键，修改命令事半功倍。
终端下从 v220t 到 xterm 规范⾥，按下 alt+x 会先发送⼀个8位 ASCII 码 27，即 ESC键的扫描吗，然后跟着
x 这个字符，也等价于快速（⽐如100毫秒内）前后按下 ESC 和 x。
还不会再⾃⼰的终端软件⾥设置允许 alt 键的同学们可以搜索下相关⽂章。
__如何配置？__
zsh 有多强呢？上⾯说的这些和我平时⽤的功能可能只发挥了 zsh 10% 不到的能⼒，我也并不是什么 zsh
专家或者脚本⾼⼿，上⾯所讲的五点内容对于 zsh 的全部功能来讲可能都只⽤到了 zsh 的九⽜⼀⽑，但是
以上五点只要有⼀条，就已经够我放弃其他 shell 来尝试⼀下了。
那最后上⾯这些功能怎么配置的？眼熟的⼈应该发现这不是默认的 oh-my-zsh 框架，__这只是我写的⼀个__
__100 多⾏的 .zshrc ⼩脚本，如果你想体验⼀下的话，可以先 apt-get 安装⼀下 zsh，然后打开：__
github.com/skywind3000/
把上⾯这个配置的内容复制粘贴到你的 ~/.zshrc ⽂件⾥，保存，运⾏ zsh 即可。头⼀次运⾏会安装⼀些依
赖包，稍等两分钟，以后再进⼊就瞬间进⼊了。
----
PS：想⾃⼰配置到话，__推荐使 zsh 的包管理器：antigen 来管理所有功能__，⽤它配置起来⽐原始 oh-myzsh ⾃动化多了。
看很多⼈都⽐较迷恋 zsh 的 git prompt ，我从来不⽤这华⽽不实玩意⼉，让我的终端不流畅，每次没内容
按下回⻋都要调⽤⼀⼤堆命令，建议⼤家关闭。
----
相关阅读：
⻙易笑：有哪些命令⾏的软件堪称神器？
终端调试哪家强？
⻙易笑：有哪些好⽤的bash 技巧（包括不限于快捷键、⾃⽤⼩脚本）？
