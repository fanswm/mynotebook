Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2019-01-31T17:16:51+08:00

====== 1 ======
Created 星期四 31 一月 2019

# Usage:
# make 			# compile all binary
# make clean		# remove ALL binaries and objects
# 以#开头的是备注

# 目标：预置条件
# <TAB>实现预置条件的步骤

.PHONY: all clean
# .PHONY用来定义这此不是文件的目标
# 这里.PHONY定义了all clean 两个伪目标

CC = gcc
# 定义CC变量，为避免循环引用可以用":=" 号，
# 循环引用的例子：
# CC = gcc 
# CC = ${CC}

LINKERFLAG = -lm
# LINKERFLAG 定义了在步骤中gcc命令需要用到的参数

# “$(wildcard pattern)" 是与文件名相关的一个函数。在本例中，所有"c"为后缀的文件名被存入`SRCS`变量。
# 假如Makefile目录下有foo.c bar.c，则SRCS 变量就代表这两个文件名
SRCS := $(wildcard *.c)
BINS := $(SRCS:%.c=%)
# 上面这一行被称为替代引用。SRCS 的值是`foo.c bar.c`, BINS 的值为`foo bar`

all: ${BINS}
# "all"是所有的目标的目标,当然你也可以不叫"all"
# 这里，all 调用 BINS 变量中的所有值作为子目标

%: %.o
	@echo "Checking..."
	${CC} ${LINKERFLAG} $< -o $@
# "@"符号表示：不打印这条命令本身
# "%" 匹配任意一个目标，假定 foo 是 ${BINS} 中的一个值。"%" 会匹配到 foo.
# 替换之后这一行变为： gcc -lm foo.o -o foo 
# "$<" 用于匹配预置条件，“$@" 用于匹配目标。
# 对于 ${BINS}中的每一个值，这条规则都会被调用一遍。

%.o: %.c
	@echo "Creating objects..."
	${CC} -c $<
# 展开后： gcc -c foo.c, 当然，这条规则会把${BINS}中的每一个目标都调用一遍。

clean:
	@echo "clean up..."
	rm *.txt

