Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2019-03-17T17:25:35+08:00

====== 编程中，有哪些好的习惯从一开始就值得坚持 ======
创建日期 星期日 17 三月 2019

重视模块化，重视抽象但不滥用

我刚接触编程的时候，在网上看到许多大牛写程序都十分注重模块化，因此我就下意识的模仿他们；后来看SICP，知道了抽象的好处，因此在写程序的时候会仔细思考抽象的问题。这些对我都有着非常大的帮助。

在一篇讲述程序员代码行数瓶颈的博客中（程序员的成长和代码行数的关系）提到，程序员在2k行、20k行、200k行等若干程序规模时会遇到瓶颈，如果不用更科学有效的方法，超过了这个行数代码就会混乱到难以维护。但我第一次写很大的程序时（8k+）并没有感觉到文中提到的瓶颈；我目前接手的项目有近900k行，我自己写的部分也已经快上10k，但我仍然没遇到文中提到的瓶颈。

针对这一现象，我做过一些实验。我在很不认真的写一些小程序时，也总是写的混乱不堪，我发现，这种情况下，程序行数超过200行我就觉的很难受了，在需要进行一点小的修改时，我往往需要花很长时间去寻找到底该改哪里，十分吃力——这种吃力感是我在那些精心思考的大项目里从未感受过的。这说明了，我并没有过人的天赋能在混乱中轻易找出清晰的脉络，那就是说，之前的如鱼得水，是因为好的习惯。

后来，我进行了深入的思考。在模块划分合理、抽象合理的程序里，我可以简单的把一个个功能抽象为一个简单的黑盒，我不需要知道他们内部发生了什么复杂的反应，我只需要知道他们对什么样的输入会做出什么样的输出。这种抽象极大的减轻了大脑的负担，让我可以把精力更多的投入到真正需要考虑的地方。而那些混乱的程序里，我需要理清每一句话之间的关系，这无疑会极大的消耗脑力。这种情况下，200行就浑身难受就可以理解了——因为我用于维护项目关系所消耗的脑力已经远远大于了那些好程序里的消耗。

这个习惯，真的让人十分受益，请一定坚持。刚开始的时候，你或许觉得花很长时间去思考程序的模块划分、抽象层级是十分浪费时间的无用功；但久了以后，你就会感受到这种习惯带来的好处：它会在无声无息之间帮你消除掉许多瓶颈。而且还有额外的好处：当你习惯用模块化组织你的思维时，思维能力也会有一定的增强。
https://note.youdao.com/web/#/file/recent/note/B701475DD5714F49908709DBE63D73D4/
