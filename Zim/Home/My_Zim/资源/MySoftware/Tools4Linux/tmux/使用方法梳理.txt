Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2018-11-29T19:44:26+08:00

====== 使用方法梳理 ======
创建日期 星期四 29 十一月 2018

Linux终端复用神器-Tmux使用梳理  

Tmux是一个优秀的终端复用软件，类似GNU Screen，但来自于OpenBSD，采用BSD授权。使用它最直观的好处就是，通过一个终端登录远程主机并运行tmux后，在其中可以开启多个控制台而无需再“浪费”多余的终端来连接这台远程主机。是BSD实现的Screen替代品，相对于Screen，它更加先进：支持屏幕切分，而且具备丰富的命令行参数，使其可以灵活、动态的进行各种布局和操作。对于Tmux的使用，可以参考：Tmux终端复用详解

Tmux 可用于在一个终端窗口中运行多个终端会话。不仅如此，还可以通过 Tmux 使终端会话运行于后台或是按需接入、断开会话，这个功能非常实用。

Tmux的使用场景
1）可以某个程序在执行时一直是输出状态，需要结合nohup、&来放在后台执行，并且ctrl+c结束。这时可以打开一个Tmux窗口，在该窗口里执行这个程序，用来保证该程序一直在执行中，只要Tmux这个窗口不关闭
2）公司需要备份数据库时，数据量巨大，备份两三天弄不完，这时不小心关闭了终端窗口或误操作就前功尽弃了，使用Tmux会话运行命令或任务，就不用担心这些问题。
3）下班后，你需要断开ssh或关闭电脑，将运行的命令或任务放置后台运行。
4）关闭终端,再次打开时原终端里面的任务进程依然不会中断

1）Tmux功能：
-  提供了强劲的、易于使用的命令行界面。
-  可横向和纵向分割窗口。
-  窗格可以自由移动和调整大小，或直接利用四个预设布局之一。
-  支持 UTF-8 编码及 256 色终端。
-  可在多个缓冲区进行复制和粘贴。
-  可通过交互式菜单来选择窗口、会话及客户端。
-  支持跨窗口搜索。
-  支持自动及手动锁定窗口。

2）Tmux安装
	 a）ubuntu版本下直接apt-get安装

1
# sudo apt-get install tmux
　　b）centos7版本下直接yum安装

1
# yum install -y tmux
　　    centos6版本需要编译安装 (百度云盘下载：https://pan.baidu.com/s/1eRUEUlG    密码：ewst)

tmux官网下载地址：http://tmux.github.io/ 
# yum install libevent libevent-devel ncurses-devel
# tar -zvxf tmux-2.3.tar.gz                      (提前下载：wget https://github.com/tmux/tmux/releases/download/2.3/tmux-2.3.tar.gz)
# cd tmux-2.3
# ./configure
# make && make install
--------------------
1）make编译tmux时，可能出现的错误
control.c: In function ‘control_callback’:
control.c:63: warning: implicit declaration of function ‘evbuffer_readln’
control.c:63: error: ‘EVBUFFER_EOL_LF’ undeclared (first use in this function)
control.c:63: error: (Each undeclared identifier is reported only once
control.c:63: error: for each function it appears in.)
control.c:63: warning: assignment makes pointer from integer without a cast
make: *** [control.o] Error 1
 
原因：使用的libevent的版本太低造成的，tmux1.8要求libevent>= 2.0.10-stable
 
解决办法：
# yum remove libevent libevent-devel      //先卸载yum安装的libevent
# rpm -qa|grep libevent          //确保已经卸载
 
到  http://libevent.org/  里面下载最新版的libevent
# tar -zvxf libevent-2.0.21-stable.tar.gz      (提前下载：wget  https://cloud.github.com/downloads/libevent/libevent/libevent-2.0.21-stable.tar.gz)
# cd libevent-2.0.21-stable
# ./configure
# make && make install
# ll /usr/local/lib/libevent.so
 
然后再接着make编译tmux就顺利通过了~~
 
2）运行tmux可能出现的错误：
tmux: error while loading shared libraries: libevent-2.0.so.5: cannot open shared object file: No such file or directory
 
解决办法：建立相应的软链接
32bit系统
# ln -s /usr/local/lib/libevent-2.0.so.5 /usr/lib/libevent-2.0.so.5
64bit系统
# ln -s /usr/local/lib/libevent-2.0.so.5 /usr/lib64/libevent-2.0.so.5
--------------------
	 c）在Mac OS中安装

 Homebrew
$ ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
 
安装tmux
$ brew install tmux
3）Tmux的使用
安装完成后输入命令tmux即可打开软件，界面十分简单，类似一个下方带有状态栏的终端控制台；但根据tmux的定义，在开启了tmux服务器后，会首先创建一个会话，而这个会话则会首先创建一个窗口，其中仅包含一个面板；也就是说，这里看到的所谓终端控制台应该称作tmux的一个面板，虽然其使用方法与终端控制台完全相同。
# tmux                                   //直接进入面板，如下使用效果：



Tmux的快捷键使用说明：

Ctrl+b
激活控制台；此时以下按键生效
系统操作
?
列出所有快捷键；按q返回
d
脱离当前会话；这样可以暂时返回Shell界面，输入tmux attach能够重新进入之前的会话
D
选择要脱离的会话；在同时开启了多个会话时使用
Ctrl+z
挂起当前会话
r
强制重绘未脱离的会话
s
选择并切换会话；在同时开启了多个会话时使用
:
进入命令行模式；此时可以输入支持的命令，例如kill-server可以关闭服务器
[
进入复制模式；此时的操作与vi/emacs相同，按q/Esc退出
~
列出提示信息缓存；其中包含了之前tmux返回的各种提示信息
窗口操作
c
创建新窗口
&
关闭当前窗口
数字键
切换至指定窗口
p
切换至上一窗口
n
切换至下一窗口
l
在前后两个窗口间互相切换
w
通过窗口列表切换窗口
,
重命名当前窗口；这样便于识别
.
修改当前窗口编号；相当于窗口重新排序
f
在所有窗口中查找指定文本
面板操作
”
将当前面板平分为上下两块
%
将当前面板平分为左右两块
x
关闭当前面板
!
将当前面板置于新窗口；即新建一个窗口，其中仅包含当前面板
Ctrl+方向键
以1个单元格为单位移动边缘以调整当前面板大小
Alt+方向键
以5个单元格为单位移动边缘以调整当前面板大小
Space
在预置的面板布局中循环切换；依次包括even-horizontal、even-vertical、main-horizontal、main-vertical、tiled
q
显示面板编号
o
在当前窗口中选择下一面板
方向键
移动光标以选择面板
{
向前置换当前面板
}
向后置换当前面板
Alt+o
逆时针旋转当前窗口的面板
Ctrl+o
顺时针旋转当前窗口的面板
=========================================================
需要注意的几点
1）进入tmux面板后，一定要先按ctrl+b，然后松开，再按其他的组合键才生效。
 
2）常用到的几个组合键：
ctrl+b ?            显示快捷键帮助
ctrl+b 空格键       采用下一个内置布局，这个很有意思，在多屏时，用这个就会将多有屏幕竖着展示
ctrl+b !            把当前窗口变为新窗口
ctrl+b  "           模向分隔窗口
ctrl+b %            纵向分隔窗口
ctrl+b q            显示分隔窗口的编号
ctrl+b o            跳到下一个分隔窗口。多屏之间的切换
ctrl+b 上下键      上一个及下一个分隔窗口
ctrl+b C-方向键    调整分隔窗口大小
ctrl+b &           确认后退出当前tmux
ctrl+b [           复制模式，即将当前屏幕移到上一个的位置上，其他所有窗口都向前移动一个。
ctrl+b c           创建新窗口
ctrl+b n           选择下一个窗口
ctrl+b l           最后使用的窗口
ctrl+b p           选择前一个窗口
ctrl+b w           以菜单方式显示及选择窗口
ctrl+b s           以菜单方式显示和选择会话。这个常用到，可以选择进入哪个tmux
ctrl+b t           显示时钟。然后按enter键后就会恢复到shell终端状态
ctrl+b d           脱离当前会话；这样可以暂时返回Shell界面，输入tmux attach能够重新进入之前的会话
========================================================
tmux的常规运维命令


1）安装命令：　
[root@Centos6 ~]# yum -y install tmux
　　
2）默认创建一个会话，以数字命名。（不推荐）
[root@Centos6 ~]# tmux
　　
3）新建会话，比如新创建一个会话以"ccc"命名
[root@Centos6 ~]# tmux new -s ccc
 
加上参数-d，表示在后台新建会话
root@bobo:~# tmux new -s shibo -d
root@bobo:~# tmux ls
shibo: 1 windows (created Tue Oct  2 19:22:32 2018) [135x35]
 
4）查看创建得所有会话
[root@Centos6 ~]# tmux ls
0: 1 windows (created Wed Aug 30 17:58:20 2017) [112x22](attached)    #这里的attached表示该会话是当前会话
aaa: 2 windows (created Wed Aug 30 16:54:33 2017) [112x22]
ccc: 1 windows (created Wed Aug 30 17:01:05 2017) [112x22]
   
5）登录一个已知会话。即从终端环境进入会话。
第一个参数a也可以写成attach。后面的aaa是会话名称。
[root@Centos6 ~]# tmux a -t aaa 
　　
6）退出会话不是关闭：
登到某一个会话后，依次按键ctrl-b + d，这样就会退化该会话，但不会关闭会话。
如果直接ctrl + d，就会在退出会话的通话也关闭了该会话！
   
7）关闭会话（销毁会话）
[root@Centos6 ~]# tmux ls
aaa: 2 windows (created Wed Aug 30 16:54:33 2017) [112x22]
bbb: 1 windows (created Wed Aug 30 19:02:09 2017) [112x22]
   
[root@Centos6 ~]# tmux kill-session -t bbb
   
[root@Centos6 ~]# tmux ls
aaa: 2 windows (created Wed Aug 30 16:54:33 2017) [112x22]
  
8）重命名会话
[root@Centos6 ~]# tmux ls  
wangshibo: 1 windows (created Sun Sep 30 10:17:00 2018) [136x29] (attached)
  
[root@Centos6 ~]# tmux rename -t wangshibo kevin
  
[root@Centos6 ~]# tmux ls
kevin: 1 windows (created Sun Sep 30 10:17:00 2018) [136x29] (attached)
========================================================
tmux的远程批量操作的shell脚本

在使用SSH或telnet远程连接服务器时，可能都遇到为一些长时间运行的任务而头疼，比如系统备份、ftp 传输等等。通常情况下我们都是为每一个这样的
任务开一个远程终端窗口，因为他们执行的时间太长了。必须等待它执行完毕，在此期间可不能关掉窗口或者断开连接，否则这个任务就会被杀掉，一切半
途而废了。也许nohup命令可以达到这个目的，如果程序的标准输出/标准错误是终端， nohup默认将其重定向到nohup.out文件。值得注意的是nohup命令
只是使得程序忽略SIGHUP信号，还需要使用标记&把它放在后台运行。
 
nohup <command> [argument…] &
 
虽然nohup很容易使用，但还是比较“简陋”的，对于简单的命令能够应付过来，对于复杂交互的程序就麻烦了。
 
使用tmux打开一个终端窗口，可以在窗口里执行一个长时间运行的交互式命令操作，令其一直在后台跑着，并且在按键ctrl-b-d后，可以无感知的退出窗口，
而退出后窗口不会关闭，即窗口里执行的交互命令也不会结束。这比起传统的"nohup commang & （然后按ctrl+c）"的方式要还用很多。
   
如何在linux终端里创建一个tmux窗口的同时直接在窗口终端里执行命令呢？
这就需要用到tmux send -t session_name "command" ENTER！！！
   
示例一
root@bobo:~# tmux new -d -s kevin_session && tmux send -t kevin_session '/usr/local/bin/main' ENTER && tmux attach -t kevin_session
[detached (from session kevin_session)]
   
root@bobo:~# tmux ls
kevin_session: 1 windows (created Tue Oct  2 19:38:36 2018) [135x34]
   
上面的命令可以拆分为下面三个：
root@bobo:~# tmux new -d -s kevin_session
root@bobo:~# tmux send -t kevin_session '/usr/local/bin/main' ENTER
root@bobo:~# tmux attach -t kevin_session
  
解释说明：
上面涉及到三个命令
第一个表示：在后台创建一个窗口，名为kevin_session
第二个表示：创建窗口的同时在终端里执行命令'/usr/local/bin/main'，这里用单引号或双引号都可以。
第三个表示：进入到刚才创建的窗口kevin_session里面去
   
示例二
在创建窗口的同时，可以同时在窗口终端里连续执行两个或多个命令
root@bobo:~# su - kevin -c "tmux new -d -s haha && tmux send -t haha 'ifconfig' ENTER && tmux send -t haha 'hostname' ENTER"
kevin_session: 1 windows (created Tue Oct  2 19:38:36 2018) [135x34]
root@bobo:~# su - kevin
kevin@bobo:~$ tmux ls
haha: 1 windows (created Tue Oct  2 19:48:12 2018) [135x34]
kevin@bobo:~$ tmux a -t haha
   
如下一个实例：
在远程进行tmux的批量关闭和批量开启的shell脚本操作
   
1) 批量关闭/opt/ip.list文件里ip所在机器的main二进制进程（这个main进程是在tmux执行的，一直交互执行的那种）
[root@shell002 ~]# vim /opt/script/6_main_stop.sh
#!/bin/bash
for i in $(cat /opt/ip.list)
do
ssh -p22 root@$i 'ps -ef|grep main|grep -v grep|awk -F" " "{print $2}"|xargs kill -9 >/dev/null 2>&1'
done
   
2）批量开启/opt/ip/list文件里ip所在机器的tmux窗口里的main二进制进程（即先关闭tmux，再创建tmux窗口以及在里面执行main进程）
[root@shell002 ~]# vim /opt/script/7_main_start.sh
#!/bin/bash
for i in $(cat /opt/ip.list)
do
ssh -p22 root@$i 'ps -ef|grep tmux|grep -v grep|awk -F" " "{print $2}"|xargs kill -9 >/dev/null 2>&1'
ssh -p22 root@$i 'tmux new -d -s kevin_session && tmux send -t kevin_session '/usr/local/bin/main' ENTER'
done
https://www.cnblogs.com/kevingrace/p/6496899.html
