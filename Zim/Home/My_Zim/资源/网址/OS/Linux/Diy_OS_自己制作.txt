Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2018-11-29T13:38:33+08:00

====== Diy OS 自己制作 ======
Created Thursday 29 November 2018

十五分钟制作一个属于自己的Linux操作系统！

地球的外星人君
地球的外星人君
https://zhuanlan.zhihu.com/p/50912072?utm_source=com.youdao.note&utm_medium=social&utm_oi=33829276352512

Linux云计算和Python推动市场提升的学习研究者。
​关注他
37 人赞了该文章
一、前言

Linux操作系统至1991年10月5日诞生以来，就其开源性和自由性得到了很多技术大牛的青睐，每个Linux爱好者都为其贡献了自己的一份力，不管是在Linux内核还是开源软件等方面，都为我们后来人提供了一个良好的学习和研究环境。

本文主要通过裁剪现有Linux系统，根据自己的需要，打造一个属于自己的Linux小系统，让其能够具备Linux的一些常用小功能。

二、原理

__启动流程介绍：__

制作Linux小系统之前，我们有必要再了解一下Linux的启动流程：

1、首先Linux要通过POST自检，检查硬件设备有没有故障

2、如果有多块启动盘的话，需要在BIOS中选择启动磁盘

3、启动MBR中的bootloader引导程序

4、加载内核文件

5、执行所有进程的父进程、老祖宗init

6、打印欢迎界面

在Linux的启动流程中，加载内核文件时还需要借助别外两个文件：

1）initrd，是CentOS5上用内存模拟的磁盘设备

2）initramfs，是CentOS6上用内存模拟的文件系统

在启程的流程中，init主要是用来做哪些操作的呢？

__init通过调用/etc/inittab这个配置文件，然后再去执行/etc/rc.d/rc.sysinit的系统初始化脚本__

好啦，原理我们已经知道了，接下来我们来看看具体的思路吧(〃'▽'〃)

三、思路

1、我们要在一个现有的Linux系统上加一块硬盘/dev/sdb，在硬盘上分两个分区，一个是/boot，一个是/，并将其格式化。当然，我们需要明确的概念是，我们现在加的这个硬盘在现有的Linux系统中是/dev/sdb，但是，当我们把东西全部设置好时，我们就需要把这个硬盘拔除，放在我们的新系统上，此时，他就是/dev/sda啦。

2、在/dev/sdb这个硬盘上，我们要将其打造成一个独立的Linux系统，里面的所有文件是需要我们一个一个拷贝进去的。而且，作为一个将来要当/dev/sda的硬盘，里面一定要有grub文件诺~所以我们要安装grub文件。

3、同时，作为一个能独立运行的Linux系统，内核是一定不能少的！所以，我们要把内核文件和initramfs文件也一起拷到我们的/dev/sdb上。

4、现在我们系统已经初具规模了，接下来就是需要程序了0.0关于程序的拷贝我们可以通过一个脚本来实现。具体的脚本在下文中会给大家说到。

以上步骤完成，我们的自制Linux就完成啦~我们的思路就是这么回事，接下来，我们就开始吧(￣▽￣)~*

四、操作步骤

本次实验我们以centos6.9为例~

1、目标磁盘分区

首先，我们在宿主机上添加一块大小为20G的硬盘：__SCSI格式__

添加完成后，点击确定，然后我们打开宿主机。 通过fdisk来给我们的/dev/sdb进行分区：
`sudo fdisk /dev/sdb`

接下来，我们对/dev/sdb的分区进行格式化：
```
sudo mkfs.ext4 /dev/sdb1
sudo mkfs.ext4 [[/dev/sdb2]]
```

__格式化完成后，我们创建一个文件夹。进行挂载：__
__```__
sudo mkdir /mnt/boot
sudo mount [[/dev/sdb1]] /mnt/boot
__```__

__注意：新建的文件夹必须是/mnt/boot__

2、安装grub至目标磁盘

我们直接用grub-install –root-directory=/mnt命令来安装。用这个命令会安装grub引导第二阶段的文件。
`sudo grub-install --root-directory=/mnt /dev/sdb`

我们可以来看一下二进制确认我们是否安装成功：
`hexdump -C -n 512 /dev/sdb`

安装成功。

3、复制内核文件和initrd文件

将内核文件和initrd文件复制到/dev/sdb下的boot目录中：
```
cp /boot/vmlinuz-2.6.32-696.el6.x86_64 /mnt/boot/
cp /boot/initramfs-2.6.32-696.el6.x86_64.img /mnt/boot/
```

4、建立grub.conf文件

上面我们已经移植了内核和initrd文件，我们可以根据其版本来编写grub.conf文件：
	vim /mnt/boot/grub/grub.conf
```
default=0
timeout=3
title linux owner
kernel /vmlinuz-2.6.32-696.el6.x86_64 root=UUID=xxxxxx selinux=0 init=/bin/bash
initrd /initramfs-2.6.32-696.el6.x86_64.img

```

注意，我们要把selinux给关掉，同时设定一下init，告诉内核不要再去找这个程序了，不然开机的时候会出现错误的~

5、创建一级目录并复制文件
mkdir /mnt/sysroot
mkdir -pv /mnt/sysroot/{etc,tmp,var,usr,sys,proc,opt,home,root,dev,mnt,media}


至此，我们就缺目录和文件了~

创建开机后的一级目录，同时把/dev/sdb2挂载至/mnt/sysroot，使该目录作为根目录：


复制文件，复制文件我们通过脚本执行，复制我们平时常用的命令即可，小编这里复制了ls，ifconfig，bash，reboot，rm，modprobe，mount，ip，mkdir，touch，cat，vi，less，shutdown，insmod。我们可以用tree查看一下这些命令的复制情况：


很明显我们都复制成功了~

__附：复制命令的脚本源代码__
```
#!/bin/bash
#-------------------------------
#FileName: copycmd.sh
#Revision:1.0
#Date:2017-09-14
#Author:XXX
#Email: xxx@xxx.xxx
#Website: http://xxx.xxx.xxx
#Desoription: 复制命令到指定目录。
#--------------------------------------

#定义变量
destdir=/mnt/sysroot
SETCOLOR_FAILURE="echo -en \\033[1;35;5m"
SETCOLOR_NORMAL="echo -en \\033[0m"

echo_jiantou(){
echo -en \\033[40G
$SETCOLOR_FAILURE
}

echo_copy(){
echo -en \\033[80G
$SETCOLOR_FAILURE
echo -n $"copy end!"
$SETCOLOR_NORMAL
}

#define func
#copy cmd
copy_cmd(){
# define bianliang
	local cmd_path=`which --skip-alias $cmd`
	local cmd_dir=`dirname $cmd_path`
	local cmd_distdir=$distdir$cmd_dir
	if [ ! -d $cmd_distdir ] ;then
		mkdir -pv $cmd_distdir &> /dev/null
	fi
	cp $cmd_path $cmd_distdir &> /dev/null
	echo -e "\t$cmd_path `echo_jiantou` \t $cmd_distdir `echo_copy`"
}
#复制库文件，判断库文件是否存在，若存在，跳过该次循环；如不存在，判断库文件所在目录是否存在，若存在，复制库文件；若不存在，则新建目录并复制库文件43 
copy_libfile(){
	local cmd_path=`which --skip-alias $cmd`
	local lib_list=`ldd $cmd_path |egrep -o "/.* " `
	for i in $lib_list ; do
		local lib_dir=$distdir$i
		local lib_distdir=$distdir`dirname $i`
		echo -e "\t$i `echo_jiantou` \t $lib_distdir `echo_copy`"
		if [ -e $lib_dir ]; then
			continue
		elif [ -d $lib_dir ]; then
			cp $i $lib_distdir
		else
			mkdir -pv $lib_distdir &> /dev/null
			cp $i $lib_distdir
		fi
	done
}
#若/mnt/sysroot不存在，则创建
if [ ! d $distdir ]; then
	mkdir $distdir
fi

#死循环，清空屏幕
while true; do
	tput clear
#正式
cat <<-EOF
*************************************************
命令复制脚本
请输入一个命令
按q或quit退出脚本本
**********************************************
EOF

	read -p "Please input & execute command:" cmd
	if [ "$cmd" == 'q' -o "$cmd" == 'quit' ]; then
		unset cmd distdir
		break
	fi
#判断输入的命令是否存在
	if [ -n "$cmd" ]; then
		which --skip-alias "$cmd" &> /dev/null
		if [ $? -eq 0 ]; then
			copy_cmd $cmd
			copy_libfile $cmd
		else
			echo "$cmd is not exist"
		fi
	else
		echo "Please enter at leastone command"
	fi
	echo -e "Please enter \\033[31;lmenter\\033[0m and we continue"
	read input
	
done
```

__附：复制命令的脚本源代码 END__

6、复制网卡驱动

我们基本工作已经完成了，如果想使这个虚拟机带有网卡功能，我们就必须把网卡驱动拷过来，具体操作如下：

1）查询网卡详细信息：
`modinfo e1000`


2）把网卡模块的路径复制到/mnt/sysroot的库文件下：
`cp /lib/modules/2.6.32-696.el6.x86_64/kernel/drivers/net/e1000/e1000.ko /mnt/sysroot/lib64/`

以上，我们的操作全部完成。现在我们就可以关机，然后把/dev/sdb这个硬盘拆下来，放到新的虚拟机上运行了~

五、测试开机

我们创建一个新的虚拟机，启动的时候会带一个硬盘，我们不用它的，删掉再把我们自己定义的硬盘加进去：







此时，我们做好的硬盘已经加进去了。我们可以试试能不能启动了，如果虚拟机可以正常开启，就说明我们的实验成功~



六、实现网络功能


由于图片可能会看不清楚，现把代码标出如下：
```
#手动添加网卡驱动
insmod /lib64/e1000.ko

#查看ip
ip a

#添加ip地址
ifconfig eth0 192.168.252.62/24 up

#查看ip
ip a
```

由于复制命令的时候忘记复制ping了……所以我们用另一台机器来ping一下这个ip地址：


可以ping通~

至此，我们已经完成了私人订制Linux的全部操作，同时我们的自制Linux也可以联网啦~

所有实验圆满成功！撒花✿✿ヽ(°▽°)ノ✿

你想更深入了解学习Python知识体系，你可以看一下我们花费了一个多月整理了上百小时的几百个知识点体系内容：

【超全整理】《Python自动化全能开发从入门到精通》python基础教程笔记 (http://www.magedu.com/73198.html?Python_wenzhang_zhihu_jinke_16daopythonmiansiti_34019714)
