Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2019-11-26T16:38:49+08:00

====== 0 NoSQL 简介 ======
创建日期 星期二 26 十一月 2019

__NoSQL__(NoSQL = Not Only SQL )，意即"不仅仅是SQL"。

这些数据有很大一部分是由__关系数据库管理系统__（__RDMBS__s）来处理。 1970年 E.F.Codd's提出的关系模型的论文 "A relational model of data for large shared data banks"，这使得数据建模和应用程序编程更加简单。

通过应用实践证明，__关系模型__是非常__适合于客户服务器编程__，远远超出预期的利益，今天它是结构化数据存储在网络和商务应用的主导技术。

NoSQL 是一项全新的数据库革命性运动，早期就有人提出，发展至2009年趋势越发高涨。NoSQL的拥护者们__提倡运用非关系型的数据存储__，相对于铺天盖地的关系型数据库运用，这一概念无疑是一种全新的思维的注入。

__关系型数据库遵循ACID规则__
__事务__在英文中是transaction，和现实世界中的交易很类似，它有如下四个特性：

1、A (Atomicity) __原子性__
原子性很容易理解，也就是说__事务里的所有操作要么全部做完，要么都不做，事务成功的条件是事务里的所有操作都成功__，只要有一个操作失败，整个事务就失败，需要回滚。
比如银行转账，从A账户转100元至B账户，分为两个步骤：1）从A账户取100元；2）存入100元至B账户。这两步要么一起完成，要么一起不完成，如果只完成第一步，第二步失败，钱会莫名其妙少了100元。

2、C (Consistency) __一致性__
一致性也比较容易理解，也就是说__数据库要一直处于一致的状态，事务的运行不会改变数据库原本的一致性约束。__
例如现有完整性约束a+b=10，如果一个事务改变了a，那么必须得改变b，使得事务结束后依然满足a+b=10，否则事务失败。

3、I (Isolation) __独立性__
所谓的独立性是指__并发的事务之间不会互相影响，如果一个事务要访问的数据正在被另外一个事务修改，只要另外一个事务未提交，它所访问的数据就不受未提交事务的影响。__
比如现有有个交易是从A账户转100元至B账户，在这个交易还未完成的情况下，如果此时B查询自己的账户，是看不到新增加的100元的。

4、D (Durability) __持久性__
持久性是指__一旦事务提交后，它所做的修改将会永久的保存在数据库上，即使出现宕机也不会丢失。__


__分布式系统__
分布式系统（distributed system）由多台计算机和通信的软件组件通过计算机网络连接（本地网络或广域网）组成。

分布式系统是建立在网络之上的软件系统。正是因为软件的特性，所以分布式系统具有高度的内聚性和透明性。

因此，网络和分布式系统之间的区别更多的在于高层软件（特别是操作系统），而不是硬件。

分布式系统可以应用在在不同的平台上如：Pc、工作站、局域网和广域网上等。


__分布式计算的优点__
__可靠性__（容错） ：
分布式计算系统中的一个重要的优点是可靠性。一台服务器的系统崩溃并不影响到其余的服务器。

__可扩展性__：在分布式计算系统可以根据需要增加更多的机器。
__资源共享__：共享数据是必不可少的应用，如银行，预订系统。
__灵活性__：由于该系统是非常灵活的，它很容易安装，实施和调试新的服务。
__更快的速度__：分布式计算系统可以有多台计算机的计算能力，使得它比其他系统有更快的处理速度。
__开放系统__：由于它是开放的系统，本地或者远程都可以访问到该服务。
__更高的性能__：相较于集中式计算机网络集群可以提供更高的性能（及更好的性价比）。


分布式计算的__缺点__
故障排除： 故障排除和诊断问题。
软件：__更少的软件支持__是分布式计算系统的主要缺点。
网络：网络基础设施的问题，包括：传输问题，高负载，信息丢失等。
安全性：开发系统的特性让分布式计算系统存在着数据的安全性和共享的风险等问题。


什么是NoSQL?
__NoSQL，指的是非关系型的数据库。NoSQL有时也称作Not Only SQL的缩写__，是对不同于传统的关系型数据库的数据库管理系统的统称。

NoSQL__用于超大规模数据的存储__。（例如谷歌或Facebook每天为他们的用户收集万亿比特的数据）。这些类型的数据存储__不需要固定的模式，无需多余操作就可以横向扩展。__

__为什么使用NoSQL ?__
今天我们可以通过第三方平台（如：Google,Facebook等）可以很容易的访问和抓取数据。用户的个人信息，社交网络，地理位置，用户生成的数据和用户操作日志已经成倍的增加。我们如果要对这些用户数据进行挖掘，那SQL数据库已经不适合这些应用了, NoSQL数据库的发展却能很好的处理这些大的数据。

web-data-image
实例
社会化关系网:

Each record: UserID1, UserID2
Separate records: UserID, first_name,last_name, age, gender,...
Task: Find all friends of friends of friends of ... friends of a given user.
Wikipedia 页面 :

Large collection of documents
Combination of structured and unstructured data
Task: Retrieve all pages regarding athletics of Summer Olympic before 1950.

__RDBMS vs NoSQL__
RDBMS
- 高度组织化结构化数据
- 结构化查询语言（SQL） (SQL)
- 数据和关系都存储在单独的表中。
- 数据操纵语言，数据定义语言
- 严格的一致性
- 基础事务

NoSQL
- 代表着不仅仅是SQL
- 没有声明性查询语言
- 没有预定义的模式
-__键 - 值对存储，列存储，文档存储，图形数据库__
- __最终一致性，而非ACID属性__
- 非结构化和不可预知的数据
- __CAP定理__
- __高性能，高可用性和可伸缩性__

bigdata
NoSQL 简史
NoSQL一词最早出现于1998年，是Carlo Strozzi开发的一个轻量、开源、不提供SQL功能的关系数据库。

2009年，Last.fm的Johan Oskarsson发起了一次关于分布式开源数据库的讨论[2]，来自Rackspace的Eric Evans再次提出了NoSQL的概念，这时的NoSQL主要指非关系型、分布式、不提供ACID的数据库设计模式。
 
2009年在亚特兰大举行的"no:sql(east)"讨论会是一个里程碑，其口号是"select fun, profit from real_world where relational=false;"。因此，对NoSQL最普遍的解释是"非关联型的"，强调Key-Value Stores和文档数据库的优点，而不是单纯的反对RDBMS。

__CAP定理__（CAP theorem）
在计算机科学中, CAP定理（CAP theorem）, __又被称作 布鲁尔定理__（Brewer's theorem）, 它指出__对于一个分布式计算系统来说，不可能同时满足以下三点:__

__一致性__(Consistency) (所有节点在同一时间具有相同的数据)
__可用性__(Availability) (保证每个请求不管成功或者失败都有响应)
__分隔容忍__(Partition tolerance) (系统中任意信息的丢失或失败不会影响系统的继续运作)
CAP理论的__核心__是：一个分布式系统__不可能同时很好的满足一致性，可用性和分区容错性这三个需求，最多只能同时较好的满足两个__。

因此，根据 CAP 原理__将 NoSQL 数据库分成了__满足 __CA 原则__、满足 __CP 原则__和满足 __AP 原则__三 大类：

CA - 单点集群，满足一致性，可用性的系统，通常在可扩展性上不太强大。
CP - 满足一致性，分区容忍必的系统，通常性能不是特别高。
AP - 满足可用性，分区容忍性的系统，通常可能对一致性要求低一些。
cap-theoram-image

__NoSQL的优点/缺点__
优点:
- 高可扩展性
- 分布式计算
- 低成本
- 架构的灵活性，半结构化数据
- 没有复杂的关系

缺点:
- 没有标准化
- 有限的查询功能（到目前为止）
- 最终一致是不直观的程序

__BASE__
BASE：Basically Available, Soft-state, Eventually Consistent。 由 Eric Brewer 定义。

BASE是NoSQL数据库通常对可用性及一致性的__弱要求原则__:

Basically Availble --__基本可用__
Soft-state --软状态/__柔性事务__。 "Soft state" 可以理解为"无连接"的, 而 "Hard state" 是"面向连接"的
Eventual Consistency --__最终一致性__ 最终一致性， 也是是 ACID 的最终目的。

__ACID vs BASE__
ACID	BASE
原子性(Atomicity)		基本可用(Basically Available)
一致性(Consistency)	软状态/柔性事务(Soft state)
隔离性(Isolation)		最终一致性 (Eventual consistency)
持久性 (Durable)	 

NoSQL 数据库分类
类型	部分代表
特点
__列存储__	
Hbase
Cassandra
Hypertable
顾名思义，是按列存储数据的。最大的特点是方便存储结构化和半结构化数据，方便做数据压缩，对针对某一列或者某几列的查询有非常大的IO优势。

__文档存储__

__MongoDB__
CouchDB	文档存储一般用类似json的格式存储，存储的内容是文档型的。这样也就有有机会对某些字段建立索引，实现关系数据库的某些功能。

__key-value存储__	
Tokyo Cabinet / Tyrant
Berkeley DB
MemcacheDB
Redis
可以通过key快速查询到其value。一般来说，存储不管value的格式，照单全收。（Redis包含了其他功能）

__图存储__

Neo4J
FlockDB
图形关系的最佳存储。使用传统关系数据库来解决的话性能低下，而且设计使用不方便。

__对象存储__

db4o
Versant
通过类似面向对象语言的语法操作数据库，通过对象的方式存取数据。

__xml数据库__

Berkeley DB XML
BaseX
高效的存储XML数据，并支持XML的内部查询语法，比如XQuery,Xpath。


谁在使用
现在已经有很多公司使用了 NoSQL：
Google
Facebook
Mozilla
Adobe
Foursquare
LinkedIn
Digg
McGraw-Hill Education
Vermont Public Radio
