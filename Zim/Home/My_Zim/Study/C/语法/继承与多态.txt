Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2017-12-01T11:43:19+08:00

====== 继承与多态 ======
Created Friday 01 December 2017

https://zhuanlan.zhihu.com/p/25127633?utm_source=com.youdao.note&utm_medium=social

我们知道，继承(inheritance)与多态(polymorphism)是面向对象语言的重要特性。在这篇文章中，笔者将用面向过程的C语言实现简单的继承与多态，希望能帮助读者从原理上更好地理解C++的继承与多态机制。笔者假定读者对C语言和C++语言都有一定的知识储备。如果读者只学过C语言，也可以跳过与C++相关的部分。

本文用常见的动物来举例子，首先，我们来看这样一个类

class Animal
{
public:
	char name[20];
	virtual void Speak()=0;
	void Introduce();
};
这个类Animal定义了成员变量name，声明了成员函数Speak和Introduce。其中Speak是纯虚函数，即在基类中没有实现的虚函数。像Animal这样有纯虚函数的类叫做抽象类(abstract class)，它不能生成对象。

下面是它的两个子类 

class Cat:public Animal
{
public:
	char color[20];
	virtual void Speak();
	void ShowColor();
};

class Dog:public Animal
{
public:
	virtual void Speak();
};
Cat类定义了一个成员变量color，声明了Speak和ShowColor函数，而Dog类只是声明了Speak函数。（子类应该实现父类的纯虚函数，若不实现，则该类仍然是抽象类）其中函数的定义在这篇文章中略去。

接下来我们就可以面向对象编程啦！首先，我们实例化Cat类和Dog类，紧接着进行一系列的初始化，这里略去 。

Cat white_cat,black_cat;
Dog doge;
之后，我们可以访问成员变量

cout<<white_cat.name<<black_cat.name<<doge.name;
可以访问成员函数

white_cat.Introduce();
black_cat.Introduce();
doge.Introduce();
white_cat.ShowColor();
black_cat.ShowColor();
也可以用基类指针访问虚函数。这时虽然大家都是Animal*，但是调用的Speak函数却是各自的类实现的Speak。

Animal* animals[]={&white_cat,&black_cat,&doge};
for(int i=0;i<3;i++) animals[i]->Speak();
以上内容是对C++的简单回顾，下面我们进入正题。

我们该怎样用C语言实现以上内容呢？

一个很自然的想法就是用struct，因为它可以像类一样定义成员变量。

例如

struct animal
{
	char name[20];
};
void Introduce(struct animal*this)
{
	printf("I'm a %s.\n",this->name);
}
然后我们可以这样用：

struct animal monster;
strcpy(monster.name,"monster");
Introduce(&monster);
成员变量的访问方式一样，都是

对象.变量名

只是成员函数的访问方式变了，变成了

成员函数(对象指针，其他参数)

解决了第一个问题，第二个问题来了，怎么继承呢？请看下面的代码

struct cat
{
	struct animal base;
	char color[20];
};
struct dog
{
	struct animal base;
};
在子类的结构体中，在开头定义base变量，继承父类的所有变量。访问父类的变量可以这样

struct cat white_cat;
white_cat.base.name;
也可以这样

struct animal* p=(struct animal*)&white_cat;
p->name;
如果把base定义在开头，进行指针的强制转换时可以直接(struct animal*)&white_cat。当然也可以&white_cat.base，在后续的文章中，我会继续讨论不把base定义在开头的情况。

最后一个问题，虚函数怎么处理？

我们可以用函数指针。其实C++也是这么干的，每个有虚函数的类都有虚函数表(virtual table)。有时候我们会看到这样的错误提示。

对‘vtable for xxx’未定义的引用
错误提示中的'vtable'就是虚函数表。

在基类中定义函数指针，然后在运行时动态绑定(dynamic binding)，与Animal类相关的代码如下：

// Animal
struct animal
{
	char name[20];
	void (*Speak)();
};

// Animal::Animal(const char*name,void(*fun)())
void Animal(struct animal*this,const char*name,void(*fun)())
{
	strcpy(this->name,name);
	this->Speak=fun;
}

// Animal::Introduce()
void Introduce(struct animal*this)
{
	printf("I'm a %s.\n",this->name);
}
下面是Cat类和Dog类的，可以看到，CatSpeak和DogSpeak两个函数的地址分别在构造函数Cat和Dog中赋值给了函数指针变量Speak。

// Cat:Animal
struct cat
{
	struct animal base;
	char color[20];
};

// Cat::Speak()
void CatSpeak()
{
	printf("miao miao miao miao miao?????\n");
}

// Cat::Cat(const char*color)
void Cat(struct cat*this,const char*color)
{
	Animal((struct animal*)this,"cat",CatSpeak);
	strcpy(this->color,color);
}

// Cat::ShowColor()
void ShowColor(struct cat*this)
{
	printf("I'm a %s cat.\n",this->color);
}

// Dog:Animal
struct dog
{
	struct animal base;
};

// Dog::Speak()
void DogSpeak()
{
	printf("wang!wang!wang!\n");
}

// Dog::Dog()
void Dog(struct dog* this)
{
	Animal((struct animal*)this,"dog",DogSpeak);
}
做好上面的准备后，我们来试试。

int main()
{
	struct cat white_cat,black_cat;
	struct dog doge;
	
	Cat(&white_cat,"white");
	Cat(&black_cat,"black");
	Dog(&doge);

	struct animal* animals[]={&white_cat,&black_cat,&doge};
	for(int i=0;i<3;i++)
	{
		Introduce(animals[i]);
		animals[i]->Speak();
	}
	ShowColor(&white_cat);
	ShowColor(&black_cat);
	return 0;
}
输出如下：

I'm a cat.
miao miao miao miao miao?????
I'm a cat.
miao miao miao miao miao?????
I'm a dog.
wang!wang!wang!
I'm a white cat.
I'm a black cat.
当然，能用C语言实现面向对象特性还很简陋，public,private等修饰符没有办法实现。

完整代码
[[./JiChengYuDuoTai.c]] 

[C语言]继承与多态（二）
魏王雅望非常
魏王雅望非常
9 个月前
上次我们实现了简单的继承和多态，这次我们来实现一下多重继承。为了简便起见，这次我们不涉及虚函数。在上篇文章中我们已经知道，单一继承时，父类的数据可以放在子类数据的开头，这样只需要转换一下指针类型即可实现父类指针与子类指针之间的转换。但如果我们有多个父类时，该怎么实现从父类指针到子类指针的转换呢？为了解决这一问题，我们不妨先看一个例子。
typedef struct car
{
    int max_speed;
}Car;

typedef struct for_sale
{
    int price;
}ForSale;

typedef struct ford_car
{
    Car car;
    ForSale sale;
}FordCar;
首先定义两个父类(base class)，一个是Car，一个是ForSale，然后子类(subclass)FordCar继承自上述两个父类。下面为这三个类分别定义一个函数。

void drive(Car* this)
{
    printf("I can drive at the speed of %d kilometers per hour\n",
        this->max_speed);
}

void sale(ForSale* this)
{
    printf("The price is %d yuan\n",this->price);
}

void ford_car_sale(FordCar* this)
{
    printf("The ford car will cost you %d yuan,\n
        and it can drive at the speed of %d kilometers per hour\n",
        this->car.max_speed,
        this->sale.price);
}
其实你应该已经发现，只要我们能实现子类与父类指针之间的自由转换，那么继承就能做到。而我们在考虑用C语言实现多重继承时应该解决的主要问题，也正是指针之间的转换。

#define FordCar2Car(a) ((Car*)&(a->car))
#define FordCar2ForSale(a) ((ForSale*)&(a->sale))
#define Car2FordCar(a) ((FordCar*)a)
#define ForSale2FordCar(a) ( (FordCar*) ( ((char*)a) - \
offsetof(FordCar,sale) ) )
我定义了这样一些宏，实现指针之间的转换。前两个很好理解，第三个与单一继承的情况类似，也容易理解。至于第四个，我们可以先看一个内存布局的图（编译器在实现时可能有微调，不影响结果分析）。


我们发现，Car*和FordCar*指向的地址一样，所以可以很轻松地实现互相转换。

而ForSale的数据相对于首地址来说有一段偏移量(Offset)，似乎不那么好处理，但幸运地是，这段偏移量是固定的，而且可以算出来。

头文件stddef.h中定义了这样一个宏

offsetof(type, member)
可以用于计算结构体成员的地址的偏移量，有了这个宏，我们就能轻松地把ForSale*转化为FordCar*啦。我们只需要先把FordSale*转化为char*，然后减去offset，最后把它转化为FordCar*，就像这样：

#define ForSale2FordCar(a) ( (FordCar*) ( ((char*)a) - \
offsetof(FordCar,sale) ) )
测试一下：

int main()
{
    FordCar A;
    A.car.max_speed=120;
    A.sale.price=500000;

    printf("-------------------------------------------------\n");
    // base class->subclass
    FordCar*pford=&A;
    sale(FordCar2ForSale(pford));
    drive(FordCar2Car(pford));
    printf("-------------------------------------------------\n");
    // subclass->base class
    Car* pcar=FordCar2Car(pford);
    ForSale* pfor_sale=FordCar2ForSale(pford);
    ford_car_sale(Car2FordCar(pcar));
    ford_car_sale(ForSale2FordCar(pfor_sale));
    return 0;
}
结果如下：

-------------------------------------------------
The price is 500000 yuan
I can drive at the speed of 120 kilometers per hour
-------------------------------------------------
The ford car will cost you 120 yuan,
and it can drive at the speed of 500000 kilometers per hour
The ford car will cost you 120 yuan,
and it can drive at the speed of 500000 kilometers per hour
当然，从上面这个例子看来，这种多重继承似乎并没有多少吸引力。

但是当你写链表时，你会惊喜地发现，你可以只用写一套链表的代码，然后让各个需要链式连接的结构体继承链表的节点。大概就像这样：

struct node
{
    struct node* prev;
    struct node* next;
};

struct data1
{
    // your data
    struct node* node;
};
然后你会发现你还可以重复继承，比如这样：

struct data2
{
    // your data
    struct node* node1;
    struct node* node2;
};
十字链表一下子就实现了。

如果你还不满意，你还可以这样：

struct data2
{
    // your data
    struct node* node[10];
};
而这一切的背后，都只需要一套以struct node为操作对象的链表代码和一些根据需要定义的宏。

当然，这么优雅的写法肯定不是我想出来的（：－Ｄ），我的老师说Linux内核的链表就是这样实现的，他还说：“学数据结构最好的教材就是Linux内核。”

我暂时是没有那个时间和能力去研究Linux内核源码了，如果知友们有看过Linux内核的，还望不吝赐教。


本例代码
[[./JiChengYuDuoTai2.c]] 

https://zhuanlan.zhihu.com/enjoyable-lab
