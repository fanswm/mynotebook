Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2020-01-11T16:10:47+08:00

====== 结合性 ======
创建日期 星期六 11 一月 2020

C语言运算符的结合性


在标准C语言的文档里，对操作符的结合性并没有做出非常清楚的解释。一个满分的回答是：__它是仲裁者，在几个操作符具有相同的优先级时决定先执行哪一个。__

每个操作符拥有某一级别的优先级，同时也拥有左结合性或右结合性。优先级决定一个不含括号的表达式中操作数之间的“紧密”程度。例如，在表达式a*b+c中，乘法运算的优先级高于加法运算符的优先级，所以先执行乘法a*b，而不是加法b+c。

但是，许多操作符的__优先级都是相同的。这时，操作符的结合性就开始发挥作用了__。在表达式中如果有几个优先级相同的操作符，结合性就起仲裁的作用，由它决定哪个操作符先执行。像下面这个表达式：

int a,b=1,c=2;

a=b=c;

我们发现，这个表达式只有赋值符，这样优秀级就无法帮助我们决定哪个操作先执行，是先执行b=c呢?还是先执行a=b。如果按前者，a=结果为2，如果按后者，a的结果为1。

__所有的赋值符（包括复合赋值）都具有右结合性，就是在表达式中最右边的操作最先执行，然后从右到左依次执行。__
	__这样，c先赋值给b，然后b在赋值给a，最终a的值是2。类似地，具有左结合性的操作符（如位操作符“&”和“|”）则是从左至右依次执行。__

结合性只用于表达式中出现两个以上相同优先级的操作符的情况，用于消除歧义。__事实上你会注意到所有优先级相同的操作符，它们的结合性也相同__。这是必须如此的，否则结合性依然无法消除歧义，如果在计算表达式的值时需要考虑结合性，那么最好把这个表达式一分为二或者使用括号。

例：

a=b+c+d

=是右结合的，所以先计算(b+c+d)，然后再赋值给a

+是左结合的，所以先计算(b+c)，然后再计算(b+c)+d

C语言中具有__右结合性__的运算符包括__所有单目运算符__以及__赋值运算符__（=）和__条件运算符。其它都是左结合性。__

在C语言中有少数运算符在C语言标准中是有规定表达式求值的顺序的：

1：__&& 和 || 规定从左到右求值，并且在能确定整个表达式的值的时候就会停止，也就是常说的短路。__

2：__条件表达式的求值顺序是这样规定的：__

test ? exp1 ： exp2;

条件测试部分test非零，表达式exp1被求值，否则表达式exp2被求值，并且保证exp1和exp2两者之中只有一个被求值。

3：__逗号运算符的求值顺序是从左到右顺序求值，并且整个表达式的值等于最后一个表达式的值__，__注意逗号','还可以作为函数参数的分隔符，变量定义的分隔符等，这时候表达式的求值顺序是没有规定的！__

判断表达式计算顺序时，先按优先级高的先计算，优先级低的后计算，当优先级相同时再按结合性，或从左至右顺序计算，或从右至左顺序计算。
