Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2018-03-09T17:26:00+08:00

====== 创建格式化字符串 ======
Created Friday 09 March 2018

我们知道输出格式化数字可以使用 printf() 和 format() 方法。

String 类使用静态方法 format() 返回一个String 对象而不是 PrintStream 对象。

String 类的静态方法 format() 能用来创建可复用的格式化字符串，而不仅仅是用于一次打印输出。

如下所示：
System.out.printf("浮点型变量的值为 " +
				  "%f, 整型变量的值为 " +
				  " %d, 字符串变量的值为 " +
				  "is %s", floatVar, intVar, stringVar);

你也可以这样写
String fs;
fs = String.format("浮点型变量的值为 " +
				   "%f, 整型变量的值为 " +
				   " %d, 字符串变量的值为 " +
				   " %s", floatVar, intVar, stringVar);
				
				
__1.对整数进行格式化：%[index$][标识][最小宽度]转换方式__

格式化字符串由4部分组成，特殊的格式常以__%index$__开头，index从1开始取值，表示将第index个参数拿进来进行格式化，[最小宽度]的含义也很好理解，就是最终该整数转化的字符串最少包含多少位数字。剩下2个部分的含义：

标识：

 '-' 在最小宽度内左对齐，不可以与"用0填充"同时使用
 '#' 只适用于8进制和16进制，8进制时在结果前面增加一个0，16进制时在结果前面增加0x
 '+' 结果总是包括一个符号(一般情况下只适用于10进制，若对象为BigInteger才可以用于8进制和16进制)
 ' ' 正值前加空格，负值前加负号(一般情况下只适用于10进制，若对象为BigInteger才可以用于8进制和16进制)
 '0' 结果将用零来填充
 ',' 只适用于10进制，每3位数字之间用"，"分隔
 '(' 若参数是负数，则结果中不添加负号而是用圆括号把数字括起来(同'+'具有同样的限制)
转换方式：

d-十进制 o-八进制 x或X-十六进制

上面的说明过于枯燥，我们来看几个具体的例子。需要特别注意的一点是：大部分标识字符可以同时使用。

System.out.println(String.format("%1$,09d", -3123));
System.out.println(String.format("%1$9d", -31));
System.out.println(String.format("%1$-9d", -31));
System.out.println(String.format("%1$(9d", -31));
System.out.println(String.format("%1$#9x", 5689));
//结果为：
//-0003,123
// -31
//-31
// (31)
// 0x1639　
__2.对浮点数进行格式化：%[index$][标识][最少宽度][.精度]转换方式__

我们可以看到，浮点数的转换多了一个"精度"选项，可以控制小数点后面的位数。

标识：

'-' 在最小宽度内左对齐，不可以与"用0填充"同时使用
'+' 结果总是包括一个符号
' ' 正值前加空格，负值前加负号
'0' 结果将用零来填充
',' 每3位数字之间用"，"分隔(只适用于fgG的转换)
'(' 若参数是负数，则结果中不添加负号而是用圆括号把数字括起来(只适用于eEfgG的转换)
转换方式：

'e', 'E' -- 结果被格式化为用计算机科学记数法表示的十进制数
'f' -- 结果被格式化为十进制普通表示方式
'g', 'G' -- 根据具体情况，自动选择用普通表示方式还是科学计数法方式
'a', 'A' -- 结果被格式化为带有效位数和指数的十六进制浮点数
__3.对字符进行格式化：__

对字符进行格式化是非常简单的，c表示字符，标识中'-'表示左对齐，其他就没什么了。

