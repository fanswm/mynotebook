Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2018-08-10T16:25:17+08:00

====== 连接 ======
Created Friday 10 August 2018

https://my.oschina.net/mutoushirana/blog/1861267
 
python拼接字符串一般有以下几种方法：
 
1、直接通过（+）操作符拼接
 
s = 'Hello'+' '+'World'+'!'
 
print(s)
 
输出结果：Hello World!
 
使用这种方式进行字符串连接的操作效率低下，因为python中使用 + 拼接两个字符串时会生成一个新的字符串，生成新的字符串就需要重新申请内存，当拼接字符串较多时自然会影响效率。
 
2、通过str.join()方法拼接
 
strlist=['Hello',' ','World','!']
 
print(''.join(strlist))
 
输出结果：Hello World!
 
这种方式一般常使用在将集合转化为字符串，”.join()其中”可以是空字符，也可以是任意其他字符，当是任意其他字符时，集合中字符串会被该字符隔开，例如：
 
strlist=['Hello',' ','World','!']
 
print(','.join(strlist))
 
输出结果：Hello, ,World,!
 
3、通过str.format()方法拼接
 
s='{} {}!'.format('Hello','World')
 
print(s)
 
输出结果：Hello World!
 
通过这种方式拼接字符串需要注意的是字符串中{}的数量要和format方法参数数量一致，否则会报错。
 
4、通过(%)操作符拼接
 
s = '%s %s!' % ('Hello', 'World')
 
print(s)
 
输出结果：Hello World!
 
这种方式与str.format()使用方式基本一致。
 
5、通过()多行拼接
 
s = (
 
    'Hello'
 
    ' '
 
    'World'
 
    '!'
 
)
 
print(s)
 
输出结果：Hello World!
 
python遇到未闭合的小括号，自动将多行拼接为一行。
 
6、通过string模块中的Template对象拼接
 
from string import Template
 
s = Template('${s1} ${s2}!')
 
print(s.safe_substitute(s1='Hello',s2='World'))
 
输出结果：Hello World!
 
Template的实现方式是首先通过Template初始化一个字符串。这些字符串中包含了一个个key。通过调用substitute或safe_subsititute，将key值与方法中传递过来的参数对应上，从而实现在指定的位置导入字符串。这种方式的好处是不需要担心参数不一致引发异常，如：
 
from string import Template
 
s = Template('${s1} ${s2} ${s3}!')
 
print(s.safe_substitute(s1='Hello',s2='World'))
 
输出结果：Hello World ${s3}!
 
7、通过F-strings拼接
 
在python3.6.2版本中，PEP 498 提出一种新型字符串格式化机制，被称为“字符串插值”或者更常见的一种称呼是F-strings，F-strings提供了一种明确且方便的方式将python表达式嵌入到字符串中来进行格式化：
 
s1='Hello'
 
s2='World'
 
print(f'{s1} {s2}!')
 
输出结果：Hello World!
 
在F-strings中我们也可以执行函数：
 
def power(x):
 
    return x*x
 
x=4
 
print(f'{x} * {x} = {power(x)}')
 
输出结果：4 * 4 = 16
 
而且F-strings的运行速度很快，比%-string和str.format()这两种格式化方法都快得多。
