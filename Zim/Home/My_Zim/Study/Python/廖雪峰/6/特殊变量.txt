Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2019-12-27T10:53:27+08:00

====== 特殊变量 ======
创建日期 星期五 27 十二月 2019

_ _ name _ _:
_ _ main _ _:
_ _ doc _  _:	每一个模块的第一个字符串，自动做为文档。
_ _ var:			类内部的私有变量。实际被类自动变成了：_ className_ _ var



__基类/父类/超类：__
	被继承的类
	object 是所有类的超类
__继承__
	子类自动拥有父类的所有方法
	
__多态：__
	子类的方法自动覆盖父类的同名方法
	如果Animal 是父类，一个变量只需要知道它是Animal类型，无需确切地知道它的子类型，就可以放心地调用Animal.run()方法，而具体调用的run()方法是作用在哪个子类对象上，由运行时该对象的确切类型决定，__这就是多态真正的威力__：调用方只管调用，不管细节，而当我们新增一种Animal的子类时，只要确保run()方法编写正确，不用管原来的代码是如何调用的。这就是著名的__“开闭”原则：__对扩展开放：允许新增Animal子类；对修改封闭：不需要修改依赖Animal类型的run_twice()等函数。

__静态语言 vs 动态语言：__
	对于静态语言（例如Java）来说，如果需要传入Animal类型，则传入的对象必须是Animal类型或者它的子类，否则，将无法调用run()方法。
	对于Python这样的动态语言来说，则不一定需要传入Animal类型。我们__只需要保证传入的对象有一个run()方法就可以了__。这就是动态语言的“鸭子类型”，它并不要求严格的继承体系，__一个对象只要“看起来像鸭子，走起路来像鸭子”，那它就可以被看做是鸭子。__

Python的“file-like object“就是一种鸭子类型。对真正的文件对象，它有一个read()方法，返回其内容。但是，许多对象，只要有read()方法，都被视为“file-like object“。许多函数接收的参数就是“file-like object“，你不一定要传入真正的文件对象，完全可以传入任何实现了read()方法的对象。
小结

继承可以把父类的所有功能都直接拿过来，这样就不必重零做起，子类只需要新增自己特有的方法，也可以把父类不适合的方法覆盖重写。

动态语言的鸭子类型特点决定了继承不像静态语言那样是必须的。


__判断数据类型__：
	__isinstance(var, typeOfData)__：
		判断一个变量是否是某个类型可以用isinstance()判断
		子类也是父类的类型，但是反过来不成立。
	__type()：__
		__基本类型__都可以用type()判断。
				能用type()判断的基本类型也可以用__isinstance()__判断。
			如果一个变量指向函数或者类，也可以用type()判断。
			但是type()函数返回的是什么类型呢？它返回对应的Class类型。如果我们要在if语句中判断，就需要比较两个变量的type类型是否相同：
				>>> type(123)==type(456)
					True
				>>> type(123)==int
					True
	__是否是函数__：
		要判断一个对象是否是函数怎么办？可以使用types模块中定义的常量：
			>>> __import types__
			>>> type(fn)==types.FunctionType
				True
			>>> type(abs)==types.BuiltinFunctionType
				True
			>>> type(lambda x: x)==types.LambdaType
				True
			>>> type((x for x in range(10)))==types.GeneratorType
				True
获得一个对象的__所有属性和方法：__
	使用dir()函数：
		它返回一个包含字符串的list
		类似__xxx__的属性和方法在Python中都是有特殊用途的，比如__len__方法返回长度
		

