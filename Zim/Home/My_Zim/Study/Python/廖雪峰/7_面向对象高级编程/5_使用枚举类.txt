Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2019-12-27T22:39:13+08:00

====== 5 使用枚举类 ======
创建日期 星期五 27 十二月 2019

当我们需要定义常量时，一个办法是用大写变量通过整数来定义，例如月份：
JAN = 1
FEB = 2
MAR = 3
...
NOV = 11
DEC = 12
好处是简单，缺点是类型是int，并且仍然是变量。
更好的方法是为这样的枚举类型定义一个class类型，然后，每个常量都是class的一个唯一实例。__Python提供了Enum类来实现这个功能：__
__from enum import Enum__
__Month = Enum('Month', ('Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'))__
这样我们就获得了Month类型的枚举类，__可以直接使用Month.Jan来引用一个常量__，或者__枚举它的所有成员：__
__for name, member in Month.__members__.items():__
__    print(name, '=>', member, ',', member.value)__
__value属性则是自动赋给成员的int常量，默认从1开始计数。__
__如果需要更精确地控制枚举类型，可以从Enum派生出自定义类：__
__from enum import Enum, unique__
__@unique__
class Weekday(Enum):
	Sun = 0 # Sun的value被设定为0
	Mon = 1
	Tue = 2
	Wed = 3
	Thu = 4
	Fri = 5
	Sat = 6
__@unique装饰器可以帮助我们检查保证没有重复值。__
__访问这些枚举类型可以有若干种方法：__
>>> day1 = Weekday.Mon
>>> print(day1)
Weekday.Mon
>>> print(Weekday.Tue)
Weekday.Tue
>>> print(Weekday['Tue'])
Weekday.Tue
>>> print(Weekday.Tue.value)
2
>>> print(day1 == Weekday.Mon)
True
>>> print(day1 == Weekday.Tue)
False
>>> print(Weekday(1))
Weekday.Mon
>>> print(day1 == Weekday(1))
True
>>> Weekday(7)
Traceback (most recent call last):
  ...
ValueError: 7 is not a valid Weekday
>>> for name, member in Weekday.__members__.items():
...     print(name, '=>', member)
...
Sun => Weekday.Sun
Mon => Weekday.Mon
Tue => Weekday.Tue
Wed => Weekday.Wed
Thu => Weekday.Thu
Fri => Weekday.Fri
Sat => Weekday.Sat
可见，__既可以用成员名称引用枚举常量，又可以直接根据value的值获得枚举常量。__
练习
把Student的gender属性改造为枚举类型，可以避免使用字符串：
# -*- coding: utf-8 -*-
from enum import Enum, unique
# 测试:
bart = Student('Bart', Gender.Male)
if bart.gender == Gender.Male:
	print('测试通过!')
else:
	print('测试失败!')
小结
Enum可以把一组相关常量定义在一个class中，且class不可变，而且成员可以直接比较。

推荐直接看这个讲解枚举的链接  https://segmentfault.com/a/1190000017327003

