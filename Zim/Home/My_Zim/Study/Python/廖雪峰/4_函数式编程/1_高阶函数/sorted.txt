Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2018-01-29T18:06:56+08:00

====== sorted ======
Created Monday 29 January 2018

排序算法
Python内置的sorted()函数就可以对list进行排序：

>>> sorted([36, 5, -12, 9, -21])
[-21, -12, 5, 9, 36]
此外，sorted()函数也__是一个高阶函数__，它还__可以接收一个key函数来实现自定义的排序__，例如按绝对值大小排序：

>>> sorted([36, 5, -12, 9, -21], key=abs)
[5, 9, -12, -21, 36]
__key指定的函数将作用于list的每一个元素上，并根据key函数返回的结果进行排序__。
我们再看一个字符串排序的例子：

>>> sorted(['bob', 'about', 'Zoo', 'Credit'])
['Credit', 'Zoo', 'about', 'bob']
__默认情况下，对字符串排序，是按照ASCII的大小比较的__，由于'Z' < 'a'，结果，大写字母Z会排在小写字母a的前面。

现在，我们提出排序应该忽略大小写，按照字母序排序。要实现这个算法，不必对现有代码大加改动，只要我们能用一个key函数把字符串映射为忽略大小写排序即可。忽略大小写来比较两个字符串，实际上就是先把字符串都变成大写（或者都变成小写），再比较。

__这样，我们给sorted传入key函数，即可实现忽略大小写的排序：__

__>>> sorted(['bob', 'about', 'Zoo', 'Credit'], key=str.lower)__
['about', 'bob', 'Credit', 'Zoo']
要进行__反向排序__，不必改动key函数，可以__传入第三个参数reverse=True：__

>>> sorted(['bob', 'about', 'Zoo', 'Credit'], key=str.lower, reverse=True)
['Zoo', 'Credit', 'bob', 'about']
从上述例子可以看出，高阶函数的抽象能力是非常强大的，而且，核心代码可以保持得非常简洁。

小结
sorted()也是一个高阶函数。用sorted()排序的关键在于实现一个映射函数。
