Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2018-01-29T18:06:50+08:00

====== filter ======
Created Monday 29 January 2018

Python内建的filter()函数用于过滤序列。
和map()类似，filter()也接收一个函数和一个序列。和map()不同的是，__filter()把传入的函数依次作用于每个元素，然后根据返回值是True还是False决定保留还是丢弃该元素。__
例如，在一个list中，删掉偶数，只保留奇数，可以这么写：

def is_odd(n):
	return n % 2 == 1

list(filter(is_odd, [1, 2, 4, 5, 6, 9, 10, 15]))
# 结果: [1, 5, 9, 15]

用Python来实现这个算法，可以先构造一个从3开始的奇数序列：

def _odd_iter():
	n = 1
	while True:
		n = n + 2
		yield n

注意这是一个生成器，并且是一个无限序列。

然后定义一个筛选函数：

def _not_divisible(n):
	return lambda x: x % n > 0

最后，定义一个生成器，不断返回下一个素数：

def primes():
	yield 2
	it = _odd_iter() # 初始序列
	while True:
		n = next(it) # 返回序列的第一个数
		yield n
		__it = filter(_not_divisible(n), it) # 构造新序列__

这个生成器先返回第一个素数2，然后，利用filter()不断产生筛选后的新的序列。

由于primes()也是一个无限序列，所以调用时需要设置一个退出循环的条件：

# 打印1000以内的素数:
for n in primes():
	if n < 1000:
		print(n)
	else:
		break

注意到Iterator是惰性计算的序列，所以我们可以用Python表示“全体自然数”，“全体素数”这样的序列，而代码非常简洁。
