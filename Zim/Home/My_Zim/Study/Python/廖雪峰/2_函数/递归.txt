Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2018-01-24T14:07:33+08:00

====== 递归 ======
Created Wednesday 24 January 2018

Recursive

如果一个函数在内部__调用自身本身__，这个函数就是__递归函数。__

```
fact(n)用递归的方式写出来就是：

def fact(n):
	if n==1:
		return 1
	return n * fact(n - 1)
```

优点是定义简单，逻辑清晰。理论上，所有的递归函数都可以写成循环的方式，但循环的逻辑不如递归清晰。
使用递归函数需要注意__防止栈溢出。__

解决递归调用栈溢出的方法是通过__尾递归__优化，

__尾递归是指，在函数返回的时候，调用自身本身，并且，return语句不能包含表达式。__这样，编译器或者解释器就可以把尾递归做优化，使递归本身无论调用多少次，都只占用一个栈帧，不会出现栈溢出的情况。

要改成尾递归方式，需要多一点代码，主要是要把每一步的乘积传入到递归函数中：
```
def fact(n):
	return fact_iter(n, 1)

def fact_iter(num, product):
	if num == 1:
		return product
	return fact_iter(num - 1, num * product)
```

遗憾的是，大多数编程语言没有针对尾递归做优化，Python解释器也没有做优化，所以，即使把上面的fact(n)函数改成尾递归方式，也会导致栈溢出。

