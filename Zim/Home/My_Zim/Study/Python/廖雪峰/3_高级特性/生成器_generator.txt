Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2018-01-29T18:05:16+08:00

====== 生成器 generator ======
Created Monday 29 January 2018

generator

要创建一个generator，有很多种方法。
__第一种方法很简单，只要把一个列表生成式的[]改成()__，就创建了一个generator：

>>> L = [x * x for x in range(10)]
>>> L
[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]
>>> g = (x * x for x in range(10))
>>> g
<generator object <genexpr> at 0x1022ef630>

如果要一个一个打印出来，可以通过__next()函数__获得generator的下一个返回值
```
next(g)
```

__没有更多的元素时，抛出StopIteration的错误。__

```
def fib(max):
	n, a, b = 0, 0, 1
	while n < max:
		print(b)
		a, b = b, a + b
		n = n + 1
	return 'done'
```
# 打印b
# a = b
# b = a + b
上面的__函数和generator仅一步之遥__。要把fib函数变成generator，__只需要把print(b)改为yield b就可以了：__
```
def fib(max):
	n, a, b = 0, 0, 1
	while n < max:
		yield b
		a, b = b, a + b
		n = n + 1
	return 'done'
```

但是用__for循环调用generator时，发现拿不到generator的return语句的返回值__。

如果想要拿到返回值，必须捕获StopIteration错误，__返回值包含在__S__topIteration的value中__：

g = fib(6)
>>> while True:
	try:
		x=next(g)
		print('g:',x)
	except StopIteration as e:
		print('Generator return value:', e.value)
		break

g: 1
g: 1
g: 2
g: 3
g: 5
g: 8
Generator return value: done
