Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2019-12-26T15:03:08+08:00

====== 2 访问限制 ======
创建日期 星期四 26 十二月 2019

在Class内部，可以有属性和方法，而__外部代码可以通过直接调用实例变量的方法来操作数据__，这样，__就隐藏了内部的复杂逻辑。__

但是，从前面Student类的定义来看，外部代码还是可以自由地修改一个实例的name、score属性：

>>> bart = Student('Bart Simpson', 59)
>>> bart.score
59
>>> bart.score = 99
>>> bart.score
99
如果要__让内部属性不被外部访问，可以把属性的名称前加上两个下划线 _  ___ ，在Python中，实例的变量名如果以 _  _ 开头，就变成了一个私有变量（private），__只有内部可以访问，外部不能访问__，所以，我们把Student类改一改：

class Student(object):

	def  _  _ init _  _ (self, name, score):
		self. _  _ name = name
		self. _  _ score = score

	def print _ score(self):
		print('%s: %s' % (self. _  _ name, self. _  _ score))
改完后，对于外部代码来说，没什么变动，但是已经无法从外部访问实例变量. _  _ name和实例变量. _  _ score了：

>>> bart = Student('Bart Simpson', 59)
>>> bart. _  _ name
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
AttributeError: 'Student' object has no attribute ' _  _ name'
这样就确保了外部代码不能随意修改对象内部的状态，这样通过访问限制的保护，代码更加健壮。

__但是如果外部代码要获取name和score怎么办？可以给Student类增加get _ name和get _ score这样的方法：__

class Student(object):
	...

	def get _ name(self):
		return self. _  _ name

	def get _ score(self):
		return self. _  _ score
__如果又要允许外部代码修改score怎么办？可以再给Student类增加set _ score方法：__

class Student(object):
	...

	def set _ score(self, score):
		self. _  _ score = score
你也许会问，原先那种直接通过bart.score = 99也可以修改啊，为什么要定义一个方法大费周折？__因为在方法中，可以对参数做检查，避免传入无效的参数：__

class Student(object):
	...

	def set _ score(self, score):
		if 0 <= score <= 100:
			self. _  _ score = score
		else:
			raise ValueError('bad score')
__需要注意的是，在Python中，变量名类似 _  _ xxx _  _ 的，也就是以双下划线开头，并且以双下划线结尾的，是特殊变量，特殊变量是可以直接访问的，不是private变量，所以，不能用 _  _ name _  _ 、 _  _ score _  _ 这样的变量名。__

有些时候，你会看到__以一个下划线开头的实例变量名，比如 _ name，这样的实例变量外部是可以访问的，但是，按照约定俗成的规定，当你看到这样的变量时，意思就是，“虽然我可以被访问，但是，请把我视为私有变量，不要随意访问”。__

__双下划线开头的实例变量是不是一定不能从外部访问呢？其实也不是。不能直接访问 _  _ name是因为Python解释器对外把 _  _ name变量改成了 _ Student _  _ name，所以，仍然可以通过 _ Student _  _ name来访问 _  _ name变量：__

>>> bart. _ Student _  _ name
'Bart Simpson'
__但是强烈建议你不要这么干，因为不同版本的Python解释器可能会把 _  _ name改成不同的变量名。__

__总的来说就是，Python本身没有任何机制阻止你干坏事，一切全靠自觉。__

最后注意下面的这种错误写法：

>>> bart = Student('Bart Simpson', 59)
>>> bart.get _ name()
'Bart Simpson'
>>> bart. _  _ name = 'New Name' # 设置 _  _ name变量！
>>> bart. _  _ name
'New Name'
表面上看，外部代码“成功”地设置了 _  _ name变量，但实际上这个 _  _ name变量和class内部的 _  _ name变量不是一个变量！内部的 _  _ name变量已经被Python解释器自动改成了 _ Student _  _ name，__而外部代码给bart新增了一个 _  _ name变量。__不信试试：

>>> bart.get _ name() # get _ name()内部返回self. _  _ name
'Bart Simpson'
