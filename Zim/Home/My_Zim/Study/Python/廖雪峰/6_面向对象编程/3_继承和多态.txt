Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2019-12-26T15:03:28+08:00

====== 3 继承和多态 ======
创建日期 星期四 26 十二月 2019

__继承__
	子类自动拥有父类的所有方法
	
__多态：__
	子类的方法自动覆盖父类的同名方法
	如果Animal 是父类，一个变量只需要知道它是Animal类型，无需确切地知道它的子类型，就可以放心地调用Animal.run()方法，而具体调用的run()方法是作用在哪个子类对象上，由运行时该对象的确切类型决定，__这就是多态真正的威力__：调用方只管调用，不管细节，而当我们新增一种Animal的子类时，只要确保run()方法编写正确，不用管原来的代码是如何调用的。这就是著名的__“开闭”原则：__对扩展开放：允许新增Animal子类；对修改封闭：不需要修改依赖Animal类型的run_twice()等函数。

__静态语言 vs 动态语言：__
	对于静态语言（例如Java）来说，如果需要传入Animal类型，则传入的对象必须是Animal类型或者它的子类，否则，将无法调用run()方法。
	对于Python这样的动态语言来说，则不一定需要传入Animal类型。我们__只需要保证传入的对象有一个run()方法就可以了__。这就是动态语言的“鸭子类型”，它并不要求严格的继承体系，__一个对象只要“看起来像鸭子，走起路来像鸭子”，那它就可以被看做是鸭子。__

Python的“file-like object“就是一种鸭子类型。对真正的文件对象，它有一个read()方法，返回其内容。但是，许多对象，只要有read()方法，都被视为“file-like object“。许多函数接收的参数就是“file-like object“，你不一定要传入真正的文件对象，完全可以传入任何实现了read()方法的对象。
小结

继承可以把父类的所有功能都直接拿过来，这样就不必重零做起，子类只需要新增自己特有的方法，也可以把父类不适合的方法覆盖重写。

动态语言的鸭子类型特点决定了继承不像静态语言那样是必须的。
