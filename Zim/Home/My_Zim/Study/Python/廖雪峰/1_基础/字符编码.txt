Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2018-01-11T07:47:06+08:00

====== 字符编码 ======
Created Thursday 11 January 2018

__ASCII编码__，比如大写字母A的编码是65，小写字母z的编码是122。
__GB2312编码__，用来把中文编进去。
日文编到__Shift_JIS__里，韩国把韩文编到__Euc-kr__里
__Unicode__把所有语言都统一到一套编码里，这样就不会再有乱码问题了

__ASCII编码和Unicode编码的区别：__
ASCII编码是1个字节，而Unicode编码通常是2个字节。

字母A用ASCII编码是十进制的65，二进制的01000001；

字符0用ASCII编码是十进制的48，二进制的00110000，注意字符'0'和整数0是不同的；

汉字中已经超出了ASCII编码的范围，用Unicode编码是十进制的20013，二进制的01001110 00101101。

如果把ASCII编码的A用Unicode编码，只需要在前面补0就可以，因此，A的Unicode编码是00000000 01000001。

用Unicode编码比ASCII编码需要多一倍的存储空间，在存储和传输上就十分不划算

本着节约的精神，又出现了把Unicode编码转化为__“可变长编码”的UTF-8编码__。UTF-8编码把一个Unicode字符根据不同的数字大小编码成1-6个字节，常用的英文字母被编码成1个字节，汉字通常是3个字节，只有很生僻的字符才会被编码成4-6个字节


__ord()函数__获取字符的整数表示，__chr()函数__把编码转换为对应的字符：

>>> ord('A')
65
>>> ord('中')
20013
>>> chr(66)
'B'
>>> chr(25991)
'文'


__如果知道字符的整数编码，还可以用十六进制这么写str__：

>>> '\u4e2d\u6587'
'中文'
两种写法完全是等价的。

由于Python的字符串类型是str，在内存中以Unicode表示，一个字符对应若干个字节。如果要在网络上传输，或者保存到磁盘上，就需要把str变为以字节为单位的bytes。

Python对__bytes类型__的数据用带b前缀的单引号或双引号表示：

x = b'ABC'
要注意区分'ABC'和b'ABC'，__前者是str，后者虽然内容显示得和前者一样，但bytes的每个字符都只占用一个字节__。

以Unicode表示的str通过__encode()方法__可以编码为指定的bytes，例如：

>>> 'ABC'.encode('ascii')
b'ABC'
>>> '中文'.encode('utf-8')
b'\xe4\xb8\xad\xe6\x96\x87'
在bytes中，无法显示为ASCII字符的字节，用__\x##__显示。

要__把bytes变为str__，就需要用__decode()方法__：
>>> b'ABC'.decode('ascii')
'ABC'
>>> b'\xe4\xb8\xad\xe6\x96\x87'.decode('utf-8')
'中文'


如果bytes中只有一小部分无效的字节，可以传__入errors='ignore'__忽略错误的字节：
>>> b'\xe4\xb8\xad\xff'.decode('utf-8', errors='ignore')
'中'


__按UTF-8编码读取__，我们通常在文件开头写上这两行：
```
#!/usr/bin/env python3
# -*- coding: utf-8 -*-
```

格式化

>>> 'Hi, %s, you have $%d.' % ('Michael', 1000000)
'Hi, Michael, you have $1000000.'

__常见的占位符有__：

占位符	替换内容
%d	整数
%f	浮点数
%s	字符串
%x	十六进制整数



