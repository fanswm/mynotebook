Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2018-01-29T18:07:41+08:00

====== 6 面向对象编程 ======
Created Monday 29 January 2018

__面向对象编程__——Object Oriented Programming，__简称OOP__，是一种程序设计思想。OOP__把对象作为程序的基本单元，一个对象包含了数据和操作数据的函数。__

__面向过程的程序设计__
	把计算机程序视为__一系列的命令集合__，即一组函数的顺序执行。为了简化程序设计，__面向过程把函数继续切分为子函数__，即把大块函数通过切割成小块函数来降低系统的复杂度。

__面向对象的程序设计__
	把计算机程序视为__一组对象的集合__，而每个对象都可以接收其他对象发过来的消息，并处理这些消息，__计算机程序的执行就是一系列消息在各个对象之间传递。__

在Python中，__所有数据类型都可以视为对象，当然也可以自定义对象__。自定义的对象数据类型就是面向对象中的__类（Class）的概念。__

我们以一个例子来说明面向过程和面向对象在程序流程上的不同之处。

假设我们要处理学生的成绩表，为了表示一个学生的成绩，面向过程的程序可以用一个dict表示：

std1 = { 'name': 'Michael', 'score': 98 }
std2 = { 'name': 'Bob', 'score': 81 }
而处理学生成绩可以通过函数实现，比如打印学生的成绩：

def print_score(std):
	print('%s: %s' % (std['name'], std['score']))
如果采用__面向对象的程序设计思想，我们首选思考的不是程序的执行流程__，__而是Student这种数据类型应该被视为一个对象__，这个对象拥有name和score这两个属性（Property）。如果要打印一个学生的成绩，首先必须创建出__这个学生对应的对象__，然后，给对象发一个print_score消息，__让对象自己把自己的数据打印出来。__

class Student(object):

	def   __  init  __  (self, name, score):
		self.name = name
		self.score = score

	def print_score(self):
		print('%s: %s' % (self.name, self.score))
__给对象发消息实际上就是调用对象对应的关联函数__，我们称之为__对象的方法（Method）__。面向对象的程序写出来就像这样：

bart = Student('Bart Simpson', 59)
lisa = Student('Lisa Simpson', 87)
bart.print_score()
lisa.print_score()
面向对象的设计思想是从自然界中来的，因为在自然界中，类（Class）和实例（Instance）的概念是很自然的。Class是一种抽象概念，比如我们定义的Class——Student，是指学生这个概念，而__实例（Instance）则是一个个具体的Student__，比如，Bart Simpson和Lisa Simpson是两个具体的Student。

所以，面向对象的设计思想是抽象出Class，根据Class创建Instance。

面向对象的抽象程度又比函数要高，__因为一个Class既包含数据，又包含操作数据的方法。__

小结
__数据封装、继承和多态是面向对象的三大特点__，我们后面会详细讲解。
