Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2019-12-17T12:02:26+08:00

====== 0 ======
Created 星期二 17 十二月 2019

Hi！初次见面，我叫吴枫，是你在风变编程的课程导师。从现在开始，我们将一起学习Python，请敲回车键继续课程(๑•̀ㅂ•́)و✧。

icon
为了能让你不受干扰地在Python世界中冒险，在正式上课之前，请先按照下方提示将本页面保存为书签并全屏。

单选题
请问你的电脑是windows系统还是mac系统呢？




icon
你的助教酱酱用的也是windows系统。这里有个提升课程体验的秘诀：请按ctrl+D键将本页面保存为书签，下次可直接打开网页；按F11(或Fn+F11)键把网页设置成全屏，学习效率更高。

icon
操作好了吗？相信你已经获得了能让自己更专注的学习体验。现在，一切就绪，我们可以准备启程！


icon
在【认知课】里，我们会将人工智能、Python的应用情景化、趣味化，比如第一关会为你打开人工智能的新大门，可谓是一场技术的饕餮盛宴！通过【认知课】的学习，我猜你会对人工智能有了一定的了解。【小Tips：认知课的学习链接可以在我们的微信公众号，或者酱酱的群聊里找到哦！每天一关，共计4关！】

icon
人工智能正在悄然地改变我们的生活方式，传统行业纷纷转型，科幻电影的一幕幕正在变成现实。

icon
随着技术的变革，人类简单重复性的劳动或思考活动已经逐步被机器取代。那么，我们该如何改变我们的工作方式和学习思维？如何利用技术加持竞争力？
在互联网＋时代，『编程』已不是『程序员』、『工程师』的专属，而是一个通往未来世界的工具，甚至是一个新的机遇。

icon
如果你现在想掌握编程技能的话，我强烈推荐你Python，它无处不在！

单选题
在此，我们聊一下推荐python的理由？
哇(^◯^)，既然对Python有了一定的认识，你是不是已经有了明确的学习python的目标呢？目标是学习的持续动力呢，告诉我吧，这样我可以更好地为你制定学习路线和学习方案呢。

单选题
我今天要在这立下一个flag：学完python之后，可以
{{.\1.png}}





icon
不用担心，其实呀很多学员刚开始的时候和你一样，只是觉得Python很牛很火，但不知道它能帮助自己做些什么。那下面我给你细聊一下其他学员的情况，可能会对你有所帮助。
我碰到的学员来自各行各业，比如：财务，金融，电商，行政，在校大学生，互联网，英语等，甚至还有小学生。

icon
在学习完Python基础语言课程之后，他们都会根据自己的职业需求和兴趣选择不同的Python应用方向进行学习。

icon
有位学员的金言『会计不学Python，脑袋脱发还臃肿』让我印象很深刻，她在一家公司搞财务，月末的周末都需要加班加点核算账目，制作报表，excel表格一大堆。有时可能只是因为一个小数点账目不平，需要重新检查。学习python之后，她都是用python来批量处理excel文件，效率提升了不少，周末终于可以约上好友喝茶聊八卦。

icon
小揭是一位从事电商行业的学员，每天都要在交易平台上逐条查看客户对产品的评论并做回访，工作量非常大。学完爬虫之后，他告诉我，他现在利用爬虫技术批量和自动化地获取客户评论和客户的基本信息，分析潜在客户并做回访，工作效率和质量提高了很多，有更多的时间去享受生活。

icon
某司市场部的一位小姐姐学员，利用爬虫技术批量收集竞争对手的销售情况和产品信息，并与自己公司的产品和销售情况作比较。根据信息，做价格和销售渠道的调整，业绩提升了不少。

icon
『投资买股票不看上市公司的财务报告万万不可』，有位学员学完爬虫之后爬取了3000+公司的财务报表并分析，挑选一个『潜力股』。还有的学员爬了北京市二手房交易的数据，来预测北京未来房价走势。

icon
学英语的那位小姐姐学完Python之后，把专8考试的复习资料批量从网上爬下来，省了不少时间。

icon
有个学员从事运维工作好几年，依然做着重启服务器，配置环境的重复机械工作，感觉自己像是一个网管，月薪一直是5K。学会了Python之后，跳到另一家心仪的公司做自动化运维，薪酬还翻倍了。

icon
故事听起来总是很美好的，但这些学员让我想起这么一句话『我要非常努力才能看起来毫不费力』。

icon
我看到过这些学员的『迷茫－自信－失落想放弃－坚持』复杂的学习心理历程，可当他们一步步坚持走下来之后，结果出乎我们的意料。我相信你也可以哒！
当然，为了能更好地了解你并为你制定更适合你的学习目标和学习路径，请你在下面👇的选项中，选择你在工作或学习过程最需要解决的问题。

单选题
我在工作或学习过程中，通常会







icon
那～我想告诉你，Python不仅能自动地帮你从网上收集各种各样地数据和资料，它还非常适用于数据处理和分析呢。除此，它还有各种强大的包和第三方库，让你制作酷炫的图表，比如词云图、极轴饼图、3D散点图甚至是动图等。
那～我想告诉你，Python不仅能自动地帮你从网上收集各种各样地数据和资料，它还非常适用于数据处理和分析呢。除此，它还有各种强大的包和第三方库，让你制作酷炫的图表，比如词云图、极轴饼图、3D散点图甚至是动图等。
在数据分析的应用里，Python还可以做许多实用和有趣的事，比如：分析用户的消费行为定向推销商品和制定折扣策略，分析房价的影响因素来预测房价走势等。

icon
那么，在这个过程中，你需要掌握什么知识呢？学完课程之后，你最终能达到什么样的水平呢？

icon
在Python的知识海洋里，下面👇是通往数据分析的知识导航图。


icon
在实现目标的过程中，除了需要掌握python的基础知识，初级爬虫知识，你还需要逐步掌握这几项技能：

icon
Python数据分析库
icon
SQL入门用法
icon
初级统计学
icon
数据可视化
icon
现在是不是一头雾水，Python数据分析库有哪些呀？

icon
常用的数据分析库主要有：Numpy、Pandas、SciPy、Scikit-Learn，Numpy库提供了数组支持；Pandas呢，它为时间序列分析提供了很好的支持；Scipy是一个高级科学计算库；Scikit-Learn包含了大量的机器学习算法和数据。

icon
当然，你现在可能还不能很好地体会它们的用法，『Learning by doing』是最好的学习方式，这一路我为你准备许多数据分析的小项目，通过『实战』，你能更加地把这些数据分析库灵活地运用起来。

icon
比如，分析某职位在不同城市的需求和薪资情况，某产品在不同年龄层的销售情况等

icon
『授人以鱼不如授人以渔』，我会在每个项目里设置各种不一样的『坑』。当你过关斩将之后，你可以借助Python自动收集数据资料，提高工作效率和工作质量；了解数据分析的基本流程，胜任日常工作中的数据分析。

icon
Python就是一个能够帮你实现需求的工具，它更像是一把万能钥匙，决定用它来打开哪一扇门的，是你自己。

icon
『千里之行，始于足下』，无论终点在哪，『Python基础知识课』是我们路途的第一个里程碑！

icon
下面，我为你设计了Python基础知识的学习路径。
Python基础语法知识就好比『内功』，只有深厚的『内功』才能更好地领悟和掌握各路招式。

icon
此时，我想起了尼采在《查拉图斯特拉如是说》中的一句话『其实人跟树一样的，越是向往高处的阳光，他的根就要越要向下，伸向地底深处...』。

icon
或许，在学习过程中你还不能一下敲出特别酷炫的代码，但你在这过程中会不断地提高，那一天也将会如期到来。『勤学似春起之苗，不见其增，而日有所长。』

icon
既然目标和路径我们都已经清晰了，那我们的学习形式和教学方式是怎么样的呢？

icon
我首先给你介绍一个在接下来学习中的重要助手：在线编译器，这是一个由风变编程首创，能让你真正实现“边学边练”的独门武器。

icon
这个在线编译器由左右两部分组成。左边的框叫做代码框，我们往里面输入对计算机的指令：也就是代码本码，其实它就是程序员的工作台；右边的框我们叫它终端，它是显示你代码运行结果的地方，也就是用户看到的屏幕。
接下来我们经常会用到代码框和终端这两个词作为课堂练习的提醒，可不要把它们搞混了。

icon
还有，非常nice的助教酱酱会一直在线，为你解答学习途中的疑惑。据说酱酱还给学员们准备了许多『大礼包』呢！

icon
差点忘了，我们的学习社群里有许多爱学习的小伙伴，互相激励。

icon
那对于个人而言，为了熟练地掌握编程和运用编程，让自己的能力得到提升，你必须做好投入精力认真学习的准备。

icon
但与此同时，我也确信一点：如果你肯跟随着我的脚步向前走，那么我有足够的底气承诺这个路途将会轻松且富有乐趣。在你之前，已经有好多人证明过此事——他们在这个学习系统里，动辄玩到凌晨一两点钟，根本止不住学习的兴奋与踏实。
在编程界，有一句话非常出名，叫“Talk is cheap, show me the code.”——空谈无益，秀代码。

icon
咱们现在就来体验一下Python如何施展人工智能的魔法：试着自己运行几段代码吧！

icon
首先，来到你面前的是一个图像识别的小程序。它能做的是将写在纸上的文字，精准地识别出来。如下图：

来，下面是一段已经写好的代码，请直接点击【运行】。

```
import requests
from aip import AipOcr

image = requests.get('https://res.pandateacher.com/python_classic.png').content

APP_ID = '16149264'
API_KEY = 'yxYg9r4OuAs4fYvfcl8tqCYd'
SECRET_KEY = 'yWg3KMds2muFsWs7MBSSFcgMQl8Wng4s'
client = AipOcr(APP_ID, API_KEY, SECRET_KEY)
res = client.basicGeneral(image)
if 'words_result' in res.keys():
	for item in res['words_result']:
		print(item['words'])

else:
	APP_ID = '11756541'
	API_KEY = '2YhkLuyQGljPUYnmi1CFgxOP'
	SECRET_KEY = '4rrHe2BF828bI8bQy6bLlx1MelXqa8Z7'
	client = AipOcr(APP_ID, API_KEY, SECRET_KEY)
	res = client.basicGeneral(image)
	if 'words_result' in res.keys():
		for item in res['words_result']:
			print(item['words'])
	else:
		print(res)
```

你已经看到了，机器能精准地识别图片中的文字，这就是我们能通过Python帮计算机做到的：图像识别，让计算机拥有“眼睛”，看懂图片。

icon
你知道，图像识别是人工智能领域的一个应用。下面，我们再来一个更厉害的：真正地运行一个人工智能小程序，和计算机进行“对话”。它其实就是Python码出来的Siri。

icon
请直接在左边的代码区点击运行，然后根据提示操作：第1步：点击左边代码区的运行按钮；第2步：在右边的终端区域（注意不是左边）任意问一个问题。第3步：敲击键盘的回车键执行。

```
import requests, json, time, random

feature_text = '''
大家好！我是你的聊天机器人吴小枫。

我有问必答，有人会问我“今天深圳天气怎么样？”，也有人问我“你喜欢我吗？”
快来问我问题呀，欢迎来撩！

【温馨提示】如果你要删除自己输入的内容，要按两次删除，才可以删掉一个汉字奥！
（因为在计算机世界里，中文是占两个字符的！）
>'''

user1 = input(feature_text)
time.sleep(1)
userid = str(random.randint(1, 1000000000000000000000))
apikey = 'd81c0b99c260440980a140440be200ec'
#超过1w有风险，19-01-19
tulingdata1 = json.dumps({    "perception": {
		"inputText": {
			"text": user1
		},

	},
	"userInfo": {
		"apiKey": apikey,
		"userId": userid
	}
})
robot1 = requests.post('http://openapi.tuling123.com/openapi/api/v2', tulingdata1)
jsrobot1 = json.loads(robot1.text)['results'][0]['values']['text']
print(jsrobot1)
time.sleep(2)
user2 = input('''
再来问我点啥吧！我把我知道的都告诉你，嘻嘻！
>''')
tulingdata1 = json.dumps({
	"perception": {
		"inputText": {
			"text": user2
		},

	},
	"userInfo": {
		"apiKey": apikey,
		"userId": userid
	}
})
robot1 = requests.post('http://openapi.tuling123.com/openapi/api/v2', tulingdata1)
jsrobot1 = json.loads(robot1.text)['results'][0]['values']['text']
time.sleep(1)
print(jsrobot1)
user3 = input('''
我有点饿了，再和你聊完最后一句，我就要下线啦！你还有什么要问我的？
>''')
tulingdata1 = json.dumps({
	"perception": {
		"inputText": {
			"text": user3
		},

	},
	"userInfo": {
		"apiKey": apikey,
		"userId": userid
	}
})
robot1 = requests.post('http://openapi.tuling123.com/openapi/api/v2', tulingdata1)
jsrobot1 = json.loads(robot1.text)['results'][0]['values']['text']
time.sleep(1)
print(jsrobot1)
time.sleep(1)
print('\n我走啦，下次见！')
```

你是不是看到在黑色的终端里冒出了一个小机器人，正在试探着和你对话？

icon
那么，恭喜你！你已经亲手运行了自己的两个人工智能小程序！

print()函数
icon
恭喜你已经步入了python新世界，让我们使用print()开启对python的第一声问候！print()函数的用法有以下几种：单枪匹马——不带引号、搭配单引号、搭配双引号、搭配三引号，我们逐个见识下吧！

无引号
icon
你会看到下面左侧代码框内，已经有一些代码。那是我为你准备的彩蛋，不要把他们删掉了哦。再将print(520)这段代码一字不差地抄写在第3行，抄写完后，点击【运行】按钮。

icon
注意，在正式敲代码之前，必须切换成英文输入状态，保证print()函数的括号是用【英文括号】，不然会报错😢。【切换英文输入的Tips：Mac系统请按command+空格键切换中英文输入，Windows系统请按ctrl＋shift键切换中英文输入】

1
print(520)

···
import time
print ('在'+time.strftime("%Y-%m-%d %H:%M:%S", time.localtime())+'，我写了人生中第一行Python代码\n它的内容虽然简单，不过是平凡的一句print(520)\n但我知道：我的编程之路，将从最简单的520开始\n在我点击运行的同时，一切在这一刻起开始变得不同\n以下，是这行代码的运算结果：' )

···

你已经成功写出了人生中的第一行Python代码，它的内容虽然简单，不过是平凡的一句print(520)，但是一切在这一刻开始变得不同！

icon
你能够实现与计算机交互的“初体验”，离不开print()函数的帮忙。这也是我们即将解锁的第一个Python语法知识点。

icon
刚才，虽然你只是输入了一个简单的print，但在背后，这段Python代码却帮你做了这样的一些事情：

icon
（0）我们向计算机发出指令：“打印‘520’”；（1）Python把这行代码编译成计算机能听懂的机器语言；（2）计算机做出相应的执行；（3）最后把打印结果呈现在我们面前。

icon
这，就是我们通过Python这个工具，成功与计算机实现沟通的方式。

接下来，你即将进入到《千与千寻》的世界，在故事里进一步地学习print()函数的用法。（提示：即便没看过《千与千寻》也不影响你理解后面的代码知识。）

千寻与爸爸妈妈误入了鬼怪神灵休息的世界，为了拯救因为贪食而被变成猪的父母，千寻需要在这个世界里为汤婆婆打工，在卖身契上签下自己的名字。
{{./10.png}}
icon
在Python的魔法世界，我们如果想让计算机帮忙写出千寻的名字，该怎么运用print()函数对计算机发出指令呢？

1
print('千寻')
icon
观察一下上面这行代码的结构，再敲一下回车键，把上面这行代码原样复制到代码框中，点击运行，看看会出现什么结果。

看，屏幕上是不是出现了千寻的名字？这就是print()函数的主要功能：打印内容。

icon
在这里，打印的意思是：让计算机把你给它的指令结果，显示在屏幕的终端上。
{{./11.jpg}}

单引号的用法
icon
到这里，你已经亲自使用过两次print()函数了。我们来观察一下，你两次写下的print()函数语句有什么不一样的地方呢？

print(520)
s
print('千寻')
icon
很明显，你会发现，在print('千寻')里，多了一对单引号。【注意⚠️：单引号是英文输入法下的单引号！】

icon
那么问题又来了：这个单引号是干啥用的？为什么打印文字的时候需要加上引号呢？

icon
这是因为，计算机的脑回路比较特别：只能理解数字，却读不懂文字。因为数字和数学运算是标准化、有固定格式的，而文字却能够千变万化。

icon
如果你直接让计算机print(千寻)，它会一脸懵并大声报错：“这两个字啥意思，你没有定义清楚，不懂诶……”

这，便是print()函数中引号的用法：当括号内有引号的时候，就相当于告诉计算机——你不需要执行多余的操作，我输入什么，你就打印什么。

双引号的用法

在print()函数内不仅能使用单引号，还能使用双引号，两者的效果没什么区别，都能让你打印出一行文本。【注意⚠️：双引号是英文输入法下的双引号，而不是两个单引号！】

icon
有些时候，单引号和双引号可能会在括号内同时出现，比如print("Let's play")。

icon
这种情况下，需要注意区分清楚哪个引号是属于print()函数结构，哪个引号是属于你要让计算机打印的内容，可别“混搭”了。

icon
说这么多，运行一下代码就懂了。直接在下面代码框中点击运行，观察运行结果。（点击运行前先思考一下，在第三个print()函数中，哪个引号才属于print()函数结构）

···
# 括号内是单引号的情况。
print('一起玩吧')

# 括号内是双引号的情况。
print("一起玩吧")

# 括号内单双引号同时存在的情况。
print("Let's play")
···


我们观察上面的代码，发现多了一些带有『#』的语句，它是怎么一回事呢？
其实呀在python里，『#』常用作单行注释符号，用于解释单行代码，比如 『# 括号内是单引号的情况』用于解释说明代码『print('一起玩吧')』。＃号后边的任何数据在代码运行的阶段不会被输出。

icon
回到print()函数，在print("Let's play")中，没有被打印出来的引号就属于print()函数结构啦。

icon
不过，在print()函数中，引号里的内容其实也不一定非得是文字，还可以是英文和数字。

icon
相应地，在括号内没有引号的情况下，我们应该往括号内放入计算机能够“理解”的内容，如：数字或数学运算。

icon
此时，print函数会让计算机尝试去“读懂”括号里的内容，并打印最终的结果。

icon
因此，当计算机读懂数据数字后，就打印这个数据。当读懂数字运算后，则打印得到运算结果。
在这里，计算机并没有再原样打印“1+1”，因为print(1+1)是计算机能直接读懂的数学运算，所以，它会直接打印出最终的运算结果：“2”。这就是计算机“读懂内容”的表现。

icon
关于“运算”相关的知识，明天我们在讲解数据类型的时候将会进一步讲解。现在，你只需要了解print()函数，以及其带引号和不带引号的用法区别就好。

icon
到这里，print()函数相关的知识就讲完啦。下面，是时候来做一道课堂练习，检验一下自己的学习成果了。
完成了选择题，接下来，我们来试试自己用print()函数打印出“千寻的卖身契”。

icon
为了让千寻替自己工作，汤婆婆拟了一份反人类的“血汗条款”：

1
我愿意留在汤婆婆的澡堂里工作两年，如果我违背工作内容的话，将在这个世界变成一头猪。
icon
那么，这份合约在Python中要如何显示呢？请你在下面的代码框中将这份合约打印出来（注意：使用print()函数，文字部分可直接复制上面的内容）。

相信你已经顺利地打印出千寻的合约了（这也意味着，我们的小千寻要苦兮兮地开始做打工妹了……）。老师的答案是这样的：

1
print('我愿意留在汤婆婆的澡堂里工作两年，如果我违背工作内容的话，将在这个世界变成一头猪。')

三引号的用法
icon
But，苛刻的汤婆婆觉得卖身契的排版还不够好看，希望你能让卖身契文字的每一个逗号后面都换行显示，打印出“自动换行”的效果。

icon
答案是：在print内部使用三引号''' 来实现跨行输出。【注意⚠️：三引号是英文输入法下的三个单引号！】

icon
嘿嘿，没想到吧，除了单引号和双引号之外，print()里面居然还能放三引号。直接运行下面这段代码，看这次能不能实现汤婆婆想要的效果。

```
print('''我愿意留在汤婆婆的澡堂里工作两年，
第一年在锅炉房和锅炉爷爷一起烧锅炉水，
将在这个世界变成一头猪。
''')
```

成功了！你已经掌握了用三引号换行的办法。

icon
现在我们已经学习了print()函数的四种情况－－无引号，单引号，双引号，三引号。再跟着老师一起回顾一下它们之间的差别，巩固一下。
{{./12.jpg}}
{{./13.jpg}}

注意，【前方高能预警】，接下来，我要告诉你一个99%的初学者都踩过的代码bug。

icon
在Python中，默认所有正确的语法，包括标点符号都是【英文】。不小心用了中文标点的话，计算机会无法识别，然后报错。

icon
在终端里，你能看到的最常见的符号报错提示就是【syntaxError:invalid syntax】（语法错误：无效语法）。
{{./14.png}}
我们在debug（解决程序报错）的时候，需要下意识地找找自己是否犯了这样细小却致命的错误。

icon
重要提示说完。此时此刻，你已经完成了这一关60%的进度条，通关成就达成近在眼前！

转义字符
icon
你已经用print()函数成功打印出了千寻的卖身契。

```
print('''我愿意留在汤婆婆的澡堂里工作两年，
第一年在锅炉房和锅炉爷爷一起烧锅炉水，
将在这个世界变成一头猪。
''')
```
icon
其实，还有第二种实现换行的办法：使用转义字符\n，像这样：

```
print('我愿意留在汤婆婆的澡堂里工作两年，\n如果我违背工作内容的话，\n将在这个世界变成一头猪。')
```
icon
除了\n之外，转义字符还有很多，它们的特征就是：反斜杠+想要实现的转义功能首字母。

icon
比如换行\n代表【+newline】；退格\b代表【+backspace】；回车\r代表【+return】。大家可以按照这种方法记住转义字符的含义。

icon
我把常用的一些转义字符做了个总结：
{{./15.png}}

别担心，这张图上的内容你不需要背下来，先通过截屏或拍照方式把图片保存下来，以后要使用转义字符时再看图查找就好。

变量和赋值
icon
到这里，你已经成功地打印出了千寻的名字和卖身契。与此同时，千寻也成为了汤婆婆的工人，渐渐地，她忘记了自己是谁，遗失了自己“姓名”的信息。

icon
那么，在信息纷繁的代码世界里，我们应该如何更好地储存信息，让计算机能够在你需要的时候帮你调用出你想要的信息呢？

icon
你需要借助【变量和赋值】的力量，将繁杂的信息给一一“收纳”好。

别担心，这张图上的内容你不需要背下来，先通过截屏或拍照方式把图片保存下来，以后要使用转义字符时再看图查找就好。

变量和赋值
icon
到这里，你已经成功地打印出了千寻的名字和卖身契。与此同时，千寻也成为了汤婆婆的工人，渐渐地，她忘记了自己是谁，遗失了自己“姓名”的信息。

icon
那么，在信息纷繁的代码世界里，我们应该如何更好地储存信息，让计算机能够在你需要的时候帮你调用出你想要的信息呢？

icon
你需要借助【变量和赋值】的力量，将繁杂的信息给一一“收纳”好。


icon
我们先来看看下面这行代码：

1
name='千寻'
icon
这就是一个常见的“给变量赋值”的动作。在这里，name就是一个变量，这行代码的意思，就是把“千寻”这两个字【赋值】给了“name”这个【变量】。

icon
这就好比，为了让千寻在日后能在计算机中更方便地找到她的名字，我们帮她把名字收纳进了一个小盒子里，并在这个盒子上贴了个叫“name”的标签。

icon
回想一下，我们平时在收拾东西的时候，是不是会把散落各处东西放进不同的盒子里，并且做好标记？这样的“收纳”动作，能够让空间变得整齐，也更方便我们自己取用东西。
同理，计算机也是这么做的，它会把成千上万的数据放在不同的“盒子”里，这样才方便它存储和操作数据。

icon
这个“盒子”在Python中被称为变量，你可以在这个“盒子”里放任何你想放的内容。

icon
而这个往盒子里装东西的过程，在代码的魔法世界被称为【赋值】。
{{./16.png}}
在千寻签完合约后，汤婆婆就把【name】这个『标签』从装有她名字【千寻】的『盒子』撕下来，贴到了装有【小千】这个名字的『盒子』。

icon
这时，取出贴有【name】这个『标签』的盒子，读出的内容变成了『小千』：

1
name='小千'
icon
现在，请你运行下面这段代码，看一下打印函数的最终输出结果是什么。

```
name='千寻'
name='小千'
print(name)
```

终端上出现的结果是不是【小千】？可这又是为什么呢？我们对“name”这个变量第一次的赋值不是【'千寻'】吗？为什么打印的结果是第二次的赋值呢？

icon
这就涉及到了变量的特点：变量之所以称为变量，是因为它保存的数据是可以随意变化的。

icon
刚才我们讲，我们可以将变量当作一个盒子，你可以在这个盒子里放任何内容，但盒子都有它的最大容量，不能无限制地塞东西。

icon
偏偏在代码世界里，盒子的容量又特别小，仅为1。所以当你需要放进新的东西时，只能寻找一个新的盒子。

{{./17.png}}

在我们上面的案例中，第一行代码：name='千寻'表达的意思是：把千寻这个名字放到name这个变量“盒子”中。

icon
由于，计算机是一行行自上而下执行代码的，所以当运行到第二行代码name='小千'时，变量“name”里存储的【'千寻'】就被替换成了【'小千'】。

icon
所以，当运行到第三行print(name)时，我们打印出的结果，就自然而然的是小千了。

icon
其实，不仅是千寻，名字对于我们每个人来讲都是有意义的，它帮助你“定位”自己，让别人能轻松地找到你。所以，人的名字不能乱取，同理，给变量的命名也需要遵循一定的规范。

变量的命名规范
icon
对于变量的命名，我们可以遵循以下规范：
{{./18.png}}

比如说，如果信息是姓名，那么变量可以命名为name；如果信息是数字，那么变量名则应该叫做number。

icon
很多新手在刚入门的时候会习惯给变量命名为a、b、c等英文字母。这样的变量名会让你无法从诸多信息中分辨出变量里装的东西是什么，这无异于给自己的孩子取名叫做“张小红”、“王小明”，一下就淹没于茫茫人海之中了。

icon
下面，我们来做一道题，检验一下你的变量命名是否规范：


{{./19.png}}
除了变量命名之外，还要注意的是：在代码世界中，赋值符号=不是左边等于右边的意思。仅仅表示赋值动作：把右边的内容放到了左边的盒子中。

icon
代表左右两边相等的符号，是比较运算符==，虽然他俩长得像，但代表的却是完全不同的意思，可千万不要搞混了。关于比较运算符==大家先不用着急它的用法，在之后的关卡它会再与大家见面的。
{{./20.png}}
检验学习成果的时候到了，请你用刚才学过的变量和赋值的知识做一道题：请将下面三个名字用name依次赋值，并保证最终打印出来的是“千寻”。（提示：使用print()函数，变量的值总是等于最后一次赋给它的内容。）

```
魔法少女千酱
千寻
夏目千千
```
{{./21.png}}

最后，我们来总结一下这关的知识点：

{{./22.jpg}}
到这里，或许你会问：我这关学的这几个简单的代码有什么用呢？

icon
虽然print()函数是最简单的语句，但其实，你往后要做的任何一个程序几乎都离不开print()函数的支持。

icon
例如说，你能用print()函数给自己创造一个可爱的好朋友“人工智障小埋”，她会蹦跶着到你面前，调皮地让你猜她的年龄。

icon
下面是一段已写好的代码，请直接点击代码区的【运行】，只有点击运行，代码才会跑起来哦。快来和小埋玩一下猜年龄的游戏吧！

icon
注意：在小埋问你她的年龄时，要记得在【终端】输入你猜的数字哦。

```
import random
import time

###提示语部分
print('你好，我是机器人小埋，我们来玩个猜年龄的小游戏吧～(◆◡◆)')
time.sleep(2)

print('''
=============================
   干物妹！うまるちゃんの年齢
=============================
''')
time.sleep(1)


print('小埋的真实年龄在1到10之间哦～')
time.sleep(1)


print('不过，你只有5次机会哦～')
time.sleep(1)


print('下面，请输入小埋的年龄吧：')


#从0至10产生一个随机整数，并赋值给变量age
age = random.randint(1,10)


#设置次数
for guess in range(1,6):
   
   #输入玩家猜测的年龄
	choice=int(input())
    
	#判读玩家输入的年龄是否等于正确的年龄
	if choice<age:
		print('小埋的提示：你猜小了（；´д｀）ゞ。。。。')
                
	elif choice>age:
		print('小埋的提示：乃猜大了惹(＞﹏＜)～～')
            
	else: 
		print('猜了'+str(guess)+'次，你就猜对惹～hiu(^_^A;)～～～')
		break   
                
#判断猜测次数 
if choice  == age:
	print('搜噶～那么小埋下线了～拜拜～（￣︶￣）↗')
    
else:
	print('哎呀～你还是木有猜对啊～但是你只有5次机会诶～怎么办啊～')
	print('那好吧～心软的小埋只好告诉你，我才'+str(age)+'岁哦～(*/ω＼*)')

```
成功猜中小埋的年龄了吗？除了print()函数和变量赋值之外，这段代码里还用到了条件判断if语句、input()函数，这两个知识点我们会在第2个关卡和第3个关卡学习到喔。

icon
在学完基础语法的前半部分之后，你也能独立写一个这样的项目，设计你的专属“小埋”！所以，不要小看了我们今天所学的知识，它将是我们未来大项目的开端。

icon
而这一关卡里，我们掌握了命令思维——对计算机下“打印”的指令。但是，在与计算机沟通的道路上，我们的学习才刚刚开始。

icon
在学完整个Python基础语法课程后，你将会真正迈入Python的大门，掌握利用Python解决问题的方法和思维。

下关预告
icon
其实，Python世界只是现实世界的镜像，Python世界里的东西都可以在现实世界里找到对应。那么现实世界中最常见的数字，文字在镜像世界里长什么样呢？我们如何使用它们？

icon
比如说，我们如何利用镜像世界的数据进行复杂的科学计算，并把数字结果和解释语言一起输出到屏幕，展现给用户呢？

{{./23.gif}}



