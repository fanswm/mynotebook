Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2019-12-18T00:55:03+08:00

====== 2 ======
创建日期 星期三 18 十二月 2019

欢迎回来！现在，请和我一起全屏吧～windows：请按F11（或Fn+F11)；mac：请同时按control+command+F。

icon
在上一关，老师带领你攻克了如何与Python沟通的语言大关——通过三种数据类型（字符串、整数和浮点数）的相互转换，突破现实世界和镜像世界数据差异的墙，将代码成功执行。

icon
但是，对于Python来讲，光正确使用【镜像世界的数据】还不够，还需要正确的【沟通逻辑】才能让Python准确地执行你的命令。
比方说，我想让天猫精灵在感知到我开门的一瞬间，打开客厅的灯。如果我只说：天猫精灵，打开灯。那么，由于缺少开门的前提条件，无论你开不开门，灯都会打开着。

icon
所以，我们下的命令应该是这样：天猫精灵，如果我开门，你就打开客厅的灯。

icon
而这个下命令的如果…就…逻辑，就是与计算机沟通的逻辑——条件判断，其作用就是明确地让计算机知道：在什么条件下，该去做什么。
对于Python也是同样。Python之所以能完成自动化任务，比如自动抓取网页关键词，自动下载小电影等，就是因为它可以执行条件判断。

icon
下面，吴枫老师要给大家讲一个《复仇者联盟3:无限宝石》的故事，来get一下逻辑判断的趣味性。（友情提示：即使小同学没看过电影也不会影响你理解代码的。）

icon
请同学们先点击下面代码框左侧的运行选项，然后在右侧的终端处按照提示语，填写你选择的数字。
···
import time

print('如果你想拥有无限的力量和能量，那必须夺得力量宝石')

time.sleep(2)

print('如果你想扭曲时空和任意地传送，那必须夺得空间宝石')

time.sleep(2)

print('如果你想任意地修改现实，无视任何宇宙规律，那必须夺得现实宝石')

time.sleep(2)

print('如果你想到达任何一个时间点，无论是古老的年代还是遥远的未来，那必须夺得时间宝石')

time.sleep(2)

print('如果你想控制生者和死者的灵魂，那必须夺得灵魂宝石')

time.sleep(2)

print('如果你想拥有不朽的精神力量并操控任何人的思维，那必须夺得心灵宝石')

time.sleep(2)

print('那么，如果让你来选择的话，你想要获得哪颗宝石呢？')

time.sleep(2)

print('请在以下六个选项【1 力量宝石 ；2 空间宝石；3 现实宝石 ；4 时间宝石；5 灵魂宝石 ；6 心灵宝石；】中，选择你最想获得的宝石吧！')

time.sleep(3)

answer=input('请将对应数字输入在冒号后： ')

if answer=='1':
	print('我告诉你哦，力量宝石保存在山达尔星的新星军团的总部基地')
	time.sleep(3)

elif answer=='2':
	print('空间宝石在洛基手里')
	time.sleep(3)

elif answer=='3':
	print('雷击已将现实宝石交给收藏家保管')
	time.sleep(3)

elif answer=='4':
	print('奇异博士愿意用时间宝石换取钢铁侠的性命')
	time.sleep(3)

elif answer=='5':
	print('必须献祭自己心爱的人才能得到灵魂宝石')
	time.sleep(3)

else:
	print('幻视头上的心灵宝石被绯红女巫摧毁，但可用时间宝石复原')
	time.sleep(3)
···

亲爱的夺宝骑兵，你看到没？这就是条件判断如果…就…逻辑产生的魔法。那么，这个条件判断的代码，要怎么码呢？

条件判断
在Python宇宙，条件判断语句总共有三种表现形式，我们先从最简单的单向判断：if开始说起：

单向判断：if
{{.\1.png}}
单向判断：if代表什么呢？相传上面的六颗宝石是宇宙中最强大的东西。如果一个人同时拥有六颗宝石，ta就可以实现包括毁灭宇宙在内的所有事情。

icon
你发现，上面的故事中，有一个如果……就。那么，如果我们要用代码来“翻译”这段话，就可以用条件判断语句中的单项判断：if来表述。下面，请你来运行一下下方代码。
···
# 为宝石数量赋值
stonenumber=6

# 条件：如果你拥有的宝石数量大于等于6个
if stonenumber>=6:
    
	# 结果：显示‘你拥有了毁灭宇宙的力量’的结果
	print('你拥有了毁灭宇宙的力量')   
···

那么，这段代码是如何实现的呢？

icon
首先，第一行代码，用赋值运算符=对当前情况进行赋值：将你拥有的宝石个数6赋值给变量——宝石数stonenumber。

icon
第二步，确定if条件：如果变量stonenumber的值>=个数6时，就执行冒号后，下一行的命令。

icon
第三步，用print()命令打印出结果：你拥有了毁灭宇宙的力量。所以，if语句的单向判断逻辑，我们可以这样归纳：
{{.\2.png}}
在这里，你可能注意到了一个细节：在条件判断代码中的冒号:后、下一行内容的前面，会空几个格，但这是为什么呢？
{{.\3.png}}
在这里，你可能注意到了一个细节：在条件判断代码中的冒号:后、下一行内容的前面，会空几个格，但这是为什么呢？


icon
首先，在计算机的沟通语言中，空格的学名叫缩进，比如我们写文章都要空两个格，这就叫首行缩进。

icon
对于Python而言，冒号和缩进是一种语法。它会帮助Python区分代码之间的层次，理解条件执行的逻辑及先后顺序。【注：缩进是四个空格或一个Tab键】

icon
并且，在if条件语言中，缩进不需要我们手动按空格键。当你用英文输入法打:后按回车，我们的开发工具（用来编写Python代码的程序）为了方便大家编程，会自动实现下一行代码，向右缩进的功能。

icon
此时，被缩进的内容（print()函数）和if条件语句组成了一个代码块（一个整体），成为了if条件下的内部命令。

icon
这意味着：如果赋值满足if条件，计算机就会准确执行if条件内部的命令（即缩进的代码块）。

icon
那么下面，请你运行下面这个代码，看看运行结果是什么。（请不要更改代码，直接点击运行键，当终端出现红色报错提醒后，点击跳过本题）
是不是会出现IndentationError: expected an indented block（缩进错误：期望一个缩进块）的报错？
这是因为，当我们去掉缩进时，if条件和print命令成为了两个不同的代码组，属于平行关系。你看：if条件下面，缺少了可以执行的动作。我们想一下：无论条件成不成立，都不会执行什么操作，这个条件的存在没有任何意义。
{{.\4.png}}
下面，我们来小结一下单向判断：if的代码逻辑及语法格式：


{{.\5.png}}

在电影里，当灭霸得知宝石的能力后，他决定集齐六颗宝石，灭掉一半宇宙生灵。很快，他就从其他人手中抢到了两颗宝石。

icon
虽然还没完成收集6颗宝石的目标，但现在拥有了2颗宝石的灭霸，会拥有怎样的能力呢？

icon
请修改下方代码框中无限宝石的代码：在if条件不变的情况下，修改第一行的赋值语句，把【stonenumber=6】改为【stonenumber=2】，并点击运行，看看会出现什么结果。
请注意：1.符号要在英文输入法下输入；2.检查条件判断语句下是否缩进；3.只要显示运行通过，就请点击回车键继续课程。
首先，第一行的赋值语句【stonenumber=2】是后面if条件判断语句的前提情况，然而并不满足『stonenumber>=6』这个条件，所以不会执行条件下的『print』操作。

icon
老师讲过，计算机是一行行往下执行代码的。所以，当第一行赋值情况的前提不满足if的条件时，Python的逻辑就会判断：条件不满足，无法执行if条件下的命令，从而自动跳过，执行下一行命令。
{{.\6.png}}
但是，在上方代码中，除了if之外，我们并没有设置其他的命令去让Python执行。因此，Python自然就无法输出结果。

icon
也就是说，由于宝石数量只有2，没有满足6颗宝石的if条件，if条件下的打印命令就无法生效，自然没办法获得摧毁宇宙的力量。

icon
而作为最强反派，灭霸当然不会就此善罢甘休。他要继续寻找宝石，直到集齐6颗，达到他的目的。

icon
那么，这个如果6颗宝石的条件没满足，就做其他事情——寻找宝石的判断，在Python中要如何实现呢？

双向判断：if…else…
在抢夺了收藏家手里的宝石后，拥有三颗宝石的灭霸逼迫自己的养女卡魔拉，说出了第四颗灵魂宝石的下落——沃弥尔星。

icon
在Python宇宙，我们可以利用if的双向判断形式：if…else…去实现这个行动：当宝石数量还没达到6颗的时候，需要带着卡魔拉去沃弥尔星寻找灵魂宝石。

icon
下面，请你直接运行下面的代码，看程序是如何识别的：
···
# 赋值语句：为宝石数量赋值
stonenumber=3

# 条件：如果你拥有的宝石数量大于等于6个
if stonenumber>=6:
    
	# 结果：显示‘你拥有了毁灭宇宙的力量’的结果
	print('你拥有了毁灭宇宙的力量')
    
# 条件：当赋值不满足if条件时，执行else下的命令
else:
    
	# 结果：显示‘去找灵魂宝石’的结果
	print('带着卡魔拉去沃弥尔星寻找灵魂宝石')
    
···
很多时候，我们不能把鸡蛋放在一个篮子里，要做好两手准备：如果不满足条件时，我们要怎么办。

icon
Python则很贴心地，让我们借用if…else…语句，让码农们有了另一种选择——【如果…不满足，就…】
{{.\7.png}}
在if...else条件语句中，if和else各自抱团，形成两个不同的代码块。表示的是条件和其他条件的互斥关系——如果不满足if条件，就执行else其他条件。
{{.\8.png}}
如果用我们上面宝石的例子讲解的话，if定义的就是宝石数>=6，而else定义的则是宝石数<6。


而由于赋值【stonenumber=3】，并不满足【if stonenumber>=6:】这个条件，所以不能执行【print('你拥有了毁灭宇宙的力量')】的命令。

icon
只能走第二条else:的路——执行print('带着卡魔拉去沃弥尔星寻找宝石')的结果。
{{.\9.png}}
下面，我们来做个题巩固一下if...else...的知识点：前天晚上，酱酱无比纠结自己要不要吃夜宵，所以她打算上秤称一下，如果体重超过100斤，就不吃了，没有的话，就放心吃。结果……刚好101斤（泪目）……

icon
请在下面代码框里用if...else...把酱酱的夜宵判断语句写出来。【要点提示：1. 为酱酱的体重weight赋值；2. 开始判断，如果if体重超过100斤，打印结果不吃了，否则else，打印结果放心吃吧；3. if和else语句后需跟英文冒号:】

吃不了夜宵的酱酱快要哭了，快把代码分享到社群里，告诉酱酱你有好好学习来安慰一下她吧！下面，请看老师的答案，并结合#后的注释同时“食用”：
关于if...else...的相关知识点到这里就讲完了，我们来总结一下if…else…语句的知识点。
{{.\10.png}}
代码讲解告一段落，我们再回到灭霸的故事中，在连续的战斗之后，灭霸无限宝石的收集之旅，只差最后一颗——心灵宝石。

icon
不巧的是，这颗宝石镶在了超级英雄幻视的头上。幻视深知想要阻止灭霸，只能请求绯红女巫，毁掉自己头上的宝石。

icon
所以，摆在绯红女巫面前的问题条件是：灭霸已经拥有5颗宝石，如果宝石数大于等于6，世界会被灭霸毁灭。

icon
但是，如果想让宝石数停留在5个及以下，她必须要亲手毁掉幻视头上的宝石，同时，还要从灭霸手中至少夺回一颗宝石，才会有胜利的希望。

icon
或者，还有第三种胜利的可能——如果想让灭霸手中一个宝石都没有，让一切都未曾发生，那么我们需要穿越时空，回到过去。

icon
那么，这三个如果在Python中要如何实现呢？

多向判断：if…elif…else…
国际惯例，在思考如何用代码实现某个目标时，首先，我们需要先来梳理一下逻辑。

icon
通过上面的故事情节我们知道，在代码中，我们需要添加三个如果：如果宝石数>=6，如果0<宝石数<=5，如果宝石数等于0。并产生3个对应的执行结果。

icon
那么，在判断3个或3个以上的条件时，我们就需要借助Python中的多向判断命令：if…elif…else…。

icon
这三者共同构成了多向判断的命令逻辑关系：如果if的条件不满足，就按顺序看是否满足elif的条件，如果不满足elif的条件，就执行else的命令。

icon
并且，当判断的条件超过3个时，中间的多个条件都可以使用elif。
{{.\11.png}}
那么，这个代码要怎么写呢？我们还是在代码中来感受一下elif的逻辑，直接点击运行就好：
···
# 为宝石数量赋值
stonenumber=5

# 条件：如果你拥有的宝石数量大于等于6个
if stonenumber>=6:
    
	# 结果：显示‘就拥有了毁灭宇宙的力量’的结果
	print('你拥有了毁灭宇宙的力量')
    
# 条件：如果想让宝石数量停留在5个以下，至少一个
elif 0<stonenumber<=5:

	# 结果：显示‘绯红女巫需要亲手毁掉幻视额头上的心灵宝石’的结果
	print('绯红女巫需要亲手毁掉幻视额头上的心灵宝石')

# 条件：当赋值不满足if和elif条件时，执行else下的命令，宝石数量为0个
else:

	# 结果：显示‘需要惊奇队长逆转未来’的结果
	print('需要惊奇队长逆转未来')
    
···
通过上面if和else的积累，多向判断elif的逻辑是不是很好理解？

icon
首先，第一行的赋值，会按照从上到下的顺序挨个试一遍，看自己满足哪个条件，满足了就不往下走，不满足就继续试，试到出结果为止。

icon
其次，elif的运行本质上和else一样，已经带有其他条件的意思，所以elif后可以不接else。

icon
比如上面的代码，stonenumber=5会对下面的if elif else条件逐个扫描，看看自己满足哪一个，就执行哪个条件底下的命令。

icon
很显然，第二个条件elif 0<stonenumber<=5刚好能与stonenumber=5的前提相匹配，于是，执行elif底下的命令：print('绯红女巫需要亲手毁掉幻视额头上的心灵宝石')**。

icon
下面，请你练习一下，试着不要看刚才的代码，参考下面的提示，自己来重写一遍刚才我们学过的那段代码，通过修改宝石数的赋值语句，让输出结果变为需要惊奇队长逆转未来。

icon
提示：（1）为宝石数量赋值（数量为0）（2）条件1：如果宝石数量>=6，显示你拥有了毁灭宇宙的力量（3）条件2：如果0<宝石数量<=5，显示绯红女巫需要亲手毁掉幻视额头上的心灵宝石（4）条件3：如果是其它情况，显示需要惊奇队长逆转未来

icon
步骤有了，下面请你来“逆转未来”：
下面，我们来总结一下elif的知识点：
{{.\12.png}}
if嵌套
icon
但是，不管复仇者联盟怎么竭尽全力，最终，灭霸还是打出了响指。所有人在一瞬间面临着分离与死亡。

icon
即使套着超级英雄的外衣，蜘蛛侠彼得·帕克也仅仅是个18岁的高中生。他曾只顾忙着在街头巷尾当平民英雄，结果在期末历史考试里只考了26分，荣获“学渣”提名。

icon
但这个“学渣”评价并不是随便来的，而是通过规则一步步过滤出来的：
···
考试成绩评价规则：

1. 如果成绩大于等于60分，就是及格，在此前提下：
(1)如果成绩大于等于80分，属于优秀范围；
(2)否则（即大于等于60分而小于80分），属于一般范围。

2. 如果成绩小于60分，就是不及格，在此前提下：
(1)如果成绩小于30分，平时太不认真，属于学渣了；
(2)如果成绩（小于60分而大于等于30分），那么，至少还能抢救一下。
···
像这种如果底下还有如果（即条件里还套条件）的情况，我们如何用Python把上面的规则写出来，并得出评价呢？

icon
答案就是——嵌套条件。
if嵌套的应用场景，简单来讲就是：在基础条件满足的情况下，再在基础条件底下增加额外的条件判断。

icon
就像上面的基础条件是60分及格，想要判断优秀和一般还要增加额外条件——是否大于等于80；在小于60分不及格基础条件下，想要判断学渣和可抢救还要增加额外条件——是否大于等于30。

icon
因此，彼得·帕克的成绩评价规则，用if嵌套可以像下方代码这样：
···
historyscore=26

if historyscore>=60:
	print('你已经及格')

	if historyscore>=80:
		print('你很优秀')

	else:
		print('你只是一般般')

else:
	print('不及格')

	if historyscore<30:
		print('学渣')

	else:
		print('还能抢救一下')

print('程序结束')
···
居然出现了三个扎心的结果……那么，在Python中，我们如何同时得出不及格、学渣、程序结束这三个结果的呢？

if嵌套的执行顺序
icon
首先，我们先从整体总览一下，这段彼得·帕克成绩评价规则的代码，总共分为四部分【赋值、if、else、print()】，两个大代码组。
{{.\13.png}}
并且，在代码组1的if条件和代码组2的else的条件下，又包含了条件判断命令if...else...。

icon
那么，这种嵌套命令我们要如何理解呢？

icon
缩进相同的命令处于同一个等级，第一步，计算机就要按顺序一条一条地执行命令。

icon
那么，计算机执行的顺序就是：（1）先给historyscore赋值；

icon
（2）因为if和else是只能留一个的互斥关系，if和else下的代码块只会执行一个，所以计算机要判断赋值的内容满足【historyscore>=60】还是【historyscore<60】的条件——如果满足if的条件，就执行if缩进下的内容，如果不满足就执行else缩进下的内容；

icon
（3）执行print('程序结束')。

icon
下面，吴枫老师又要开启提问模式了，如果回答正确请找酱酱学姐给你放烟花啊：
{{.\14.png}}
答案是C，else条件代表的范围是historyscore<60，包含historyscore=26，会执行else下的代码块，而不会执行if下的代码块，if和else的条件是互斥的。

icon
经过判断，我们知道了，蜘蛛侠26分的历史成绩要找else代码块：else：。然而，问题又来了，else代码块后面不仅跟着三个print()，还有if，所以我到底要输出哪个？

icon
所以，计算机语法的执行逻辑永远都不会变，else下的代码也要一行一行往下执行，并根据条件判断运行对应层级，输出对应结果。
{{.\15.jpg}}
所以，我们的运行顺序是，先输出的结果不及格，然后再判断历史成绩26分的赋值符合历史成绩<60分且<30分还是历史成绩<60分且>=30分的条件。

icon
下面，我们再通过一张导图理一下if嵌套的逻辑，老师建议你把这张图收藏起来，接下来写嵌套代码的时候可以翻看：


{{.\16.png}}
要注意的是，elif也是可以放进嵌套里的。

icon
是不是很有趣？那么下面，吴枫老师来教你一个写嵌套条件代码的小技巧。

如何写嵌套代码
if嵌套由于涉及多个条件判断，并且是条件套条件的判断，所以为了理清逻辑，我们可采用扒洋葱大法写if嵌套。

icon
用“彼得·帕克的历史成绩”举例，第一步就要搞定最外层那张皮，将最基础的命令和条件写出来。

icon
那么，我们的思考逻辑应该是这样（1）把彼得·帕克26分的历史成绩赋给变量historyscore；（2）用if…else写最基础判断条件如果historyscore>=60时，打印你已经及格，否则，打印不及格；（3）用print()输出程序结束。

icon
来来来，跟老师动起来，请根据上面提示写一遍代码，并点击运行。看在成绩为26分的赋值情况下，只套了一层“条件判断”皮的代码，会出现怎样的结果：

第二步，在“第一层皮”里装东西。也就是在条件【historyscore>=60】下，增加额外条件。

icon
其中，额外条件1：当历史成绩大于80分，显示结果你很优秀；额外条件2：当历史成绩在60到80分之间，显示结果：你只是一般般。

icon
下面，请你先瞄一眼正确的代码，并注意我是怎样安排额外条件的代码的。

到你了，请同步把上面那段代码写一遍，如果能够做到不看上面的答案，独立写出来是最好的。【要点提示：请注意额外条件的缩进格式】。

最后一步，你要为另一个大条件else增加额外条件了！

icon
请你以下方代码框中的代码为基础，在else底下增加两个额外条件。

icon
其中，额外条件1：当历史成绩小于60，同时还小于30时，输出结果学渣；额外条件2：当历史成绩小于60，但大于等于30时，输出结果还能抢救一下。
怎么样，洋葱大法好不好？不过，就算现在没写对也不要着急，我们在4关后会提供更多的实操锻炼机会。
最后的最后，我们来总结一下整节课的知识点：
{{.\17.png}}
恭喜你，你已经顺利完成了3个关卡的学习，你的努力和坚持感动了校长阿不思。所以呀，在下一关，你将会收到霍格沃兹魔法学院的入学信。

icon
但是，入学前的考验也随之而来，那封入学信是由Python语言来编写的，你需要理解信里的内容并用python回复接受邀请的消息，才能登上霍格沃茨特快列车，和哈利波特一起开启魔幻旅程。
{{.\18.gif}}
这个能帮助你信息互换的神器就是【input()】函数，可不要小瞧了它，有了它你可以随时向计算机传递消息。

icon
那么，我们将通过“霍格沃茨的来信”，一同学习用【input()】函数与计算机进行交互沟通的方法。我们下一关不见不散啦(o≖◡≖)✧


请你写出一段代码，在一颗宝石都没偷回来的赋值下，进行条件判断，并产生对应的结果：  

1.如果偷回的宝石数是4颗及以上，输出结果获得了打败灭霸的力量，反杀稳了
2.如果偷回的宝石数是1-3颗，输出结果可以全员出动，殊死一搏
3.如果偷回的宝石数是0颗，输出结果没办法了，只能尝试呼叫惊奇队长
注意：标点符号都为英文格式


···
stonenumber = 0

if stonenumber >= 4:
	print("获得了打败灭霸的力量，反杀稳了!")
elif stonenumber >= 1:
	print("可以全员出动，殊死一搏!")
elif stonenumber == 0:
	print("没办法了，只能尝试呼叫惊奇队长")
else:
	print("你别逗我了，宝石数不能是负数！")
    
print("程序结束！")
···
