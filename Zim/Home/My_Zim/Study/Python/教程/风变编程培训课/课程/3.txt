Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2019-12-18T02:02:47+08:00

====== 3 ======
创建日期 星期三 18 十二月 2019

在前面的学习中，我们学会了用print()函数对计算机下简单的命令，开始接触Python里不同类型的数据，并且懂得用if条件判断语句实现与计算机沟通的初级逻辑。

icon
经过了这三关的学习，你是不是对Python的了解又近了一步？有没有开始觉得，过去冷冰冰的计算机似乎在和你的沟通下，也变得亲切了起来。

icon
但是，仅仅掌握Python的码法是不够的。要想走得更远，我们一定要掌握Python的代码逻辑，利用正确的【数据】和合理的【逻辑】构造命令，最后还需【回应】计算机，【输入】自己的信息。

icon
而这个传递信息的【回应】动作，就是我们今天的重点——input()函数，它将会完成你与Python的第一次互动沟通，产生不可思议的魔法。
那么，还等什么？让我们赶紧开启魔法之旅吧！

input()函数
在今天的课程里，你收到一封来自霍格沃兹魔法学院的入学信，这封入学信，将带你运用input()函数，开启与计算机实现“双向沟通”的新篇章。

icon
下面，就到了你选择的时候了。请点击下方代码块左方的【运行】按钮，在右方【终端】区域，先【输入】你的所选的数字，再按回车键。

···
import time

print('亲爱的同学：')
time.sleep(1)

print('我们愉快地通知您，您已获准在霍格沃茨魔法学校就读。')
time.sleep(2)

print('随信附上所需书籍及装备一览。')
time.sleep(1)

print('学期定于九月一日开始。')
time.sleep(1)

print('鉴于您对魔法世界的不熟悉，')
time.sleep(1)

print('我们将指派魔咒学老师——吴枫教授带您购买学习用品。')
time.sleep(2)

print('我们将于七月三十一日前静候您的猫头鹰带来的回信。')
time.sleep(2)

print('校长（女）米勒娃·麦格谨上')
time.sleep(1)

print('那么，您的选择是什么？ 1 接受，还是 2 放弃呢？')
time.sleep(2)

choice=input('请输入您选择的数字：')

if choice =='1':
	print('霍格沃茨欢迎您的到来。')

else:
	print('您可是被梅林选中的孩子，我们不接受这个选项。')
···

看到没，这就是你利用input()函数，与计算机进行的第一次互动式沟通。（PS：别忘了把上述代码分享到社群里，晒出你的入学offer，嘻嘻嘻！）

icon
想实现真正的人机互动沟通的关键，就是：有来有往。比如，校长问你要不要来霍格沃茨学魔法，需要给程序输入一个提问命令：你要来霍格沃茨吗？

icon
程序得令后，立马把校长的提问一字不改地显示在你的计算机屏幕上，问：你要来霍格沃茨吗？

icon
那么，这个人类用键盘向电脑提供指令，再通过电脑把问题显示在显示器上，等人回答的过程，就是通过input()函数实现的。
那么，input()函数的具体用法、背后的逻辑究竟是什么呢？这关，老师会从四个角度逐个击破input()函数。

input()函数的使用
首先，让我们通过一段代码，来看一看input()函数是如何使用的：


input('请在以下四个选项【格兰芬多；斯莱特林；拉文克劳；赫奇帕奇】中，输入你想去的学院名字:')

input()函数是输入函数。就上面例子来讲，它需要你输入针对括号内'请在以下四个选项【格兰芬多；斯莱特林；拉文克劳；赫奇帕奇】中，输入你想去的学院名字:'的答案。

icon
所以，当你在函数的括号内写出问题时，input()函数会将此问题原样显示在屏幕上，并在终端区域等待你针对此问题的回答。

icon
可是，我们为什么要在终端处输入回答呢？不输入行不行？

icon
事实上，我们可以把input()函数当作一扇链接现实世界与代码世界的门。

icon
当问题从代码世界传递给我们，可我们却没有回答时，这扇等待输入的input()大门，就会一直处于敞开状态，一直等着你往里送回答。

icon
而当我们输入信息后，这扇input()大门便会关上，继续执行下面的命令。
{{.\1.png}}

下面，我们来亲自感受一下input()函数的魔法：1.请将代码串input('请在以下四个选项【格兰芬多；斯莱特林；拉文克劳；赫奇帕奇】中，输入你想去的学院名字:')写在下面代码框中；2.点击运行后，在右侧终端处输入自己的选择；3.输入答案后要按回车键（如显示运行通过，就请继续课程）。
怎么样？输入答案按回车键后，是不是除了自己输入的信息，其他什么都没有？但是程序又没有报错，这是为什么呢？

icon
我们反复强调代码是一行行往下执行命令的，所以即使input()函数通过了，门关上了，由于input()函数下没有其他命令，自然就不会有结果产生。

icon
但是，我们输入的回答并没有丢失，它被计算机储存在了程序中。

icon
那么，如果我想要从程序海洋中找到刚刚输入的回答，利用它产生一个结果，比如表达学院对我的欢迎要怎么办？

···
请在以下四个选项【格兰芬多；斯莱特林；拉文克劳；赫奇帕奇】中，输入你想去的学院名字: 拉文克劳
#提出的问题

拉文克劳学院欢迎你，小萌新!
#显示的结果
···

咱先别急着码代码，按老规矩我们先梳理一下思维逻辑。首先，学院为了做好准备欢迎你，它们得知道你选择得学院，所以首先得搜集你心仪学院的信息。

icon
那么，我们思维的第一步，就是使用input()函数搜集信息：
然而，当我想将搜集到的数据和【'学院欢迎你，小萌新!'】拼接起来，并打印出结果时，问题来了。虽然我用input()函数搜集到了一个信息，可我如何从程序海洋中调出这个信息，进行数据拼接呢？

icon
这就涉及到了input()函数的第二个知识点——函数结果的赋值。

input()函数结果的赋值
还记得在第0关千寻的故事里，我们学习的变量赋值知识点吗？

icon
首先，我们可以对变量进行赋值，这样当我们想提取数据时，只要直接打印变量名，就能唤醒程序对数据的记忆。

icon
这个赋值逻辑，在input()函数中也是行得通的。我们也可以通过赋值，达到随时提取输入结果的目的。但是在逻辑层面，我们需要拐一个弯。

icon
比如，以我们下面这串代码为例：

···
name = input('请输入你的名字：')
#函数赋值
···

虽然看上去像是给input()函数赋值，但实际上，我们是将input()函数的执行结果（收集的信息）赋值给变量name。

icon
通俗来讲，我们放进name这个盒子里的东西，不是input()函数中提的问题，而是我们通过input()函数收集到的别人的答案。

icon
这样，不管你在终端输入的内容是什么，不管你的回答改变多少次。只要是对input()函数所提问题的回答，都会被存储在变量中。等待你打印变量时，将回答提取出来，展示在显示屏上。

icon
而这些展示在终端的信息/回答/数据，在代码世界，我们可以称其为输入值——我们输入给函数的内容。

icon
下面，我们来自己试一下：

icon
请你将input('请在以下四个选项【格兰芬多；斯莱特林；拉文克劳；赫奇帕奇】中，输入你想去的学院名字: ')的结果赋值给name，然后打印出变量name，看是否能出现你输入的回答。【要点提示：赋值，input()函数，print()函数】

刚才，我们在终端处输入的信息——学院的名字（每个人输入的内容不同），就是输入值。

icon
同时，为了能随时且方便地提取输入值，我们需要把input()函数的结果赋给变量name。

icon
当我们铺好了搜集信息的路，并对获取的信息进行了赋值，此时就可以进行最后一步，打印最终结果了。
下面，请你再来秀一波操作：1.请求输入请在以下选项【厄里斯魔镜；时间转换器；飞天扫帚；隐形斗篷】中，选择出你最想拥有的魔法物品：；2. 将结果赋值给变量magic；3. 打印结果magic+'是我最想拥有的魔法！'【要点提示：赋值，input()函数，变量拼接，print()函数】

这里有一个重点，在我们理解代码时，脑中的思维顺序是先搜集信息，再把input()函数的结果赋给变量。

icon
但是为了书写规范及防止漏掉信息，我们需要按照代码书写格式，优先对input()函数的结果进行赋值。

{{.\2.png}}
{{.\3.png}}
我们再用一张图，来直观地总结一下。
{{.\4.png}}
掌握了input()函数的综合使用场景，我们再来回看一下本关卡最开始，霍格沃茨来信的代码。

···
print('那么，您的选择是什么？ 1 接受，还是 2 放弃呢？')

choice = input('请输入您的选择：')
#变量赋值

if choice == '1':
#条件判断:条件1
	print('霍格沃茨欢迎您的到来。')
#条件1的结果

else:
#条件判断：其他条件
	print('您可是被梅林选中的孩子，我们不接受这个选项。')
#其他条件的结果
···

那么，这组代码是怎么写出来的呢？

icon
从思维角度出发，简单来讲就是：我给你两个选择，你从中挑一个，然后我给你显示对应的结果。

icon
所以，代码的第一步就是赋值，并通过input()函数提问。

1
2
choice = input('请输入您的选择：')
#变量赋值
icon
第二步，我们要根据回答进行条件判断：如果回答是1，就显示条件1的结果；如果选了其他选项，则显示其他条件的结果

代码是写完了，但问题也来了：为什么if条件下的变量choice是字符串'1'呢？如果不是字符串格式，是整数1会出现什么结果呢？

icon
下面，请你抄写上段代码，并将if的条件从字符串格式的'1'，改为整数格式的1。点击运行后，在终端处输入1并观察运行结果【提示：点击运行 → 输入1】

怎么样？你输入的是1，显示的结果是else条件下的结果：'您可是被梅林选中的孩子，我们不接受这个选项。'？
这是为什么呢？我们输入的就是条件选项中的数字1？怎么就无法出现对应的结果呢？

icon
在这里，我们就涉及到了input()函数的第三个知识点：

input()函数的数据类型
现在，让我们先从计算机语言的逻辑，按行拆解一下这段代码组：

1
2
3
4
5
6
7
8
9
10
11
12
choice = input('请输入您的选择：')
#变量赋值

if choice == 1:
#条件判断:条件1
	print('霍格沃茨欢迎您的到来。')
#条件1的结果

else:
#条件判断：其他条件
	print('您可是被梅林选中的孩子，我们不接受这个选项。')
#其他条件的结果
icon
那么，我们先来看看第一行代码中的赋值语句。

1
2
choice = input('请输入您的选择：')
#变量赋值
icon
首先，我们从整体来看，这段代码表示的是——利用input()函数接收数据，并将数据赋值给变量choice。

icon
其次，我们再细分着看，这行代码的每个部分代表着什么：
{{.\5.png}}
对于input()函数来说，不管我们输入的回答是什么，不管你输入的是整数1234，还是字符串『隐形斗篷是我最想拥有的魔法』，input()函数的输入值（搜集到的回答），永远会被【强制性】地转换为【字符串】类型。（Python3固定规则）

icon
不信？用我们第一关学过的type()函数检验一下？
是不是呀，我们输入的整数【1】或【2】就会被强制地转换为字符串的【'1'】或【'2'】。

icon
所以，不管我们在终端区域输入什么，input()函数的输入值一定是【字符串】。

icon
就这样，由于我们用赋值运算符【＝】把input()函数的字符串结果，赋给了变量choice，所以这个变量也一定是字符串类型。
{{.\6.png}}

现在，我们确定了变量choice的数据类型是字符串。下面，我们再来看后面的代码。

1
2
3
4
5
6
7
8
9
if choice == 1:
#条件判断:条件1
	print('霍格沃茨欢迎您的到来。')
#条件1的结果

else:
#条件判断：其他条件
	print('您可是被梅林选中的孩子，我们不接受这个选项。')
#其他条件的结果
icon
我们先来看第一块代码组的if条件语句【if choice==1】并进行拆解：


icon
根据第2关所学的条件判断知识，我们可以将第一行的if条件解释为：如果变量choice等于整数1时，则执行此if条件下的结果。


icon
这回你是不是发现了什么问题？还记得我们在拆解input()函数时，提到的变量choice的数据类型吗？

icon
在第一次变量赋值时，input()函数的输入值是字符串，'1'也是字符串；但是到了if条件判断时，if的条件变成了【choice == 1】—— 1没有了引号是个整数类型。


icon
就这样，因为我们输入的信息永远是字符串，choice是一个字符串类型，而1是一个整数类型，它们当然无法相等，条件【choice == 1】无法成立，只能执行else下面的操作——打印『您可是被梅林选中的孩子，我们不接受这个选项。』

icon
下面，请你展示自己的魔法。请把下段代码中if条件的错误语句，改为正确的等于字符串类型，写在下方代码框中，并点击运行。

现在，我们知道了通过修改if条件的数据类型，将代码跑通的方法。你，学会了吗？

那么，假设有下面这样一段代码：


···
age = 59

choice = input('请你猜一下斯内普教授的年龄：')

if choice == age:
	print('猜对惹～你好厉害！ ヽ✿゜▽゜)ノ～～～')

elif choice < age:
	print('斯内普的提示：你猜小了（；´д｀）ゞ。。。。')

else:
	print('斯内普的提示：乃猜大了惹(＞﹏＜)～～')
···
{{.\7.png}}

怎么样，你答对了吗？下面，我们来通过一张图再来加深一下，这个在未来非常有用，也是非常重要的知识点：
{{.\8.png}}
那么，我们就需要一个更为省力的简便方法，将所有输入值的数据类型，一次性全部变为整数。

input()函数结果的强制转换
可是吴枫老师您刚不是告诉我，input()函数搜集到的信息固定是字符串嘛？还能变整数呢？

icon
没错，input()函数的输入值在某些情况下，是可以变为整数的。那么，你还记得字符串转变为整数要怎么做吗？
{{.\9.png}}

答对了，int()是第1关的知识点强制类型转换，可以将字符串强制性地转换为整数。
有了int()函数，我们就可以从input()函数的源头，将输入的内容转换为整数。

1
2
choice = int(input('请输入您的选择：'))
#将输入值强制转换为整数，并赋值给变量choice
但是，这串代码看起来像是把input()函数整个强制转换了。

icon
可实际上，我们是将input()函数取得的结果，进行强制转换，并将强制转换的结果赋值存在名为choice的变量盒里。

icon
这样，就算if条件是整数，程序也可以准确运行。

icon
下面，请你接下我的接力棒。补齐下面的条件判断代码：如果选择1 ，打印“霍格沃茨欢迎您的到来”；其他时，打印“您可是被梅林选中的孩子，我们不接受这个选项”。【要点提示：if……else条件判断，变量赋值，等于整数】

那么，我们什么时候会用到，input()函数结果的强制转换呢？

icon
思路很简单，当你想要的答案是数字时，比如年龄：
再比如需要输入的信息是时间，或者工资等数字时：

···
money = int(input('你一个月工资多少钱？'))
#将输入的工资数（字符串），强制转换为整数

if money >= 10000:
#当工资数（整数）大于等于10000（整数）时
	print('土豪我们做朋友吧！')
#打印if条件下的结果

else:
#当工资数（整数）小于10000（整数）时
	print('我负责赚钱养家，你负责貌美如花～')
#打印else条件下
···

下面，请挥舞你隐形的翅膀，将上方月工资的代码，添加另一条件：【当工资大于5000，小于10000时】。打印结果：【我们都是搬砖族。。。】，并将添加条件后的整段代码写在下方区域。【要点提示：三个条件并存时，请使用if…elif…else…语句】


那么，本关卡的重点，input()函数的所有知识点我们就介绍完了。最后，我们再来整理一下input()函数的重点内容。

input()函数知识点总结
{{.\10.png}}
现在，请你仔细回忆一下，到现在这个节点，我们是不是知道了input()函数的用法，并且将之前学到的变量、赋值、条件判断、强制类型转换，一起结合着input()函数又复习、利用了一遍？更完成了与计算机的交互沟通？

icon
你说没感jio到？没关系，咱再复习一遍：

前四关综合复习
在第0关我们初识了Python世界最简单，也最常用的一个函数——print()函数。

icon
你别看这个函数看起来简单，但是深挖下去，这个最简单的打印函数也内有乾坤，它包含着程序世界最基础的运算逻辑。
{{.\11.png}}
但是，如果想要达成和计算机互动沟通的目的，还需要掌握计算机的沟通语言。

icon
只有当计算机明白我们说的是什么时，它才能给予我们正确的反馈。
{{.\12.png}}

与我们人类一样，计算机的运行也需要正规的逻辑，所以在第2关，我们掌握了如何与计算机沟通的逻辑。
{{.\14.png}}
拥有了语言和逻辑，我们就可以和计算机进行交互式沟通了。

icon
然后，我们就来到了今天的关卡，学习了input()函数。
可是，学会了这些知识点，我们要如何才能自己写一段代码，比如霍格沃茨来信这样的代码呢？代码组的大致格式是什么呢？


icon
回头看看，经历了这四关，你是不是发现，你已经在不知不觉中学习了这么多东西？更接触到了一个全新的世界。

icon
能够走到这里的你，已经试探着对这个全新的编程世界伸出双手。接下来，我想要和你聊聊，未来，我还能够带着你往什么方向走，能够走多远。


展望未来
icon
现在，从对程序世界的一知半解，到能自由写出整段代码的你，有没有些许成就感呢？回想一下，当你还对Python一无所知的时候，是什么驱动你迈出了学习的第一步呢？

icon
因为听说Python工资很高，所以想学？因为听说Python现在很火，所以想学？因为听说Python可以做人工智能，人工智能是未来发展的方向，所以想学？因为听人说Python能提高工作效率，所以想学？因为身边的朋友（老师、公司）让我学，所以就学了？

icon
在当时，你或许还有些犹豫和不自信：打代码听起来很难，我真的能学会吗？

icon
无论你当时的想法是什么，回过头来看看，现在你已经站在Python之旅的起点，初探着未知的人工智能世界。在短短四关的时间内，你不仅知道了人工智能的本质、应用、起源。

icon
还通过print()函数、嵌套条件、input()函数，你知道了如何用函数讲述千寻的故事、完成萌新到大佬的进化，用代码撰写复仇者联盟的剧情、链接哈利·波特的魔法世界。
这是属于你的起点，属于你一个人、独一无二的起点。但是，对于你，对于Python，对于人工智能而言，这也只是起点，绝不是终点。

icon
现在的你只不过踏上了第一个台阶，想要走得更远，你需要更为专业的课程指导，以实现真正的“Python入门”。
经过了体验课的初级训练，相信你已经不再像一开始那么畏难，你要知道：即便Python并不简单，但你是完全可以在风变编程里学会的，自己做出来的每一个课堂作业、每一个课后练习就是最好的证明。

icon
在后面的关卡中，你将会继续通过趣味性教学的方式，继续学习更多Python语法，达到真正的入门。我会逐步提升后续的知识点难度，你也将迎来新的挑战，一步步地迈上更高的阶梯。
多年的Python教学经验告诉我，初学者在刚开始接触编程的时候往往会迷失在诸多学习材料之中，看了不少资料、视频、书籍，依旧无法独立打出代码。

icon
为了解决这个问题，后面的课堂里将继续将打代码的实操和知识讲解结合，还增加了训练你编程思维的思维关卡。这些，都是现有的学习材料中所没有的，为的，就是你能真正学会，并用上Python。

icon
让我们来看看，通关Python基础语法后，你将能独立做出一些怎样的项目吧！

icon
你将不仅能读懂网上的代码，自己也能熟练地写出大段代码组，编出文字PK小游戏。在代码的世界成为勇士，开启勇者斗恶龙的征程。
在通关基础语法的所有关卡后，当你站在这个分岔口回首过去，你会发现你不仅可以用Python收发邮件，替代简易重复劳动，还能写出人机对话小游戏，更能写出一个完整的产品。


如果你的目的只是想了解Python的基础语法，或者抱着娱乐心理的话。那么，学完19关的课程后，你最初的目的已经达成了。但是，我希望Python的后续课程，依旧能为你的生活、学习、工作提供有力的帮助。

icon
如果你想实现更为伟大的目标，实现你的梦想——我想当程序员、我想当分析员、我想当人工智能工程师、我想……那么Python的基础语法课程并不是你的终点，它将会是你实现梦想的起点。

icon
那么，看看我们学完后续进阶的课程，我们又能干些什么呢？

python爬虫小项目
icon
比如：在爬虫入门课的辅助下，庞大的网络信息世界不再是一片一望无际、深不见底的海洋，你可以利用爬虫技术，随意抓取你需要的信息，实现“大海捞针”。

icon
你可以通过学习在爬虫领域占据半壁江山的requests模块，人肉网络内的任意数据；也可以让爱豆在微博上对你表达爱意（html基础）。
甚至于，让选择恐惧症每天头疼的“今天中午吃什么？”问题，当我们学会调用JSON模块后，也会变成“小菜一碟”。

你会凭借Python宝剑，在代码的魔法世界穿行，写出真正的人工智能代码，实现初级人机智能对话，让计算机成为你的私人助理。让爬虫帮你省去误点广告的麻烦，一键下载任意电影（BeautifulSoup模块 ）。
数据科学小项目
icon
在数据科学版块，老师还会系统性地教给你网络爬虫、数据库应用、数据分析等进阶Python知识。

icon
我会从数据科学的重点工具包入手，把你带入数据科学家所需要的计算环境，学会高效存储、操作、分析大型数据的方法。

这部分会非常适合有编程背景，并打算将开源Python工具用作分析、操作、可视化以及学习数据的数据科学类研究人员。

web开发小项目
icon
如果你想进入web开发领域，想成为web全栈开发工程师，实现网站搭建，那么在Python基础语法版块的辅助下，web全栈开发版块，会是最适合你的选择。

icon
现如今，全栈工程师正成为 IT 行业的新秀，不论是上市互联网公司还是创业公司，都对全栈工程师青睐有加。

icon
在这个版块，我将带你提升全栈工程师的自我修养、技能要求和核心竞争力，在前端、后端和app开发方面全面升级，为你的梦想助力。

icon
我将会用清晰的步骤，加入全栈开发实战，帮助你绕开可能的坑，一步步完成开发环境的搭建和试运行，从而建立起信心，积累学习实践的成就感。

AI智能小项目
icon
Python最具深度的应用场景是人工智能、机器学习、云计算这些高精尖的领域。作为最接近人工智能的语言，Python因它的动态便捷性和灵活的三方扩展，成就了它在人工智能领域的丰碑。

icon
我们可以利用Python进行人脸识别，调用AIML库进行智能机器人的开发，搭建人工智能数据分析平台。
同时，由于人工智能版块属于机器的深度学习方向，它不仅需要Python知识，还需要高等数学、概率论、数理统计其他学科的全方位支持。

icon
所以，我推荐有一定编程深度的你，通过Python进行深度学习和机器学习后，探访深层次的人工智能领域。
无论你身处什么行业、做什么工作，Python课程的人工智能方向，都将带给你崭新的科学世界观，预测以后的科技发展、布局未来、占位未来。

icon
探秘Python的魔法世界，不管你去向何方，目标如何，都要经历基础语法的锤炼，这样你才能走向更高级的台阶，达成你的目标，实现你的梦想。

icon
在雄关漫道、搏击风浪时，一个人的力量是不够的，你是需要同伴的。

icon
就像风变编程得以来到你的面前，也不是通过我一个人的努力就能实现的。在我的身后，有一个紧密相连的团队，有负责课程科学性的技术支持、将知识变得易学的内容支持、创造趣味性课程体验的产品支持……
我们的共同理想，是降低编程的学习门槛，让初学者也能轻松学习，让更多人能感受到：编程不是高大上的名词，它可以是有趣的、实用的，并且能够让你的生活、工作产生改变。

icon
人们都说代码是最冷酷无情的：错就是错，对就是对。但是在我看来，世界上没有比代码更有人情味的东西了，因为代码会跨越语言障碍，链接整个世界的网络，拉近人与人之间的距离。

icon
我感激通过风变编程将你我链接到了一起，也希望我和我的团队能继续陪伴着你，用我们的梦想为你的梦想助力。

icon
所以，请让我也成为你的同伴。

icon
如果你打算与我一同走下去，我希望你知道：在成功的路上，没有任何捷径和技巧，唯一能够到达终点的秘诀就是——永不放弃，笔直向前。

icon
学习都是孤独的，但是幸好，你有我的守护。


哈利·波特在对角巷购买宠物时犯难了，他不知道该给自己的猫头鹰起什么名字。现在请你帮助哈利·波特，为他的猫头鹰起一个名字。


练习介绍：
接受了霍格沃茨来信的你，带着欣喜与好奇，跟着魔咒学老师吴枫教授，来到了巫师世界的对角巷。在这个相当于人类集市的对角巷，你立刻被魔法世界稀奇古怪的东西吸引，想掏手机刷花呗买买买。
但是吴枫教授说，麻瓜（没有魔法的人）货币在魔法世界不流通，但是你可以去巫师世界的银行——古灵阁兑换货币。你立刻跟着吴枫老师跑到了古灵阁。当你进到巫师世界的银行时，就有银行的小精灵职员问好：  

注意：以下背景与题目要求相关
小精灵：您好，欢迎来到古灵阁，请问您需要帮助吗？需要or不需要？
你：需要
小精灵：请问您需要什么帮助呢？1 存取款；2 货币兑换；3 咨询
你：2
小精灵：金加隆和人民币的兑换率为1:51.3，即一金加隆=51.3人民币
小精灵：请问您需要兑换多少金加隆呢？
（你说了一个数字N）
小精灵：好的，我知道了，您需要兑换（你说的数字N）金加隆。
小精灵：那么，您需要付给我（你说的数字N*51.3）人民币。  

注1：如果选择不需要帮助，小精灵会礼貌地说'好的，再见。'
注2:  如果选择帮助【1 存取款】，小精灵会推荐你去存取款窗口；如果选择帮助【3 咨询】，小精灵会推荐你去咨询窗口。  

题目要求：
请你综合四天所学知识，将上图换钱故事的对话，用代码表现出来。
