Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2019-02-12T12:55:50+08:00

====== 特殊字符 ======
创建日期 星期二 12 二月 2019

### 注释

以`#`开头的行就是注释，会被解释器忽略。注释行前面也可以有空白字符。

```shell
echo ${PATH#*:}       # 前面的#是参数代换，不是注释.
echo $(( 2#101011 ))  # 基本转换，不是注释.
```

### __命令分割符__

分号`;`命令分割符，分割符允许在同一行里有两个或更多的命令。
```shell
echo hello; echo there         # 输出 hello 和 there
filename='demo2'               # 变量
if [ -x "$filename" ]; then    # __注意："if" and "then"需要分隔符__
							   # 思考一下这是为什么?
  echo "File $filename exists."; cp $filename $filename.bak
else
  echo "File $filename not found."; touch $filename
fi; echo "File test complete."
```

__### 结束符__

双分号`;;`，__case语句__分支的结束符。

```shell
read Keypress
case "$Keypress" in
  :lower:   ) echo "Lowercase letter";;
  :upper:   ) echo "Uppercase letter";;
  [0-9]         ) echo "Digit";;
  *             ) echo "Punctuation, whitespace, or other";;
esac      #  允许字符串的范围出现在[]中,
		  #+ 或者POSIX风格的[[中.
exit 0
```

__### 句号/圆点__

作为一个文件名的组成部分`.`，当点`.`以一个文件名为前缀时，起作用使该文件变成了隐藏文件。这种隐藏文件ls一般是不会显示出来的。

作为目录名时，单个点（.）表示当前目录，两个点(..)表示上一级目录（或称为父目录）。

点(.)字符匹配。作为正则表达式的一部分,匹配字符时，单点（.）表示匹配任意一个字符。

__### 引号__

__引号一个很重要的作用是保护命令行上的一个参数不被shell解释__，而把此参数传递给要执行的程序来处理它。

```bash
bash$ grep '[Ff]ile' demo*
demo2:filename='demo2'
demo2:if [ -x "$filename" ]; then    # 注意："if" and "then"需要分隔符
demo2:  echo "File $filename exists."; cp $filename $filename.bak
```

引号能改掉echo's不换行的“习惯”。

```bash
__bash$ echo $(ls -al)__
total 24 drwxr-xr-x 5 kacperwang staff 170 1 22 16:47 . drwxr-xr-x 5 kacperwang staff 170 1 22 13:29 .. -rwxr-xr-x 1 kacperwang staff 58 1 22 16:20 demo1 -rwxr-xr-x 1 kacperwang staff 325 1 22 16:39 demo2 -rwxr-xr-x 1 kacperwang staff 899 1 22 17:16 demo3

__bash$ echo "$(ls -al)"__
total 24
drwxr-xr-x  5 kacperwang  staff  170  1 22 16:47 .
drwxr-xr-x  5 kacperwang  staff  170  1 22 13:29 ..
-rwxr-xr-x  1 kacperwang  staff   58  1 22 16:20 demo1
-rwxr-xr-x  1 kacperwang  staff  325  1 22 16:39 demo2
-rwxr-xr-x  1 kacperwang  staff  899  1 22 17:16 demo3
```

**单引号**

```shell
str='this is a string'
```

单引号里的任何字符都会原样输出，单引号字符串中的变量是无效的  
单引号字串中不能出现单引号（对单引号使用转义符后也不行）  

**双引号**

```shell
your_name='qinjx'
str="Hello, I know your are \"$your_name\"! \n"
```

双引号里可以有变量  
双引号里可以出现转义字符  

### 命令替换

命令替换"`"，将会重新分配一个命令甚至是多个命令的输出；它会将命令的输出如实地添加到另一个上下文中。[demo4](./example/demo4)

```shell
script_name=`basename $0`
echo "The name of this script is $script_name."

textfile_listing=`ls *`
# 变量中包含了当前工作目录下所有的*文件
echo $textfile_listing
```

通过这个符号，批量删除文件

```shell
rm `cat filename`   # "filename" 包含了需要被删除的文件列表
# 可能会产生"参数列表太长"的错误
# 更好的方法是              xargs rm -- < filename 
# ( -- 同时覆盖了那些以"-"开头的文件所产生的特殊情况 )
```
