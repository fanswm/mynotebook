Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2017-11-22T13:45:13+08:00

====== 1.编译前的任务：认识核心与取得核心原始码 ======
Created Wednesday 22 November 2017

1. 编译前的任务：认识核心与取得核心原始码
　　1.1 什么是核心 (Kernel)
　　1.2 升级核心的目的
　　1.3 核心的版本
　　1.4 核心原始码的取得方式：distributions 默认、最新、patch
　　1.5 核心原始码的解压缩/安装/观察
 大标题的图示编译前的任务：认识核心与取得核心原始码
我们在第一章里面就谈过 Linux 其实指的是核心！这个『核心 (kernel)』是整个操作系统的最底层，他负责了整个硬件的驱动，以及提供各种系统所需的核心功能，包括防火墙机制、是否支持 LVM 或 Quota 等文件系统等等，这些都是核心所负责的！所以罗，在第二十章的启动流程中，我们也会看到 MBR 内的 loader 加载核心文件来驱动整个系统的硬件呢！ 也就是说，如果你的核心不认识某个最新的硬件，那么该硬件也就无法被驱动，你当然也就无法使用该硬件罗！


小标题的图示什么是核心 (Kernel)
这已经是整个 Linux 基础的最后一篇了，所以，底下这些数据你应该都要『很有概念』才行～ 不能只是『好像有印象』～好了，那就复习一下核心的相关知识吧！


Kernel
还记得我们在第十一章的 BASH shell 提到过：计算机真正在工作的东西其实是『硬件』， 例如数值运算要使用到 CPU、数据储存要使用到硬盘、图形显示会用到显卡、音乐发声要有音效芯片、连接 Internet 可能需要网络卡等等。那么如何控制这些硬件呢？那就是核心的工作了！也就是说，你所希望计算机帮你达成的各项工作， 都需要透过『核心』的帮助才行！当然罗，如果你想要达成的工作是核心所没有提供的， 那么你自然就没有办法透过核心来控制计算机使他工作罗！

举例来说，如果你想要有某个网络功能 (例如核心防火墙机制) ，但是你的核心偏偏忘记加进去这项功能， 那么不论你如何『卖力』的配置该网络套件，很抱歉！不来电！换句话说，你想要让计算机进行的工作，都必须要『核心有支持』才可以！这个标准不论在 Windows 或 Linux 这几个操作系统上都相同！如果有一个人开发出来一个『全新的硬件』，目前的核心不论 Windows 或 Linux 都不支持，那么不论你用什么系统，哈哈！这个硬件都是英雄无用武之地啦！ 那么是否了解了『核心』的重要了呢？所以我们才需要来了解一下如何编译我们的核心啦！

那么核心到底是什么啊？其实核心就是系统上面的一个文件而已， 这个文件包含了驱动主机各项硬件的侦测程序与驱动模块。在第二十章的启动流程分析中，我们也提到这个文件被读入主内存的时机， 当系统读完 BIOS 并加载 MBR 内的启动管理程序后，就能够加载核心到内存当中。然后核心开始侦测硬件， 挂载根目录并取得核心模块来驱动所有的硬件，之后呼叫 /sbin/init 就能够依序启动所有系统所需要的服务了！

这个核心文件通常被放置成 /boot/vmlinuz ，不过也不见得， 因为一部主机上面可以拥有多个核心文件，只是启动的时候仅能选择一个来加载而已。 甚至我们也可以在一个 distribution 上面放置多个核心，然后以这些核心来做成多重启动呢！


核心模块 (kernel module) 的用途
既然核心文件都已经包含了硬件侦测与驱动模块，那么什么是核心模块啊？要注意的是， 现在的硬件升级速度太快了，如果我的核心比较旧，但我换了新的硬件，那么，这个核心肯定无法支持！ 怎么办？重新拿一个新的核心来处理吗？开玩笑～核心的编译过程可是很麻烦的～

所以罗，为了这个缘故，我们的 Linux 很早之前就已经开始使用所谓的模块化配置了！ 亦即是将一些不常用的类似驱动程序的咚咚独立出核心，编译成为模块，然后， 核心可以在系统正常运行的过程当中加载这个模块到核心的支持。如此一来， 我在不需要更动核心的前提之下，只要编译出适当的核心模块，并且加载他，呵呵！我的 Linux 就可以使用这个硬件啦！简单又方便！

那我的模块放在哪里啊？可恶！怎么会问这个傻问题呢？当然一定要知道的啦！就是 /lib/modules/$(uname -r)/kernel/ 当中啦！


自制核心 - 核心编译
刚刚上面谈到的核心其实是一个文件，那么这个文件怎么来的？当然是透过原始码 (source code) 编译而成的啊！因为核心是直接被读入到主内存当中的，所以当然要将他编译成为系统可以认识的数据才行！也就是说， 我们必须要取得核心的原始码，然后利用第二十二章 Tarball 安装方式提到的编译概念来达成核心的编译才行啊！(这也是本章的重点啊！ ^_^)


关於驱动程序 - 是厂商的责任还是核心的责任？
现在我们知道硬件的驱动程序可以编译成为核心模块，所以可以在不改变核心的前提下驱动你的新硬件。 但是，很多朋友还是常常感到困惑，就是 Linux 上面针对最新硬件的驱动程序总是慢了几个脚步， 所以觉得好像 Linux 的支持度不足！其实不可以这么说的，为什么呢？因为在 Windows 上面，对於最新硬件的驱动程序需求，基本上，也都是厂商提供的驱动程序才能让该硬件工作的， 因此，在这个『驱动程序开发』的工作上面来说，应该是属於硬件发展厂商的问题， 因为他要我们买他的硬件，自然就要提供消费者能够使用的驱动程序啦！

所以，如果大家想要让某个硬件能够在 Linux 上面跑的话，那么似乎可以发起一人一信的方式，强烈要求硬件开发商发展 Linux 上面的驱动程序！这样一来，也可以促进 Linux 的发展呢！

小标题的图示升级核心的目的
除了 BIOS 之外，核心是操作系统中最早被加载到内存的咚咚， 他包含了所有可以让硬件与软件工作的资讯，所以，如果没有搞定核心的话， 那么你的系统肯定会有点小问题！好了，那么是不是将『所有目前核心有支持的东西都给他编译进去我的核心中， 那就可以支持目前所有的硬件与可运行的工作啦！』！

这话说的是没错啦，但是你是否曾经看过一个为了怕自己今天出门会口渴、会饿、会冷、会热、会被车撞、 会摔跤、会被性骚扰，而在自己的大包包里面放了大瓶矿泉水、便当、厚外套、短裤、防撞钢梁、止滑垫、 电击棒....等一大堆东西，结果却累死在半路上的案例吗？当然有！但是很少啦！我相信不太有人会这样做！ (会这么做的人通常都已经在医院了～) 取而代之的是会看一下天气，冷了就只带外套， 热了就只带短衣、如果穿的漂亮一点又预计晚点回家就多带个电击棒、 出远门到没有便利商店的地方才多带矿泉水....

说这个干什么！对啦！就是要你了解到，核心的编译重点在於『你要你的 Linux 作什么？』，是啦！如果没有必要的工作，就干脆不要加在你的核心当中了！这样才能让你的 Linux 跑得更稳、更顺畅！这也是为什么我们要编译核心的最主要原因了！


Linux 核心特色，与默认核心对终端用户的角色
Linux 的核心有几个主要的特色，除了『Kernel 可以随时、随各人喜好而更动』之外，Kernel 的『版本更动次数太频繁』也是一个特点！所以罗，除非你有特殊需求， 否则一次编译成功就可以啦！不需要随时保持最新的核心版本，而且也没有必要 (编译一次核心要粉久的ㄋㄟ！) 。话说到这里又突然想到今天看到的一篇文章，大意是说老板想要雇用的人会希望是 Linux 的老手，因为他们比较容易了解问题的所在，除此之外，如果有任何问题发生，由於其使用 Linux 是可以随时修补漏洞的！但是如果是 Windows 的话，就得要将机器关闭，直到 MS 推出修补套件后才能再激活～

那么是否『我就一定需要在安装好了 Linux 之后就赶紧给他编译核心呢？』， 老实说，『并不需要的』！这是因为几乎每一个 distribution 都已经默认编译好了相当大量的模块了， 所以使用者常常或者可能会使用到的数据都已经被编译成为模块，也因此，呵呵！ 我们使用者确实不太需要重新来编译核心！尤其是『一般的使用者， 由於系统已经将核心编译的相当的适合一般使用者使用了，因此一般入门的使用者，基本上， 不太需要编译核心』。


核心编译的可能目的
OK！那么鸟哥闲闲没事干跑来写个什么东西？既然都不需要编译核心还写编译核心的分享文章， 鸟哥卖弄才学呀？很抱歉，鸟哥虽然是个『不学有术』的混混，却也不会平白无故的写东西请您来指教～ 当然是有需要才会来编译核心啦！编译核心的时机可以归纳为几大类：

新功能的需求：
我需要新的功能，而这个功能只有在新的核心里面才有，那么为了获得这个功能，只好来重新编译我的核心了。例如 iptables 这个防火墙机制只有在 2.4.xx 以后的版本里面才有，而新开发的主板芯片组， 很多也需要新的核心推出之后，才能正常而且有效率的工作！

原本核心太过臃肿：
如果你是那种对於系统『稳定性』很要求的人，对於核心多编译了很多莫名其妙的功能而不太喜欢的时候， 那么就可以重新编译核心来取消掉该功能罗；

与硬件搭配的稳定性：
由於原本 Linux 核心大多是针对 Intel 的 CPU 来作开发的，所以如果你的 CPU 是 AMD 的系统时，有可能 (注意！只是有可能，不见得一定会如此) 会让系统跑得『不太稳！』。此外，核心也可能没有正确的驱动新的硬件，此时就得重新编译核心来让系统取得正确的模块才好。 

其他需求 (如嵌入式系统)：
就是你需要特殊的环境需求时，就得自行设计你的核心罗！( 像是一些商业的套装软件系统，由於需要较为小而美的操作系统， 那么他们的核心就需要更简洁有力了！)
另外，需要注意重新编译核心虽然可以针对你的硬件作最佳化的步骤 (例如刚刚提到的 CPU 的问题！) ，不过由於这些最佳化的步骤对於整体效能的影响是很小很小的， 因此如果是为了添加效能来编译核心的话，基本上，效益不大！然而，如果是针对『系统稳定性』来考量的话， 那么就有充分的理由来支持你重新编译核心罗！

『如果系统已经运行很久了，而且也没有什么大问题， 加上我又不添加冷门的硬件设备，那么建议就不需要重新编译核心了』， 因为重新编译核心的最主要目的是『想让系统变的更稳！』既然你的 Linux 主机已经达到这个目的了，何必再编译核心？不过，就如同前面提到的， 由於默认的核心不见得适合你的需要，加上默认的核心可能并无法与你的硬件配备相配合， 此时才开始考虑重新编译核心吧！

Tips:
早期鸟哥是强调最好重新编译核心的一群啦！不过，最近这个想法改变了～ 既然原本的 distribution 都已经帮我们考虑好如何使用核心了，那么， 我们也不需要再重新的编译核心啦！尤其是 distribution 都会主动的释出新版的核心 RPM 版本， 所以，实在不需要自己重新编译的！当然啦，如同前面提到的， 如果你有特殊需求的话，那就另当别论噜！ ^_^	鸟哥的图示
由於『核心的主要工作是在控制硬件！』所以编译核心之前， 请先了解一下你的硬件配备，与你这部主机的未来功能！由於核心是『越简单越好！』所以只要将这部主机的未来功能给他编进去就好了！ 其他的就不用去理他啦！

小标题的图示核心的版本
核心的版本问题，我们在第一章已经谈论过， 主要的版本定义为：『[主].[次].[释出]-[修改]』的样式。 你只要知道 2.6.x 是稳定版本，2.5.x 是测试用版本即可。 我们要使用最新的核心来重新编译核心时，大多就是使用那种偶数的核心版本啦！不过这里还是要再提一遍！就是『 2.4.x 与 2.6.x 是两个具有相当大差异的核心版本， 两者之间使用到的函式库基本上已经不相同了，所以在升级之前，如果你的核心原本是 2.4.xx 版，那么就升级到 2.4.xx 版本的最新版，不要由 2.4.xx 直接升级到 2.6.xx 版，否则到时可能会欲哭无泪～～』， 这个问题在讨论区一再地被提起！这里再次说明！

Tips:
为什么不能从 2.4 升级到 2.6 呢？其实还是可以啦！只是过程很复杂！ 我们知道软件 (packages) 是架构在系统核心上面来进行编译、安装与运行的， 也就是说，这些 packages 与核心之间，是有相关性的！这些 packages 会用到很多核心提供的功能。 但是不同的[主][次]版本之间，他们提供的功能架构差异太大，因此，若你由 2.4 升级到 2.6 的话， 那么绝大部分的软件『都需要重新再编译！』这样了解为何不要在不同的版本间升级了吧？	鸟哥的图示
此外，2.4.xx 与 2.6.xx 的比较中，并不是 2.6.xx 就一定比 2.4.xx 还要新，因为这两种版本同时在进行维护与升级的工作！如果有兴趣的话，可以前往 Linux 核心网站 http://www.kernel.org 一看究竟，你就可以了解目前的核心变动情况了！

基本上，目前最新的 distributions ，包括 CentOS, FC, SuSE, Mandriva 等等，都使用 2.6 的核心， 所以，你可以直接由 http://www.kernel.org 下载最新的 2.6.xx 版本的核心来尝试编译啊！目前 (2009/07/27) 鸟哥可以查到的最新版本是 2.6.30 ， 底下我们将主要以这个版本来测试。另外，由於较新的核心版本可能会多出一些选项， 因此若有不同的项目也没有关系！稍微查看一下说明内容就可以了解啦！

小标题的图示核心原始码的取得方式
既然核心是个文件，要制作这个文件给系统使用则需要编译，既然要有编译，当然就得要有原始码啊！ 那么原始码怎么来？基本上，依据你的 distributions 去挑选的核心原始码来源主要有：


原本 distribution 提供的核心原始码文件
事实上，各主要 distributions 在推出他们的产品时，其实已经都附上了核心原始码了！ 以我们的 CentOS 5.x 为例，你可以在国家高速网络中心网站下载相关的核心 SRPM 的文件！ 由於 CentOS 5.x 一直有在进行升级动作，因此你也可以在 update 的目录底下找到核心原始码喔！如下连结所示：

原始推出核心码：http://ftp.twaren.net/Linux/CentOS/5/os/SRPMS/
升级码：http://ftp.twaren.net/Linux/CentOS/5/updates/SRPMS/
你或许会说：既然要重新编译，那么干嘛还要使用原本 distributions 释出的原始码啊？真没创意～ 话不是这么说，因为原本的 distribution 释出的原始码当中，含有他们配置好的默认配置值， 所以，我们可以轻易的就了解到当初他们是如何选择与核心及模块有关的各项配置项目的参数值， 那么就可以利用这些可以配合我们 Linux 系统的默认参数来加以修改，如此一来， 我们就可以『修改核心，调整到自己喜欢的样子』罗！而且编译的难度也会比较低一点！


取得最新的稳定版核心原始码
虽然使用 distribution 释出的核心 source code 来重新编译比较方便，但是，如此一来， 新硬件所需要的新驱动程序，也就无法藉由原本的核心原始码来编译啊！ 所以罗，如果是站在要升级驱动程序的立场来看，当然使用最新的核心可能会比较好啊！

Linux 的核心目前是由其发明者 Linus Torvalds 所属团队在负责维护的，而其网站在底下的站址上，在该网站上可以找到最新的 kernel 资讯！不过，美中不足的是目前的核心越来越大了 (linux-2.6.30.3.tar.bz2 这一版，这一个文件大约 57MB 了！)，所以如果你的 ISP 连外很慢的话，那么使用台湾的映射站台来下载不失为一个好方法：

核心官网：http://www.kernel.org/
交大资科：ftp://linux.cis.nctu.edu.tw/kernel/linux/kernel/
国高中心：ftp://ftp.twaren.net/pub/Unix/Kernel/linux/kernel/

保留原本配置：利用 patch 升级核心原始码
如果 (1)你曾经自行编译过核心，那么你的系统当中应该已经存在前几个版本的核心原始码， 以及上次你自行编译的参数配置值才对； (2)如果你只是想要在原本的核心底下加入某些特殊功能， 而该功能已经针对核心原始码推出 patch 补丁文件时。那你该如何进行核心原始码的升级，以便后续的编译呢？

其实每一次核心释出时，除了释出完整的核心压缩档之外，也会释出『该版本与前一版本的差异性 patch 文件』， 关於 patch 的制作我们已经在第二十二章当中提及， 你可以自行前往参考。这里仅是要提供给你的资讯是，每个核心的 patch 仅有针对前一版的核心来分析而已， 所以，万一你想要由 2.6.27 升级到 2.6.30 的话，那么你就得要下载 patch-2.6.28, patch-2.6.29, patch-2.6.30 等文件，然后『依序』一个一个的去进行 patch 的动作后， 才能够升级到 2.6.30 喔！这个重要！不要忘记了。

但是，如果你想要升级 2.6.30 的修改版本到 2.6.30.3 时，由於修改版本是针对 2.6.30 来制作的， 因此你只要下载 patch-2.6.30.3 来直接将 2.6.30 升级至 2.6.30.3 即可。但反过来说，如果你要从 2.6.30.2 升级到 2.6.30.3 呢？很抱歉的是，并没有 2.6.30.2 到 2.6.30.3 的补丁文件，所以你必须要将 2.6.30.2 还原至 2.6.30， 然后才能使用 patch-2.6.30.3 来升级 2.6.30 喔！注意这个差异！

同样的，如果是某个硬件或某些非官方认定的核心添加功能网站所推出的 patch 文件时，你也必须要了解该 patch 文件所适用的核心版本，然后才能够进行 patch ，否则容易出现重大错误喔！这个项目对於某些商业公司的工程师来说是很重要的。 举例来说，鸟哥的一个高中同学在业界服务，他主要是进行类似 Eee PC 开发的计画，然而该计画的硬件是该公司自行推出的！ 因此，该公司必须要自行搭配核心版本来设计他们自己的驱动程序，而该驱动程序并非 GPL 授权，因此他们就得要自行将驱动程序整合进核心！如果改天他们要将这个驱动程序释出，那么就得要利用 patch 的方式， 将硬件驱动程序文件释出，我们就得要自行以 patch 来升级核心啦！

在进行完 patch 之后，你可以直接检查一下原本的配置值，如果没有问题， 就可以直接编译，而不需要再重新的选择核心的参数值，这也是一个省时间的方法啊！ 至於 patch file 的下载，同样是在 kernel 的相同目录下，寻找档名是 patch 开头的就是了。

小标题的图示核心原始码的解压缩/安装/观察
由於鸟哥是比较喜欢直接由核心官网取得原始核心的家伙，所以，底下的动作是使用 2.6.30.3 这个版本的核心来安装的！ 如果你想要使用 distributions 提供的 SRPM 来处理的话，得自行找到 SRPM 的相关安装方法来处理罗！ 其实看一下第二十二章就知道该如何处理啦。 总之，本章的核心原始码是由底下的连结取得的：

ftp://linux.cis.nctu.edu.tw/kernel/linux/kernel/v2.6/linux-2.6.30.3.tar.bz2

核心原始码的解压缩与放置目录
鸟哥这里假设你也是下载上述的连结内的文件，然后该文件放置到 /root 底下。由於 2.6.x 核心原始码一般建议放置於 /usr/src/kernels/ 目录底下，因此你可以这样处理：

[root@www ~]# tar -jxvf linux-2.6.30.3.tar.bz2 -C /usr/src/kernels/
此时会在 /usr/src/kernels 底下产生一个新的目录，那就是 linux-2.6.30.3 这个目录罗！ 我们在下个小节会谈到的各项编译与配置，都必须要在这个目录底下进行才行喔！好了，那么这个目录底下的相关文件有啥咚咚？ 底下就来谈谈：


核心原始码下的次目录
在上述核心目录下含有哪些重要数据呢？基本上有底下这些东西：

arch ：与硬件平台有关的项目，大部分指的是 CPU 的类别，例如 x86, x86_64, Xen 虚拟支持等；
block ：与区块装置较相关的配置数据，区块数据通常指的是大量储存媒体！还包括类似 ext3 等文件系统的支持是否允许等。
crypto ：核心所支持的加密的技术，例如 md5 或者是 des 等等；
Documentation ：与核心有关的一堆说明文件，若对核心有极大的兴趣，要瞧瞧这里！
drivers ：一些硬件的驱动程序，例如显卡、网络卡、PCI 相关硬件等等；
firmware ：一些旧式硬件的微命令码 (韧体) 数据；
fs ：核心所支持的 filesystems ，例如 vfat, reiserfs, nfs 等等；
include ：一些可让其他程序呼叫的标头 (header) 定义数据；
init ：一些核心初始化的定义功能，包括挂载与 init 程序的呼叫等；
ipc ：定义 Linux 操作系统内各程序的沟通；
kernel ：定义核心的程序、核心状态、运行绪、程序的排程 (schedule)、程序的讯号 (signle) 等
lib ：一些函式库；
mm ：与内存单元有关的各项数据，包括 swap 与虚拟内存等；
net ：与网络有关的各项协议数据，还有防火墙模块 (net/ipv4/netfilter/*) 等等；
security ：包括 selinux 等在内的安全性配置；
sound ：与音效有关的各项模块；
virt ：与虚拟化机器有关的资讯，目前核心支持的是 KVM (Kernel base Virtual Machine)
这些数据先大致有个印象即可，至少未来如果你想要使用 patch 的方法加入额外的新功能时， 你要将你的原始码放置於何处？这里就能够提供一些指引了。当然，最好还是跑到 Documentation 那个目录底下去瞧瞧正确的说明， 对你的核心编译会更有帮助喔！

