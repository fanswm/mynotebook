Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2017-12-11T16:36:41+08:00

====== 2 Linux文件权限概念 ======
Created Monday 11 December 2017

最近更新日期：2009/08/18
2. Linux文件权限概念
　　2.1 Linux文件属性
　　2.2 如何改变文件属性与权限： chgrp, chown, chmod
　　2.3 目录与文件之权限意义
　　2.4 Linux文件种类与扩展名
 Linux 文件权限概念
Linux文件属性
嗯！既然要让你了解Linux的文件属性，那么有个重要的也是常用的指令就必须要先跟你说啰！那一个？就是『 ls 』这一个察看文件的指令啰！在你以root的身份登入Linux之后，下达『 ls -al 』看看，会看到底下的几个咚咚：

 [root@www ~]# ls -al

-rw-r--r--   1    root   root     5661   Sep  4 18:25 install.log.syslog
[    1   ][  2 ][   3  ][  4 ][    5   ][     6     ][       7          ]
[  权限  ][连结][拥有者][群组][文件容量][  修改日期 ][      檔名        ]


第一栏代表这个文件的类型与权限(permission)：
这个地方最需要注意了！仔细看的话，你应该可以发现这一栏其实共有十个字符：(图2.1.1及图2.1.2内的权限并无关系)

文件的类型与权限之内容
{{./文件的类型与权限之内容.gif}}
图2.1.2、文件的类型与权限之内容

第一个字符代表这个文件是『目录、文件或链接文件等等』：

__当为[ d ]则是目录，例如上表档名为『.gconf』的那一行；__
__当为[ - ]则是文件，例如上表档名为『install.log』那一行；__
__若是[ l ]则表示为连结档(link file)；__
__若是[ b ]则表示为装置文件里面的可供储存的接口设备(可随机存取装置)；__
__若是[ c ]则表示为装置文件里面的串行端口设备，例如键盘、鼠标(一次性读取装置)。__

接下来的字符中，以三个为一组，且均为『rwx』 的三个参数的组合。其中，[ r ]代表可读(read)、[ w ]代表可写(write)、[ x ]代表可执行(execute)。 要注意的是，这三个权限的位置不会改变，如果没有权限，就会出现减号[ - ]而已。

第一组为『文件拥有者的权限』，以『install.log』那个文件为例， 该文件的拥有者可以读写，但不可执行；
第二组为『同群组的权限』；
第三组为『其他非本群组的权限』。


另外，目录与文件的权限意义并不相同，这是因为目录与文件所记录的数据内容不相同所致。 由于目录与文件的权限意义非常的重要，所以鸟哥将他独立到2.3节目录与文件之权限意义中再来谈。

__第二栏表示有多少档名连结到此节点(i-node)：__
每个文件都会将他的权限与属性记录到文件系统的i-node中，不过，我们使用的目录树却是使用文件名来记录， 因此__每个档名就会连结到一个i-nod__e啰！这个属性记录的，就是有多少不同的档名连结到相同的一个i-node号码去就是了。 关于i-node的相关数据我们会在第八章谈到文件系统时再加强介绍的。

__第三栏表示这个文件(或目录)的『拥有者账号』__
__第四栏表示这个文件的所属群组__

__第五栏为这个文件的容量大小，默认单位为bytes；__
__第六栏为这个文件的建档日期或者是最近的修改日期：__
这一栏的内容分别为日期(月/日)及时间。如果这个文件被修改的时间距离现在太久了，那么时间部分会仅显示年份而已。 如下所示：

[root@www ~]# ls -l /etc/termcap /root/install.log
-rw-r--r-- 1 root root 807103 Jan  7  2007 /etc/termcap
-rw-r--r-- 1 root root  42304 Sep  4 18:26 /root/install.log
# 如上所示，/etc/termcap 为 2007 年所修改过的文件，离现在太远之故；
# 至于 install.log 是今年 (2009) 所建立的，所以就显示完整的时间了。
__如果想要显示完整的时间格式，可以利用ls的选项，亦即：『ls -l --full-time』就能够显示出完整的时间格式了__！包括年、月、日、时间喔。 另外，如果你当初是以繁体中文安装你的Linux系统，那么日期字段将会以中文来显示。 可惜的是，中文并没有办法在纯文本的终端机模式中正确的显示，所以此栏会变成乱码。 那你就得要使用『LANG=en_US』来修改语系喔！

如果想要让系统__默认的语系变成英文的话，那么你可以修改系统配置文件『/etc/sysconfig/i18n』__，利用第五章谈到的nano来修改该文件的内容，使LANG这个变量成为上述的内容即可。

__第七栏为这个文件的档名__
这个字段就是档名了。__比较特殊的是：如果档名之前多一个『 . 』，则代表这个文件为『隐藏档』__，例如上表中的.gconf那一行，该文件就是隐藏档。 你可以使用『ls』及『ls -a』这两个指令去感受一下什么是隐藏档啰！


Linux文件权限的重要性：
与Windows系统不一样的是，在Linux系统当中，每一个文件都多加了很多的属性进来，尤其是群组的概念，这样有什么用途呢？ 其实，最大的用途是在『数据安全性』上面的。

__系统保护的功能：__
举个简单的例子，在你的系统中，关于系统服务的文件通常只有root才能读写或者是执行，例如/etc/shadow这一个账号管理的文件，由于该文件记录了你系统中所有账号的数据， 因此是很重要的一个配置文件，当然不能让任何人读取(否则密码会被窃取啊)，只有root才能够来读取啰！所以该文件的权限就会成为[ -rw------- ]啰！

__团队开发软件或数据共享的功能：__
此外，如果你有一个软件开发团队，在你的团队中，你希望每个人都可以使用某一些目录下的文件， 而非你的团队的其他人则不予以开放呢？以上面的例子来说，testgroup的团队共有三个人，分别是test1, test2, test3，那么我就可以将团队所需的文件权限订为[ -rwxrwx--- ]来提供给testgroup的工作团队使用啰！

未将权限设定妥当的危害：
再举个例子来说，如果你的目录权限没有作好的话，可能造成其他人都可以在你的系统上面乱搞啰！ 例如本来只有root才能做的开关机、ADSL的拨接程序、新增或删除用户等等的指令，若被你改成任何人都可以执行的话， 那么如果使用者不小心给你重新启动啦！重新拨接啦！等等的！那么你的系统不就会常常莫名其妙的挂掉啰！ 而且万一你的用户的密码被其他不明人士取得的话，只要他登入你的系统就可以轻而易举的执行一些root的工作！
可怕吧！因此，在你修改你的linux文件与目录的属性之前，一定要先搞清楚， 什么数据是可变的，什么是不可变的！千万注意啰！接下来我们来处理一下文件属性与权限的变更吧！

如何改变文件属性与权限
我们现在知道文件权限对于一个系统的安全重要性了，也知道文件的权限对于使用者与群组的相关性， 那么如何修改一个文件的属性与权限呢？又！有多少文件的权限我们可以修改呢？ 其实一个文件的属性与权限有很多！我们先介绍几个常用于群组、拥有者、各种身份的权限之修改的指令，如下所示：

__chgrp ：改变文件所属群组__
__chown ：改变文件拥有者__
__chmod ：改变文件的权限, SUID, SGID, SBIT等等的特性__
改变所属群组, chgrp
改变一个文件的群组真是很简单的，直接以chgrp来改变即可，咦！这个指令就是change group的缩写嘛！这样就很好记了吧！ ^_^。不过，请记得，要被改变的组名必须要在/etc/group文件内存在才行，否则就会显示错误！

假设你是以root的身份登入Linux系统的，那么在你的家目录内有一个install.log的文件， 如何将该文件的群组改变一下呢？假设你已经知道在/etc/group里面已经存在一个名为users的群组， 但是testing这个群组名字就不存在/etc/group当中了，此时改变群组成为users与testing分别会有什么现象发生呢？

__[root@www ~]# chgrp [-R] dirname/filename ...__
__选项与参数：__
__-R : 进行递归(recursive)的持续变更，亦即连同次目录下的所有文件、目录__
__     都更新成为这个群组之意。常常用在变更某一目录内所有的文件之情况。__
范例：
[root@www ~]# chgrp users install.log
[root@www ~]# ls -l
-rw-r--r--  1 root users 68495 Jun 25 08:53 install.log
[root@www ~]# chgrp testing install.log
chgrp: invalid group name `testing' <== 发生错误讯息啰～找不到这个群组名～
发现了吗？文件的群组被改成users了，但是要改成testing的时候， 就会发生错误～注意喔！发生错误讯息还是要努力的查一查错误讯息的内容才好！ 将他英文翻译成为中文，就知道问题出在哪里了。


改变文件拥有者, chown
如何改变一个文件的拥有者呢？很简单呀！既然改变群组是change group，那么改变拥有者就是change owner啰！BINGO！那就是chown这个指令的用途，要注意的是， 用户必须是已经存在系统中的账号，也就是在/etc/passwd 这个文件中有纪录的用户名称才能改变。

chown的用途还满多的，他还可以顺便直接修改群组的名称呢！此外，如果要连目录下的所有次目录或文件同时更改文件拥有者的话，直接加上 -R 的选项即可！我们来看看语法与范例：

[root@www ~]# chown [-R] 账号名称 文件或目录
__[root@www ~]# chown [-R] 账号名称:组名 文件或目录__
__选项与参数：__
__-R : 进行递归(recursive)的持续变更，亦即连同次目录下的所有文件都变更__

范例：将install.log的拥有者改为bin这个账号：
[root@www ~]# chown bin install.log
[root@www ~]# ls -l
-rw-r--r--  1 bin  users 68495 Jun 25 08:53 install.log

范例：将install.log的拥有者与群组改回为root：
[root@www ~]# chown root:root install.log
[root@www ~]# ls -l
-rw-r--r--  1 root root 68495 Jun 25 08:53 install.log
Tips:
事实上，chown也可以使用『chown user.group file』，亦即在拥有者与群组间加上小数点『.』也行！ 不过很多朋友设定账号时，喜欢在账号当中加入小数点(例如vbird.tsai这样的账号格式)，这就会造成系统的误判了！ 所以我们比较建议使用冒号『:』来隔开拥有者与群组啦！此外，chown也能单纯的修改所属群组呢！ 例如『chown .sshd install.log』就是修改群组～看到了吗？就是那个小数点的用途！	鸟哥的图示
知道如何改变文件的群组与拥有者了，那么什么时候要使用chown或chgrp呢？或许你会觉得奇怪吧？ 是的，确实有时候需要变更文件的拥有者的，最常见的例子就是在复制文件给你之外的其他人时， 我们使用最简单的cp指令来说明好了：

改变权限, chmod
文件权限的改变使用的是chmod这个指令，但是，权限的设定方法有两种， 分别可以使用数字或者是符号来进行权限的变更。我们就来谈一谈：

数字类型改变文件权限

Linux文件的基本权限就有九个，分别是owner/group/others三种身份各有自己的read/write/execute权限， 先复习一下刚刚上面提到的数据：文件的权限字符为：『-rwxrwxrwx』， 这九个权限是三个三个一组的！其中，我们可以使用数字来代表各个权限，各权限的分数对照表如下：
r:4
w:2
x:1
每种身份(owner/group/others)各自的三个权限(r/w/x)分数是需要累加的，例如当权限为： [-rwxrwx---] 分数则是：
__owner = rwx = 4+2+1 = 7__
__group = rwx = 4+2+1 = 7__
__others= --- = 0+0+0 = 0__
所以等一下我们设定权限的变更时，该文件的权限数字就是770啦！变更权限的指令chmod的语法是这样的：
__[root@www ~]# chmod [-R] xyz 文件或目录__
__选项与参数：__
__xyz : 就是刚刚提到的数字类型的权限属性，为 rwx 属性数值的相加。__
__-R : 进行递归(recursive)的持续变更，亦即连同次目录下的所有文件都会变更__
举例来说，如果要将.bashrc这个文件所有的权限都设定启用，那么就下达： 
[root@www ~]# ls -al .bashrc
-rw-r--r--  1 root root 395 Jul  4 11:45 .bashrc
[root@www ~]# chmod 777 .bashrc
[root@www ~]# ls -al .bashrc
-rwxrwxrwx  1 root root 395 Jul  4 11:45 .bashrc
那如果要将权限变成『 -rwxr-xr-- 』呢？那么权限的分数就成为 [4+2+1][4+0+1][4+0+0]=754 啰！所以你需要下达『 chmod 754 filename』。 另外，在实际的系统运作中最常发生的一个问题就是，常常我们以vim编辑一个shell的文字批处理文件后，他的权限通常是 -rw-rw-r-- 也就是664， 如果要将该文件变成可执行文件，并且不要让其他人修改此一文件的话， 那么就需要-rwxr-xr-x这样的权限，此时就得要下达：『 chmod 755 test.sh 』的指令啰！

另外，如果有些文件你不希望被其他人看到，那么应该将文件的权限设定为例如：『-rwxr-----』，那就下达『 chmod 740 filename 』吧！ 

例题：
将刚刚你的.bashrc这个文件的权限修改回-rw-r--r--的情况吧！
答：
-rw-r--r--的分数是644，所以指令为：
chmod 644 .bashrc

符号类型改变文件权限

还有一个改变权限的方法呦！从之前的介绍中我们可以发现，基本上就九个权限分别是(1)user (2)group (3)others三种身份啦！那么我们就可以藉由u, g, o来代表三种身份的权限！此外， a 则代表 all 亦即全部的身份！那么读写的权限就可以写成r, w, x！也就是可以使用底下的方式来看：

chmod	u
g
o
a	+(加入)
-(除去)
=(设定)	r
w
x	文件或目录

来实作一下吧！假如我们要『设定』一个文件的权限成为『-rwxr-xr-x』时，基本上就是：

user (u)：具有可读、可写、可执行的权限；
group 与 others (g/o)：具有可读与执行的权限。

所以就是：
__[root@www ~]# chmod  u=rwx,go=rx  .bashrc__
__# 注意喔！那个 u=rwx,go=rx 是连在一起的，中间并没有任何空格！__
[root@www ~]# ls -al .bashrc
-rwxr-xr-x  1 root root 395 Jul  4 11:45 .bashrc
那么假如是『 -rwxr-xr-- 』这样的权限呢？可以使用『 chmod u=rwx,g=rx,o=r filename 』来设定。此外，如果我不知道原先的文件属性，而我只想要增加.bashrc这个文件的每个人均可写入的权限， 那么我就可以使用：
[root@www ~]# ls -al .bashrc
-rwxr-xr-x  1 root root 395 Jul  4 11:45 .bashrc
__[root@www ~]# chmod  a+w  .bashrc__
[root@www ~]# ls -al .bashrc
-rwxrwxrwx  1 root root 395 Jul  4 11:45 .bashrc
而如果是要将权限去掉而不更动其他已存在的权限呢？例如要拿掉全部人的可执行权限，则：
__[root@www ~]# chmod  a-x  .bashrc__
[root@www ~]# ls -al .bashrc
-rw-rw-rw-  1 root root 395 Jul  4 11:45 .bashrc
知道 +, -, = 的不同点了吗？对啦！ + 与 – 的状态下，只要是没有指定到的项目，则该权限『不会被变动』， 例如上面的例子中，由于仅以 – 拿掉 x 则其他两个保持当时的值不变！多多实作一下，你就会知道如何改变权限啰！ 这在某些情况底下很好用的～举例来说，你想要教一个朋友如何让一个程序可以拥有执行的权限， 但你又不知道该文件原本的权限为何，此时，利用『chmod a+x filename』 ，就可以让该程序拥有执行的权限了。是否很方便？
目录与文件之权限意义：
现在我们知道了Linux系统内文件的三种身份(拥有者、群组与其他人)，知道每种身份都有三种权限(rwx)， 已知道能够使用chown, chgrp, chmod去修改这些权限与属性，当然，利用ls -l去观察文件也没问题。 前两小节也谈到了这些文件权限对于数据安全的重要性。那么，这些文件权限对于一般文件与目录文件有何不同呢？ 有大大的不同啊！底下就让鸟哥来说清楚，讲明白！


权限对文件的重要性
文件是实际含有数据的地方，包括一般文本文件、数据库内容文件、二进制可执行文件(binary program)等等。 因此，权限对于文件来说，他的意义是这样的：

__r (read)：可读取此一文件的实际内容，如读取文本文件的文字内容等；__
__w (write)：可以编辑、新增或者是修改该文件的内容(但不含删除该文件)；__
__x (execute)：该文件具有可以被系统执行的权限。__
那个可读(r)代表读取文件内容是还好了解，那么可执行(x)呢？这里你就必须要小心啦！ 因为在Windows底下一个文件是否具有执行的能力是藉由『 扩展名 』来判断的， 例如：.exe, .bat, .com 等等，但是在Linux底下，我们的文件是否能被执行，则是藉由是否具有『x』这个权限来决定的！跟档名是没有绝对的关系的！

至于最后一个w这个权限呢？当你对一个文件具有w权限时，你可以具有写入/编辑/新增/修改文件的内容的权限， 但并不具备有删除该文件本身的权限！对于文件的rwx来说， 主要都是针对『文件的内容』而言，与文件档名的存在与否没有关系喔！因为文件记录的是实际的数据嘛！


权限对目录的重要性
文件是存放实际数据的所在，那么目录主要是储存啥玩意啊？目录主要的内容在记录文件名列表，文件名与目录有强烈的关连啦！ 所以如果是针对目录时，那个 r, w, x 对目录是什么意义呢？

r (read contents in directory)：

表示具有读取目录结构列表的权限，所以当你具有读取(r)一个目录的权限时，表示你可以查询该目录下的文件名数据。 所以你就可以利用 ls 这个指令将该目录的内容列表显示出来！

w (modify contents of directory)：

这个可写入的权限对目录来说，是很了不起的！ 因为他表示你具有异动该目录结构列表的权限，也就是底下这些权限：

建立新的文件与目录；
删除已经存在的文件与目录(不论该文件的权限为何！)
将已存在的文件或目录进行更名；
搬移该目录内的文件、目录位置。

总之，目录的w权限就与该目录底下的文件名异动有关就对了啦！

x (access directory)：

咦！目录的执行权限有啥用途啊？目录只是记录文件名而已，总不能拿来执行吧？没错！目录不可以被执行，目录的x代表的是用户能否进入该目录成为工作目录的用途！ 所谓的工作目录(work directory)就是你目前所在的目录啦！举例来说，当你登入Linux时， 你所在的家目录就是你当下的工作目录。而变换目录的指令是『cd』(change directory)啰！
大致的目录权限概念是这样，底下我们来看几个范例，让你了解一下啥是目录的权限啰！

例题：
有个目录的权限如下所示：
drwxr--r--  3  root  root  4096   Jun 25 08:35   .ssh
系统有个账号名称为vbird，这个账号并没有支持root群组，请问vbird对这个目录有何权限？是否可切换到此目录中？
答：
vbird对此目录仅具有r的权限，因此vbird可以查询此目录下的文件名列表。因为vbird不具有x的权限， 因此vbird并不能切换到此目录内！(相当重要的概念！)

上面这个例题中因为vbird具有r的权限，因为是r乍看之下好像就具有可以进入此目录的权限，其实那是错的。 能不能进入某一个目录，只与该目录的x权限有关啦！此外， 工作目录对于指令的执行是非常重要的，如果你在某目录下不具有x的权限， 那么你就无法切换到该目录下，也就无法执行该目录下的任何指令，即使你具有该目录的r的权限。

很多朋友在架设网站的时候都会卡在一些权限的设定上，他们开放目录数据给因特网的任何人来浏览， 却只开放r的权限，如上面的范例所示那样，那样的结果就是导致网站服务器软件无法到该目录下读取文件(最多只能看到檔名)， 最终用户总是无法正确的查阅到文件的内容(显示权限不足啊！)。要注意：要开放目录给任何人浏览时，应该至少也要给予r及x的权限，但w权限不可随便给！ 为什么w不能随便给，我们来看下一个例子：

例题：
假设有个账号名称为dmtsai，他的家目录在/home/dmtsai/，dmtsai对此目录具有[rwx]的权限。 若在此目录下有个名为the_root.data的文件，该文件的权限如下：
-rwx------ 1 root  root  4365 Sep 19 23:20  the_root.data
请问dmtsai对此文件的权限为何？可否删除此文件？
答：
如上所示，由于dmtsai对此文件来说是『others』的身份，因此这个文件他无法读、无法编辑也无法执行， 也就是说，他无法变动这个文件的内容就是了。

但是由于这个文件在他的家目录下， 他在此目录下具有rwx的完整权限，因此对于the_root.data这个『档名』来说，他是能够『删除』的！ 结论就是，dmtsai这个用户能够删除the_root.data这个文件！

还是看不太懂？有听没有懂喔！没关系～我们底下就来设计一个练习， 让你实际玩玩看，应该就能够比较近入状况啦！不过，由于很多指令我们还没有教， 所以底下的指令有的先了解即可，详细的指令用法我们会在后面继续介绍的。

先用root的身份建立所需要的文件与目录环境
我们用root的身份在所有人都可以工作的/tmp目录中建立一个名为testing的目录， 该目录的权限为744且目录拥有者为root。另外，在testing目录下在建立一个空的文件， 档名亦为testing。建立目录可用mkdir(make directory)，建立空文件可用touch(下一章会说明)来处理。 所以过程如下所示：

[root@www ~]# cd /tmp                     <==切换工作目录到/tmp
[root@www tmp]# mkdir testing             <==建立新目录
[root@www tmp]# chmod 744 testing         <==变更权限
[root@www tmp]# touch testing/testing     <==建立空的文件
[root@www tmp]# chmod 600 testing/testing <==变更权限
[root@www tmp]# ls -ald testing testing/testing
drwxr--r-- 2 root root 4096 Sep 19 16:01 testing
-rw------- 1 root root    0 Sep 19 16:01 testing/testing
# 仔细看一下，目录的权限是 744 ，且所属群组与使用者均是 root 喔！
# 那么在这样的情况底下，一般身份用户对这个目录/文件的权限为何？
一般用户的读写权限为何？观察中
在上面的例子中，虽然目录是744的权限设定，一般用户应该能有 r 的权限， 但这样的权限使用者能做啥事呢？假设鸟哥的系统中含有一个账号名为 vbird 的， 我们可以透过『 su - vbird 』这个指令来变换身份喔！看看底下的操作先！

[root@www tmp]# su - vbird <==切换身份成为 vbird 啰！
[vbird@www ~]$ cd /tmp     <==看一下，身份变了喔！提示字符也变成 $ 了！
[vbird@www tmp]$ ls -l testing/
?--------- ? ? ? ?             ? testing
# 因为具有 r 的权限可以查询档名。不过权限不足(没有x)，所以会有一堆问号。
[vbird@www tmp]$ cd testing/
-bash: cd: testing/: Permission denied
# 因为不具有 x ，所以当然没有进入的权限啦！有没有呼应前面的权限说明啊！
如果该目录属于用户本身，会有什么状况？
上面的练习我们知道了只有r确实可以让用户读取目录的文件名列表，不过详细的信息却还是读不到的， 同时也不能将该目录变成工作目录(用 cd 进入该目录之意)。那如果我们让该目录变成用户的， 那么用户在这个目录底下是否能够删除文件呢？底下的练习做看看：

[vbird@www tmp]$ exit               <==让 vbird 变回原本的 root 身份喔！
[root@www tmp]# chown vbird testing <==修改权限，让vbird拥有此目录
[root@www tmp]# su - vbird          <==再次变成vbird来操作
[vbird@www ~]$ cd /tmp/testing      <==可以进入目录了呢！
[vbird@www testing]$ ls -l
-rw------- 1 root root 0 Sep 19 16:01 testing  <==文件不是vbird的！
[vbird@www testing]$ rm testing     <==尝试刪除这个文件看看！
rm: remove write-protected regular empty file `testing'? y
# 竟然可以删除！这样理解了吗？！
透过上面这个简单的步骤，你就可以清楚的知道， x 在目录当中是与『能否进入该目录』有关， 至于那个 w 则具有相当重要的权限，因为他可以让使用者删除、更新、新建文件或目录， 是个很重要的参数啊！这样可以理解了吗？！ ^_^

__Linux文件种类与扩展名__
我们在基础篇一直强调一个概念，那就是：任何装置在Linux底下都是文件， 不仅如此，连数据沟通的接口也有专属的文件在负责～所以，你会了解到，Linux的文件种类真的很多～ 除了前面提到的一般文件(-)与目录文件(d)之外，还有哪些种类的文件呢？


文件种类：
我们在刚刚提到使用『ls -l』观察到第一栏那十个字符中，第一个字符为文件的类型。 除了常见的一般文件(-)与目录文件(d)之外，还有哪些种类的文件类型呢？

__正规文件(regular file )：__
就是一般我们在进行存取的类型的文件，在由 ls -al 所显示出来的属性方面，第一个字符为 __[ - ]__，例如 [-rwxrwxrwx ]。另外，依照文件的内容，又大略可以分为：

__纯文本档(ASCII)__：这是Linux系统中最多的一种文件类型啰， 称为纯文本档是因为内容为我们人类可以直接读到的数据，例如数字、字母等等。 几乎只要我们可以用来做为设定的文件都属于这一种文件类型。 举例来说，你可以下达『 cat ~/.bashrc 』就可以看到该文件的内容。 (cat 是将一个文件内容读出来的指令)

__二进制文件(binary)__：还记得我们在『 第零章、计算器概论 』里面的软件程序的运作中提过， 我们的系统其实仅认识且可以执行二进制文件(binary file)吧？没错～ 你的Linux当中的可执行文件(scripts, 文字型批处理文件不算)就是这种格式的啦～ 举例来说，刚刚下达的指令cat就是一个binary file。

__数据格式文件(data)__： 有些程序在运作的过程当中会读取某些特定格式的文件，那些特定格式的文件可以被称为数据文件 (data file)。举例来说，我们的Linux在使用者登入时，都会将登录的数据记录在 /var/log/wtmp那个文件内，该文件是一个data file，他能够透过last这个指令读出来！ 但是使用cat时，会读出乱码～因为他是属于一种特殊格式的文件。瞭乎？

__目录(directory)__：
就是目录啰～第一个属性为 __[ d ]__，例如 [drwxrwxrwx]。

__连结档(link)：__
就是类似Windows系统底下的快捷方式啦！ 第一个属性为 __[ l ]__(英文L的小写)，例如 [lrwxrwxrwx] ；

__设备与装置文件(device)__：
与系统周边及储存等相关的一些文件， 通常都集中在/dev这个目录之下！通常又分为两种：

__区块(block)设备档__ ：就是一些储存数据， 以提供系统随机存取的接口设备，举例来说，硬盘与软盘等就是啦！ 你可以随机的在硬盘的不同区块读写，这种装置就是成组设备啰！你可以自行查一下/dev/sda看看， 会发现第一个属性为__[ b ]__喔！

__字符(character)设备文件__：亦即是一些串行端口的接口设备， 例如键盘、鼠标等等！这些设备的特色就是『一次性读取』的，不能够截断输出。 举例来说，你不可能让鼠标『跳到』另一个画面，而是『滑动』到另一个地方啊！第一个属性为 __[ c ]__。

__数据接口文件(sockets)__：
既然被称为数据接口文件， 想当然尔，这种类型的文件通常被用在网络上的数据承接了。我们可以启动一个程序来监听客户端的要求， 而客户端就可以透过这个socket来进行数据的沟通了。第一个属性为 __[ s ]__， 最常在/var/run这个目录中看到这种文件类型了。

__数据输送文件(FIFO, pipe)__：
FIFO也是一种特殊的文件类型，他主要的目的在解决多个程序同时存取一个文件所造成的错误问题。 FIFO是first-in-first-out的缩写。第一个属性为__[p]__ 。
除了设备文件是我们系统中很重要的文件，最好不要随意修改之外(通常他也不会让你修改的啦！)， 另一个比较有趣的文件就是连结档。如果你常常将应用程序捉到桌面来的话，你就应该知道在 Windows底下有所谓的『快捷方式』。同样的，你可以将 linux下的连结档简单的视为一个文件或目录的快捷方式。 至于socket与FIFO文件比较难理解，因为这两个咚咚与程序(process)比较有关系， 这个等到未来你了解process之后，再回来查阅吧！此外， 你也可以透过man fifo及man socket来查阅系统上的说明！


Linux文件扩展名：
基本上，Linux的文件是没有所谓的『扩展名』的，我们刚刚就谈过，一个Linux文件能不能被执行，与他的第一栏的十个属性有关， 与档名根本一点关系也没有。这个观念跟Windows的情况不相同喔！在Windows底下， 能被执行的文件扩展名通常是 .com .exe .bat等等，而在Linux底下，只要你的权限当中具有x的话，例如[ -rwx-r-xr-x ] 即代表这个文件可以被执行喔！

不过，可以被执行跟可以执行成功是不一样的～举例来说，在root家目录下的install.log 是一个纯文本档，如果经由修改权限成为 -rwxrwxrwx 后，这个文件能够真的执行成功吗？ 当然不行～因为他的内容根本就没有可以执行的数据。所以说，这个x代表这个文件具有可执行的能力， 但是能不能执行成功，当然就得要看该文件的内容啰～

虽然如此，不过我们仍然希望可以藉由扩展名来了解该文件是什么东西，所以， 通常我们还是会以适当的扩展名来表示该文件是什么种类的。底下有数种常用的扩展名：

*.sh ： 脚本或批处理文件 (scripts)，因为批处理文件为使用shell写成的，所以扩展名就编成 .sh ；

*Z, *.tar, *.tar.gz, *.zip, *.tgz： 经过打包的压缩文件。这是因为压缩软件分别为 gunzip, tar 等等的，由于不同的压缩软件，而取其相关的扩展名啰！

*.html, *.php：网页相关文件，分别代表 HTML 语法与 PHP 语法的网页文件啰！ .html 的文件可使用网页浏览器来直接开启，至于 .php 的文件， 则可以透过 client 端的浏览器来 server 端浏览，以得到运算后的网页结果呢！
基本上，Linux系统上的文件名真的只是让你了解该文件可能的用途而已， 真正的执行与否仍然需要权限的规范才行！例如虽然有一个文件为可执行文件， 如常见的/bin/ls这个显示文件属性的指令，不过，如果这个文件的权限被修改成无法执行时， 那么ls就变成不能执行啰！

上述的这种问题最常发生在文件传送的过程中。例如你在网络上下载一个可执行文件，但是偏偏在你的 Linux系统中就是无法执行！呵呵！那么就是可能文件的属性被改变了！不要怀疑，从网络上传送到你的 Linux系统中，文件的属性与权限确实是会被改变的喔！


__Linux文件长度限制：__
在Linux底下，使用预设的Ext2/Ext3文件系统时，针对文件的档名长度限制为：

__单一文件或目录的最大容许文件名为 255 个字符__；
__包含完整路径名称及目录 (/) 之完整档名为 4096 个字符。__
是相当长的档名喔！我们希望Linux的文件名可以一看就知道该文件在干嘛的， 所以档名通常是很长很长！而用惯了Windows的人可能会受不了，因为文件名通常真的都很长， 对于用惯Windows而导致打字速度不快的朋友来说，嗯！真的是很困扰.....不过，只得劝你好好的加强打字的训练！

而由第五章谈到的热键你也会知道， 其实可以透过[tab]按键来确认文件的文件名的！这很好用啊！ 当然啦，如果你已经读完了本书第三篇关于BASH的用法，那么你将会发现 『哇！变量真是一个相当好用的东西吶！』 嗯！看不懂，没关系，到第三篇谈到bash再说！


__Linux文件名的限制：__
由于Linux在文字接口下的一些指令操作关系，一般来说，你在设定Linux底下的文件名时， 最好可以避免一些特殊字符比较好！例如底下这些：

__* ? > < ; & ! [ ] | \ ' " ` ( ) { }__
因为这些符号在文字接口下，是有特殊意义的！另外，文件名的开头为小数点『.』时， 代表这个文件为『隐藏档』喔！同时，由于指令下达当中，常常会使用到 -option 之类的选项， 所以你__最好也避免将文件档名的开头以 - 或 + 来命名啊__！

