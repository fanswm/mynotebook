Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2017-12-25T16:37:14+08:00

====== abstracth磁盘文件系统 ======
Created Monday 25 December 2017

磁盘文件系统：

+ 最小存储单位：Sector(扇区)=512 bytes;
+ 磁柱（Cylinder）:把扇区组成一个圆，是分区（partition）的最小单位；

第一个扇区最重要：
	里面有：
	主要启动区(Master boot record, MBR)及分割表(partition table)， 
		其中 MBR 占有 446 bytes，
		而 partition table 则占有 64 bytes。

分割槽的磁柱范围是记录在第一个扇区的分割表中，
但是因为分割表仅有64bytes而已， 因此最多只能记录四笔分割槽的记录，
	这四笔记录我们称为主要 (primary) 或延伸 (extended) 分割槽，
		其中扩展分配槽还可以再分割出逻辑分割槽 (logical) ，
	而能被格式化的则仅有主要分割与逻辑分割而已。

在Linux系统中，IDE硬盘最多有59个逻辑分割(5号到63号)， SATA硬盘则有11个逻辑分割(5号到15号)。

__文件系统通常会将这两部份的数据分别存放在不同的区块，__
	__权限与属性放置到 inode 中，__
	__至于实际数据则放置到 data block 区块中__。 
	另外，__还有一个超级区块 (superblock) 会记录整个文件系统的整体信息，__
			__包括 inode 与 block 的总量、使用量、剩余量等__。

+ __superblock：记录此 filesystem 的整体信息，包括inode/block的总量、使用量、剩余量， 以及文件系统的格式与相关信息等；__
> superblock 则在第 0 号的 block 区块内.

+ __inode：记录文件的属性，一个文件仅占用一个inode，同时记录此文件的数据所在的 block 号码；每个inode固定占用128 bytes。__
> inode __记录 block 号码（每个block记录用4个byte）的区域定义为12个直接，1个间接, 1个双间接与1个三间接记录区。__
> 查看inode: `ls -i`，
> 每个区段与 superblock 的信息都可以使用 `dumpe2fs` 这个命令来查询的
> 最顶层inode号码通常从2号开始
> 不同的inode号码，代表着不同的文件.


+ __block：实际记录文件的内容，若文件太大时，会占用多个 block 。__
	格式化时，指定大小：比如1K,2K,4K。。。，格式化之后，大小不能再变。
	
文件系统在格式化的时候基本上是区分为多个区块群组 (block group) 的，每个区块群组都有独立的 inode/block/superblock 系统.

__示意（ext2）：__
1. __Boot Sector__
2. __Block Group 1__
	1. __Superblock__
	2. __档案系统描述__
	3. __区块对应表__
	4. __Inode对应表__
	5. __Inode Table__
	6. __Data Block__
3. __Block Group 2__
4. __Block Group 3__
5. __Block Group ...__



例：
我们以较小的 __1K block__ 来说明，可以指定的情况如下：
+ + 12 个直接指向： 12*1K=__12K__
由于是直接指向，所以总共可记录 12 笔记录，因此总额大小为如上所示；

+ + 1个间接： 256*1K=__256K__
每笔 block 号码的记录会花去 4bytes，因此 1K 的大小能够记录 256 笔（1024/4）记录，因此一个间接可以记录的文件大小如上； 

+ + 双间接： 256*256*1K=65536__K__
第一层 block 会指定 256 个第二层，每个第二层可以指定 256 个号码，因此总额大小如上；

+ + 三间接： 256*256*256*1K=__1677216K__
第一层 block 会指定 256 个第二层，每个第二层可以指定 256 个第三层，每个第三层可以指定 256 个号码，因此总额大小如上；

总额：将直接、间接、双间接、三间接加总，得到 12 + 256 + 256*256 + 256*256*256 (K) = 16GB

此时我们知道当文件系统将 block 格式化为 1K 大小时，能够容纳的最大文件为 16GB，比较一下文件系统限制表的结果可发现是一致的！__但这个方法不能用在 2K 及 4K block 大小的计算中， 因为大于 2K 的 block 将会受到 Ext2 文件系统本身的限制，所以计算的结果会不太符合之故__。



### 与目录的关系
+ 目录：文件系统为目录至少分配1个inode和1个block
> 其中，inode 记录该__目录的相关权限与属性__，并可记录__分配到的那块 block 号码__；
> 而 block 则是记录__在这个目录下的文件名__与__该文件名占用的 inode 号码数据__.

出现的目录几乎都是 1024 的倍数，为什么呢？因为每个 block 的数量都是 1K, 2K, 4K 嘛

+ 文件：假设我的一个 block 为 4 Kbytes ，而我要创建一个 100 KBytes 的文件，那么 linux 将分配一个 inode 与 25 个 block 来储存该文件！ 但同时请注意，由于 inode 仅有 12 个直接指向，因此还要多一个 block 来作为区块号码的记录喔！

+ 当我们要读取某个文件时，就务必会经过目录的 inode 与 block ，然后才能够找到那个待读取文件的 inode 号码， 最终才会读到正确的文件的 block 内的数据。
