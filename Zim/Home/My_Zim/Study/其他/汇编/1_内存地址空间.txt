Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2018-12-31T18:21:04+08:00

====== 1 内存地址空间 ======
Created Monday 31 December 2018


接口卡:
CPU对外部设备(例如:打印机,显示器)的控制都不能直接控制,而是通过接口卡;

扩展插槽通过总线和CPU相连,所以接口卡也通过总线同CPU相连.

PC上的所有的存储器(RAM,ROM),CPU在控制它们的时候,把它们都当作内存来对待,把它们总的看作一个由若干存储单元组成的逻辑存储器,这个逻辑存储器就是:内存地址空间.

必须知道某一个存储器的第一个单元的地址,和最后一个单元的地址.

不同的计算机系统,内存地址空间的分配情况是不同的.
例:
0-7FFFH 的32KB空间为主随机存储器的地址空间;
8000H-9FFFH 的8KB空间为显存地址空间;
A000H-FFFFH的24KB空间为各个ROM的地址空间;

例:8086PC
0-9FFFFH :主随机存储器的 地址空间(RAM);
A0000H-BFFFFH :显存地址空间;
C0000H-FFFFFH: 各类ROM的地址空间;

=== 物理地址: ===

不同CPU有不同的形成物理地址的方式;
所有的内存单元,构成的存储空间是一个一维的线性空间;

=== 086CPU给出物理地址的方法: ===
有20位地址总线;为2^20=1M寻址能力;但它是16位的,如果单出CPU内部看的话,只能达到2^16=64KB的寻址能力;
8086CPU采用一种在内部用2个16位地址合成的方法形成一个20位的物理地址;

=== 8086CPU读写内存时: ===
1, CPU提供2__个16位地址__,一个称为__段地址SA__,另一个称为__偏移地址EA__;
2, 段地址和偏移地址通过内部总线,送入一个称为地址加法器的部件;
3, 地址加法器将2个16位地址合成为一个20位的物理地址;__(物理地址 = 段地址 * 16 + 偏移地址)__
	> 段地址 * 16 有一个更为常用的说法是:左移4位;
	> 一个X进制的数,左移1位,相当于乘以X;
	> 段的起始地址一定是16的位数;偏移地址为16位的,16位的寻址能力为64KB,所以,__一个段的长度最大为64KB__;
	> CPU可以用不同的段地址和偏移地址形成同一个物理地址;
4, 地址加法器通过内部总线将20位物理地址送入输入输出控制电路;
5, 输入输出控制电路将20位物理地址送上地址总线;
6, 20位物理地址被地址总线传送到存储器;

"数据在21F60H内存单元中":
= "数据在2000:1F60单元中"
="数据存在内存的2000段中的1F60单元中"











