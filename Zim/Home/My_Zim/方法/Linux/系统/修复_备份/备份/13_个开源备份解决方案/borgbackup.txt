Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2019-03-27T11:29:37+08:00

====== borgbackup ======
创建日期 星期三 27 三月 2019

快速入门
本章将介绍Borg并介绍各种用例。

一步一步的例子
在进行备份之前，必须初始化存储库：

$ borg init --encryption=repokey /path/to/repo
将~/src和~/Documents目录备份到名为Monday的存档中 ：

$ borg create /path/to/repo::Monday ~/src ~/Documents
第二天创建一个名为Tuesday的新档案：

$ borg create --stats /path/to/repo::Tuesday ~/src ~/Documents
这种备份将更快，更小，因为只存储了以前从未见过的新数据。该--stats选项使Borg输出有关新创建的存档的统计信息，例如唯一数据量（不与其他存档共享）：

--------------------
Archive name: Tuesday
Archive fingerprint: bd31004d58f51ea06ff735d2e5ac49376901b21d58035f8fb05dbf866566e3c2
Time (start): Tue, 2016-02-16 18:15:11
Time (end):   Tue, 2016-02-16 18:15:11

Duration: 0.19 seconds
Number of files: 127
--------------------
					  Original size      Compressed size    Deduplicated size
This archive:                4.16 MB              4.17 MB             26.78 kB
All archives:                8.33 MB              8.34 MB              4.19 MB

					  Unique chunks         Total chunks
Chunk index:                     132                  261
--------------------
列出存储库中的所有存档：

$ borg list /path/to/repo
Monday                               Mon, 2016-02-15 19:14:44
Tuesday                              Tue, 2016-02-16 19:15:11
列出星期一档案的内容：

$ borg list /path/to/repo::Monday
drwxr-xr-x user   group          0 Mon, 2016-02-15 18:22:30 home/user/Documents
-rw-r--r-- user   group       7961 Mon, 2016-02-15 18:22:30 home/user/Documents/Important.doc
...
通过提取相对于当前目录的文件来恢复星期一存档：

$ borg extract /path/to/repo::Monday
通过手动删除星期一存档来恢复磁盘空间：

$ borg delete /path/to/repo::Monday
注意

Borg默认是安静的（它适用于WARNING日志级别）。您可以在命令执行期间使用--progress或等选项--list来获取特定报告。您还可以添加-v（或 --verbose或--info）选项以将日志级别调整为INFO以获取其他信息性消息。

档案和存储库
一个博格归档是一个备份的结果（borg create）。存档存储“内部”文件数据的快照。之后可以提取或装载存档以从备份还原。

存储库是文件系统目录，充当存档的自包含存储。可以通过路径本地访问存储库，也可以通过ssh远程访问存储库。在引擎盖下，存储库包含数据块和清单跟踪每个存档中的块。如果某些数据没有从一个备份更改为另一个备份，则Borg可以简单地引用已上载的数据块（重复数据删除）。

关于自由空间的重要说明
在开始创建备份之前，请确保 文件系统上始终有足够的可用空间来存放备份存储库（以及〜/ .cache）。对于大多数硬盘驱动器大小的存储库来说，几GB应该足够了。另请参见索引/缓存内存使用情况。

Borg不会在存储库磁盘上使用为root保留的空间（即使在以root身份运行时），在不支持此机制的文件系统上（例如XFS）我们建议在Borg本身保留一些空间以便通过调整additional_free_space 设置来保证安全（一个很好的起点是2G）：

borg config /path/to/repo additional_free_space 2G
如果Borg的磁盘空间不足，它会尝试释放尽可能多的空间，同时安全地中止当前操作，这样用户可以通过删除/修剪存档来释放更多空间。在某些情况下，这种机制不是防弹的[1]。

如果你真的没有磁盘空间，那么释放空间可能很困难或不可能，因为Borg需要可用空间来运行 - 甚至删除备份存档。

您可以使用某些监控过程或仅在备份日志文件中包含可用空间信息（无论如何，您都要定期检查它们，对吧？）。

也有帮助：

创建一个大文件作为“空间储备”，您可以删除以释放空间
如果您使用LVM：使用LV +文件系统，您可以稍后调整大小，并有一些未分配的PE，您可以添加到LV。
考虑使用配额
经常使用修剪和紧凑
[1]	
在这些情况下，此故障保护可能会失败：

底层文件系统不支持statvfs（2），或返回不正确的数据，或者存储库不驻留在单个文件系统上
其他任务同时填充磁盘
硬配额（可能不会反映在statvfs（2）中）
关于权限的重要说明
如果要备份其他用户或操作系统的文件，则可能需要使用root。如果您只备份自己的文件，则既不需要也不想使用root。

避免在存储库（或缓存）中创建用户和权限的混合。

如果您在访问同一个仓库时使用不同的用户帐户（例如您的非特权用户和root用户）运行borg，则很容易发生这种情况。

当然，非root用户将无权使用root（或其他用户）创建的文件，并且borg操作将失败并且 Permission denied。

避免这种情况的简单方法是始终以同一用户身份访问repo：

对于本地存储库，只需始终以同一用户身份调用borg。

对于远程存储库：始终使用例如borg @ remote_host。您可以从不同的本地用户使用它，访问repo的远程用户将始终是borg。

如果需要从不同用户访问本地存储库，可以使用ssh到borg @ localhost使用相同的方法。

关于备份过程中文件更改的重要说明
博格没有对它备份的数据的内部一致性做任何事情。它只是在Borg到达时以文件所处的状态读取和备份每个文件。在活动系统上，这可能导致两种不一致：

当Borg备份文件时，自备份过程启动以来，它可能已经发生了变化
当Borg备份文件时，文件可能会发生变化，使文件内部不一致
如果您有一组文件并希望确保以特定或一致状态备份它们，则必须采取措施防止在备份过程中更改这些文件。有一些常见的技术可以实现这一目标。

避免运行任何可能更改文件的程序。
快照文件，文件系统，容器存储卷或逻辑卷。LVM或ZFS在这里可能很有用。
转储数据库或停止数据库服务器。
在备份映像之前关闭虚拟机。
在备份存储卷之前关闭容器。
对于某些系统，如果没有这些预防措施，博格可能会运作良好。如果您只是在非常活跃的系统上备份文件（例如，在典型的主目录中），Borg通常运行良好，无需进一步保持一致性。日志文件和缓存可能不是完美状态，但这很少是一个问题。

对于数据库，虚拟机和容器，有一些特定的备份技术，不仅仅使用Borg来备份底层文件系统。对于数据库，请检查数据库文档以获取将在事务之间保存数据库状态的技术。对于虚拟机，请考虑在VM关闭时在VM本身上运行备份或安装文件系统。对于Docker容器，也许docker的“save”命令可以提供帮助。

自动备份
以下示例脚本旨在由root用户在不同的本地计算机上每天运行。它将计算机的重要文件（但不是完整的操作系统）备份到~/backup/main 远程服务器上的存储库。排除了此备份中不一定需要的某些文件。请参阅 borg帮助模式如何添加更多排除选项的信息，。

备份后，此脚本还使用borg prune子命令仅保留一定数量的旧存档并删除其他存档。

最后，它使用borg compact子命令从存储库中的段文件中删除已删除的对象以保留磁盘空间。

在运行之前，请确保按照远程存储库中的说明初始化 存储库，并且脚本具有可由root用户执行的正确权限，但不能由其他任何人执行或读取，即root：root 0700。

您可以使用此脚本作为起点，并在需要适合您的设置的位置进行修改。

不要忘记测试创建的备份，以确保备份所需的所有内容，并确保prune命令保留并删除正确的备份。

#!/bin/sh

# Setting this, so the repo does not need to be given on the commandline:
export BORG_REPO=ssh://username@example.com:2022/~/backup/main

# Setting this, so you won't be asked for your repository passphrase:
export BORG_PASSPHRASE='XYZl0ngandsecurepa_55_phrasea&&123'
# or this to ask an external program to supply the passphrase:
export BORG_PASSCOMMAND='pass show backup'

# some helpers and error handling:
info() { printf "\n%s %s\n\n" "$( date )" "$*" >&2; }
trap 'echo $( date ) Backup interrupted >&2; exit 2' INT TERM

info "Starting backup"

# Backup the most important directories into an archive named after
# the machine this script is currently running on:

borg create                         \
	--verbose                       \
	--filter AME                    \
	--list                          \
	--stats                         \
	--show-rc                       \
	--compression lz4               \
	--exclude-caches                \
	--exclude '/home/*/.cache/*'    \
	--exclude '/var/cache/*'        \
	--exclude '/var/tmp/*'          \
									\
	::'{hostname}-{now}'            \
	/etc                            \
	/home                           \
	/root                           \
	/var                            \

backup_exit=$?

info "Pruning repository"

# Use the `prune` subcommand to maintain 7 daily, 4 weekly and 6 monthly
# archives of THIS machine. The '{hostname}-' prefix is very important to
# limit prune's operation to this machine's archives and not apply to
# other machines' archives also:

borg prune                          \
	--list                          \
	--prefix '{hostname}-'          \
	--show-rc                       \
	--keep-daily    7               \
	--keep-weekly   4               \
	--keep-monthly  6               \

prune_exit=$?

# actually free repo disk space by compacting segments

info "Compacting repository"

borg compact

compact_exit=$?

# use highest exit code as global exit code
global_exit=$(( backup_exit > prune_exit ? backup_exit : prune_exit ))
global_exit=$(( compact_exit > global_exit ? compact_exit : global_exit ))

if [ ${global_exit} -eq 0 ]; then
	info "Backup, Prune, and Compact finished successfully"
elif [ ${global_exit} -eq 1 ]; then
	info "Backup, Prune, and/or Compact finished with warnings"
else
	info "Backup, Prune, and/or Compact finished with errors"
fi

exit ${global_exit}
shell变量和环境变量的陷阱
这适用于您希望Borg看到的所有环境变量，而不仅仅是 BORG_PASSPHRASE。简短的解释是：始终是export您的变量，如果您不确定shell的扩展行为的详细信息，请使用单引号。例如：

export BORG_PASSPHRASE='complicated & long'
这是因为export将变量暴露给子进程，Borg可能是其中之一。有关详细信息，请export参见bash（1）手册页的“环境”部分。

注意如何sudo与环境变量进行交互。例如，您可能会惊讶于以下内容export对您的命令没有影响：

export BORG_PASSPHRASE='complicated & long'
sudo ./yourborgwrapper.sh  # still prompts for password
有关更多信息，请参阅sudo（8）手册页和env_keepsudoers（5）手册页。

小费

要调试你的borg进程实际看到的内容，找到它的PID（），然后查看。ps aux|grep borg/proc/<PID>/environ

备份压缩
默认值为lz4（非常快，但压缩率低），但不同情况下支持其他方法。

您可以使用zstd进行从高速（和相对低压缩）的宽范围，使用N = 1到高压缩（和低速度），使用N = 22。

zstd是一种现代压缩算法，可能比zlib和lzma更受欢迎，除非你需要兼容尚未提供zstd的旧版borg版本（<1.1.4）。

$ borg create -compression zstd，N / path / to / repo :: arch~
其他选择是：

如果你有一个快速的repo存储，你想要最小的CPU使用率，没有压缩：

$ borg create --compression none /path/to/repo::arch ~
如果你的repo存储速度较慢，你想要更多的压缩（N = 0..9,0意味着没有压缩，9意味着高压缩）：

$ borg create --compression zlib,N /path/to/repo::arch ~
如果你有一个非常慢的repo存储并且你想要高压缩（N = 0..9,0表示低压缩，9表示高压缩）：

$ borg create --compression lzma,N /path/to/repo::arch ~
您需要进行一些实验，以便为您的用例找到最佳压缩。密切关注CPU负载和吞吐量。

存储库加密
您可以在创建存储库时选择存储库加密模式：

$ borg init --encryption=MODE PATH
有关可用加密MODE及其说明的列表，请参阅borg init。

如果使用加密，则在写入存储库之前，会在客户端上对所有数据进行加密。这意味着，即使在进行备份时，设法破坏包含加密存储库的主机的攻击者也无法访问任何数据。

密钥材料以加密形式存储，只能通过提供正确的密码来解密。

对于自动备份，可以使用BORG_PASSPHRASE环境变量指定密码 。

注意

请注意如何设置该环境，有关 详细信息，请参阅 有关密码环境的说明。

警告

没有密钥和密钥密码，存储库数据完全无法访问。

制作密钥文件（keyfile模式）或repo配置文件（repokey模式）的备份副本并将其保存在安全的地方，这样您仍然可以获得密钥，以防它被损坏或丢失。还要将密码保存在安全的地方。

您可以使用borg key export子命令进行备份。

如果要将密钥的备份打印到纸张，请使用--paper 此命令的选项并打印结果，或者 如果需要具有QR码的版本，则打印此模板。

当然，使用该密钥/密码加密的备份内部备份对您没有帮助。

远程存储库
如果可以使用SSH访问主机，Borg可以初始化和访问远程主机上的存储库。当Borg安装在远程主机上时，这是最快速和最简单的，在这种情况下使用以下语法：

$ borg init user@hostname:/path/to/repo
注意：有关repo URL的完整文档，请参阅用法章节。

可以使用SSH密钥自动通过SSH进行远程操作。您可以通过将强制命令添加到远程服务器的authorized_keys文件中的SSH公钥来限制SSH密钥对的使用。此示例将以服务器模式启动Borg并将其限制为特定的文件系统路径：

command="borg serve --restrict-to-path /path/to/repo",restrict ssh-rsa AAAAB3[...]
如果无法在远程主机上安装Borg，则仍可以使用远程主机通过挂载远程文件系统来存储存储库，例如，使用sshfs：

$ sshfs user@hostname:/path/to /path/to
$ borg init /path/to/repo
$ fusermount -u /path/to
您也可以以类似的方式使用其他远程文件系统。请注意，并非所有文件系统都非常稳定且工作良好，可以接受备份使用。
https://borgbackup.readthedocs.io/en/latest/quickstart.html
