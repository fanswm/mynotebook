Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2018-01-16T18:01:39+08:00

====== Linux size命令和C程序的存储空间布局 ======
Created Tuesday 16 January 2018

size - list section sizes and total size是GNU Development Tools，__列出目标文件各个部分所占的字节数__，当不输入目标文件时，将会把__a.out文件作为缺省输入文件名__。

    [clef@rhel6164 c]$ size a.out  
       text    data     bss     dec     hex filename  
       1317     500      24    1841     731 a.out  

输出各段说明：

    __text段：正文段字节数大小__
__    data段：包含静态变量和已经初始化的全局变量的数据段字节数大小__
__    bss段：Block Started by Symbol存放程序中未初始化的全局变量的字节数大小，BBS段属于静态内存分配__

注：text段+data段+bss段=dec段(10进制)，hex段为16进制表示

对输出各段的更详细的说明&C程序的存储空间布局

    text段(正文段/代码段)，这是由CPU执行的机器指令部分，通常是可共享的，所以即使是频繁执行的程序(如文本编辑器、C编译器和shell等)在存储器中也只需要有一个副本。通常是指用来存放程序执行代码的一块内存区域。这部分区域的大小在程序运行前就已经确定，并且内存区域通常属于只读, 某些架构也允许代码段为可写，即允许修改程序。在代码段中，也有可能包含一些只读的常数变量，例如字符串常量等。
    data段/数据段(初始化数据段)，通常是指用来存放程序中已初始化的全局变量的一块内存区域。数据段属于静态内存分配。 
    bss段(未初始化数据段)，在程序开始执行之前，内核将此段中的数据初始化为0或空指针。
    栈(Stack)，又称为堆栈，自动变量以及每次函数调用是所需保存的信息都存放在此段中。是用户存放程序临时创建的局部变量，也就是说我们函数括弧“{} ”中定义的变量(但不包括static 声明的变量，static 意味着在数据段中存放变量)。除此以外，在函数被调用时，其参数也会被压入发起调用的进程栈中，并且待到调用结束后，函数的返回值也会被存放回栈中。由于栈的先进后出特点，所以栈特别方便用来保存/ 恢复调用现场。从这个意义上讲，我们可以把堆栈看成一个寄存、交换临时数据的内存区。 
    堆(Heap)，堆是用于存放进程运行中被动态分配的内存段，它的大小并不固定，可动态扩张或缩减。当进程调用malloc 等函数分配内存时，新分配的内存就被动态添加到堆上(堆被扩张)；当利用free 等函数释放内存时，被释放的内存从堆中被剔除(堆被缩减)。

堆与栈的区别：

1. 堆栈空间分配

    栈（操作系统）：由操作系统自动分配释放 ，存放函数的参数值，局部变量的值等。其操作方式类似于数据结构中的栈。
    堆（操作系统）： 一般由程序员分配释放， 若程序员不释放，程序结束时可能由OS回收，分配方式倒是类似于链表。

2. 堆栈缓存方式

    栈使用的是一级缓存， 他们通常都是被调用时处于存储空间中，调用完毕立即释放。
    堆则是存放在二级缓存中，生命周期由虚拟机的垃圾回收算法来决定（并不是一旦成为孤儿对象就能被回收）。所以调用这些对象的速度要相对来得低一些。

3. 堆栈数据结构区别

    栈（数据结构）：一种先进后出的数据结构。
    堆（数据结构）：堆可以被看成是一棵树，如：堆排序。

http://blog.csdn.net/rhel_admin/article/details/43055649
