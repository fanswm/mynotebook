Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2018-01-29T18:05:21+08:00

====== 迭代器 iterator ======
Created Monday 29 January 2018

这些可以直接作用于for循环的对象统称为__可迭代对象：Iterable。__

可以使用isinstance()判断一个对象是否是Iterable对象：

>>> from collections import Iterable
>>> isinstance([], Iterable)
True

__把list、dict、str等Iterable变成Iterator可以使用iter()函数：__

>>> isinstance(iter([]), Iterator)
True
>>> isinstance(iter('abc'), Iterator)
True



__可以被next()函数调用并不断返回下一个值的对象称为迭代器：Iterator。__
可以使用isinstance()判断一个对象是否是Iterator对象：

>>> from collections import Iterator
>>> isinstance((x for x in range(10)), __Iterator__)
True

小结

__凡是可作用于for循环的对象都是Iterable类型；__

__凡是可作用于next()函数的对象都是Iterator类型，它们表示一个惰性计算的序列；__

集合数据类型如list、dict、str等是Iterable但不是Iterator，不过可以通过iter()函数获得一个Iterator对象。

Python的for循环本质上就是通过不断调用next()函数实现的，例如：
