Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2020-01-08T08:05:43+08:00

====== contextlib ======
Created 星期三 08 一月 2020

在Python中，__读写文件这样的资源要特别注意__，必须在使用完毕后正确关闭它们。__正确关闭文件资源的一个方法是使用try...finally：__

__try:__
__    f = open('/path/to/file', 'r')__
__    f.read()__
__finally:__
__    if f:__
__        f.close()__

写try...finally非常繁琐。Python的with语句允许我们非常方便地使用资源，而不必担心资源没有关闭，所以上面的代码可以简化为：

__with open('/path/to/file', 'r') as f:__
__    f.read()__

并不是只有open()函数返回的fp对象才能使用with语句。实际上，__任何对象，只要正确实现了上下文管理，就可以用于with语句。__

__实现上下文管理是通过_ _ enter _ _ 和 _ _exit_  _这两个方法实现的__。例如，下面的class实现了这两个方法：

class Query(object):

	def _ _ init _ _(self, name):
		self.name = name

	def _ _ enter _ _ (self):
		print('Begin')
		return self
    
	def _ _ exit _ _ (  self, exc_type, exc_value, traceback):
		if exc_type:
			print('Error')
		else:
			print('End')
    
	def query(self):
		print('Query info about %s...' % self.name)

这样我们就可以把自己写的资源对象用于with语句：

with Query('Bob') as q:
	q.query()

@contextmanager

编写__enter__和__exit__仍然很繁琐，因此Python的标准库contextlib提供了更简单的写法，上面的代码可以改写如下：

from contextlib import contextmanager

class Query(object):

	def __init__(self, name):
		self.name = name

	def query(self):
		print('Query info about %s...' % self.name)

@contextmanager
def create_query(name):
	print('Begin')
	q = Query(name)
	yield q
	print('End')

@contextmanager这个decorator接受一个generator，__用yield语句把with ... as var把变量输出出去，然后，with语句就可以正常地工作了：__

with create_query('Bob') as q:
	q.query()

__很多时候，我们希望在某段代码执行前后自动执行特定代码，也可以用@contextmanager实现。例__如：

@contextmanager
def tag(name):
	print("<%s>" % name)
	yield
	print("</%s>" % name)

with tag("h1"):
	print("hello")
	print("world")

上述代码执行结果为：

<h1>
hello
world
</h1>

代码的执行顺序是：

	with语句首先执行yield之前的语句，因此打印出<h1>；
	yield调用会执行with语句内部的所有语句，因此打印出hello和world；
	最后执行yield之后的语句，打印出</h1>。

因此，__@contextmanager让我们通过编写generator来简化上下文管理。__

@closing

__如果一个对象没有实现上下文，我们就不能把它用于with语句。这个时候，可以用closing()来把该对象变为上下文对象__。例如，用with语句使用urlopen()：

from contextlib import closing
from urllib.request import urlopen

with closing(urlopen('https://www.python.org')) as page:
	for line in page:
		print(line)

closing也是一个经过@contextmanager装饰的generator，这个generator编写起来其实非常简单：

@contextmanager
def closing(thing):
	try:
		yield thing
	finally:
		thing.close()

它的作用就是把任意对象变为上下文对象，并支持with语句。

@contextlib还有一些其他decorator，便于我们编写更简洁的代码。
