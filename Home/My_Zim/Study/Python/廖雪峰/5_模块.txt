Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2018-01-29T18:07:16+08:00

====== 5 模块 ======
Created Monday 29 January 2018

在计算机程序的开发过程中，随着程序代码越写越多，在一个文件里代码就会越来越长，越来越不容易维护。

为了编写可维护的代码，我们__把很多函数分组，分别放到不同的文件里，这样，每个文件包含的代码就相对较少__，很多编程语言都采用这种组织代码的方式。__在Python中，一个.py文件就称之为一个模块（Module）。__

__使用模块有什么好处？__

最大的好处是大大__提高了代码的可维护性__。其次，__编写代码不必从零开始__。当一个模块编写完毕，就可以被其他地方引用。我们在编写程序的时候，也经常引用其他模块，包括Python内置的模块和来自第三方的模块。

使用模块__还可以避免函数名和变量名冲突__。__相同名字的函数和变量完全可以分别存在不同的模块中__，因此，我们自己在编写模块时，不必考虑名字会与其他模块冲突。但是也要注意，__尽量不要与内置函数名字冲突__。点  这里  [https://docs.python.org/3/library/functions.html] 查看Python的所有内置函数。

你也许还想到，如果不同的人编写的模块名相同怎么办？__为了避免模块名冲突，Python又引入了按目录来组织模块的方法，称为包（Package）。__

举个例子，一个abc.py的文件就是一个名字叫abc的模块，一个xyz.py的文件就是一个名字叫xyz的模块。

现在，假设我们的abc和xyz这两个模块名字与其他模块冲突了，于是我们可以通过包来组织模块，避免冲突。__方法是选择一个顶层包名__，比如mycompany，按照如下目录存放：

mycompany
├─ __init__.py
├─ abc.py
└─ xyz.py
引入了包以后，__只要顶层的包名不与别人冲突，那所有模块都不会与别人冲突__。现在，__abc.py模块的名字就变成了mycompany.abc__，类似的，xyz.py的模块名变成了mycompany.xyz。

请注意，__每一个包目录下面都会有一个__init__.py的文件__，这个文件是必须存在的，否则，Python就把这个目录当成普通目录，而不是一个包。__init__.py可以是空文件，也可以有Python代码，__因为__init__.py____本身就是一个模块，而它的模块名就是mycompany。__

类似的，可以有多级目录，组成多级层次的包结构。比如如下的目录结构：

mycompany
 ├─ web
 │  ├─ ____init____.py
 │  ├─ utils.py
 │  └─ www.py
 ├─ ____init____.py
 ├─ abc.py
 └─ utils.py
__文件www.py的模块名就是mycompany.web.www__，两个文件utils.py的模块名分别是mycompany.utils和mycompany.web.utils。

 __自己创建模块时要注意命名，不能和Python自带的模块名称冲突__。例如，__系统自带了sys模块，自己的模块就不可命名为sys.py，否则将无法导入系统自带的sys模块。__
mycompany.web也是一个模块，请指出该模块对应的.py文件。

总结
模块是一组Python代码的集合，可以使用其他模块，也可以被其他模块使用。

创建自己的模块时，要注意：

__模块名要遵循Python变量命名规范，不要使用中文、特殊字符；__
__模块名不要和系统模块名冲突，最好先查看系统是否已存在该模块，检查方法是在Python交互环境执行import abc，若成功则说明系统存在此模块。__
