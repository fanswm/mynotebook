Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2020-01-03T22:18:37+08:00

====== 1 多进程 ======
创建日期 星期五 03 一月 2020

要让Python程序实现多进程（__multiprocessing__），我们先了解操作系统的相关知识。

Unix/Linux操作系统提供了一个__fork()系统调用__，它非常特殊。普通的函数调用，调用一次，返回一次，但是__fork()调用一次，返回两次__，__因为操作系统自动把当前进程（称为父进程）复制了一份（称为子进程），然后，分别在父进程和子进程内返回。__

__子进程永远返回0，而父进程返回子进程的ID。__这样做的理由是，一个父进程可以fork出很多子进程，所以，父进程要记下每个子进程的ID，而子进程只需要调用getppid()就可以拿到父进程的ID。

Python的os模块封装了常见的系统调用，其中就包括fork，可以在Python程序中轻松__创建子进程__：

__import os__

__print('Process (%s) start...' % os.getpid())__
__# Only works on Unix/Linux/Mac:__
__pid = os.fork()__
__if pid == 0:__
__    print('I am child process (%s) and my parent is %s.' % (os.getpid(), os.getppid()))__
__else:__
__    print('I (%s) just created a child process (%s).' % (os.getpid(), pid))__

运行结果如下：

Process (876) start...
I (876) just created a child process (877).
I am child process (877) and my parent is 876.

由于Windows没有fork调用，上面的代码在Windows上无法运行。而Mac系统是基于BSD（Unix的一种）内核，所以，在Mac下运行是没有问题的，推荐大家用Mac学Python！

有了fork调用，一个进程在接到新任务时就可以复制出一个子进程来处理新任务，__常见的Apache服务器就是由父进程监听端口，每当有新的http请求时，就fork出子进程来处理新的http请求。__

multiprocessing

如果你打算编写__多进程的服务程序__，Unix/Linux无疑是正确的选择。由于Windows没有fork调用，难道在Windows上无法用Python编写多进程的程序？

由于Python是跨平台的，自然也应该提供一个跨平台的多进程支持。__multiprocessing模块就是跨平台版本的多进程模块。__

__multiprocessing模块提供了一个Process类来代表一个进程对象，下面的__例子演示了启动一个子进程并等待其结束：

__from multiprocessing import Process__
__import os__

__# 子进程要执行的代码__
__def run _ proc(name):__
__    print('Run child process %s (%s)...' % (name, os.getpid()))__

__if  _  _ name _  _ ==' _  _ main _  _ ':__
__    print('Parent process %s.' % os.getpid())__
__    p = Process(target=run _ proc, args=('test',))      注意：这是个tuple__
__    print('Child process will start.')__
__    p.start()__
__    p.join()__
__    print('Child process end.')__

执行结果如下：

Parent process 928.
Child process will start.
Run child process test (929)...
Process end.

__创建子进程时，只需要传入一个执行函数和函数的参数，创建一个Process实例，用start()方法启动，这样创建进程比fork()还要简单。__

join()方法可以等待子进程结束后再继续往下运行，通常用于进程间的同步。

__Pool__

__如果要启动大量的子进程，可以用进程池的方式批量创建子进程：__

__from multiprocessing import Pool__
import os, time, random

def long _ time _ task(name):
	print('Run task %s (%s)...' % (name, os.getpid()))
	start = time.time()
	time.sleep(random.random() * 3)
	end = time.time()
	print('Task %s runs %0.2f seconds.' % (name, (end - start)))

if  _  _ name _  _ ==' _  _ main _  _ ':
	print('Parent process %s.' % os.getpid())
	__p = Pool(4)__
	for i in range(5):
		p.apply _ async(long _ time _ task, args=(i,))
	print('Waiting for all subprocesses done...')
	__p.close()__
	__p.join()__
	print('All subprocesses done.')

执行结果如下：

Parent process 669.
Waiting for all subprocesses done...
Run task 0 (671)...
Run task 1 (672)...
Run task 2 (673)...
Run task 3 (674)...
Task 2 runs 0.14 seconds.
Run task 4 (673)...
Task 1 runs 0.27 seconds.
Task 3 runs 0.86 seconds.
Task 0 runs 1.41 seconds.
Task 4 runs 1.91 seconds.
All subprocesses done.

代码解读：

__对Pool对象调用join()方法会等待所有子进程执行完毕，调用join()之前必须先调用close()，调用close()之后就不能继续添加新的Process了。__

请注意输出的结果，task 0，1，2，3是立刻执行的，而task 4要等待前面某个task完成后才执行，__这是因为Pool的默认大小在我的电脑上是4，因此，最多同时执行4个进程。这是Pool有意设计的限制，并不是操作系统的限制。如果改成：__

__p = Pool(5)__

__就可以同时跑5个进程。__

__由于Pool的默认大小是CPU的核数，如果你不幸拥有8核CPU，你要提交至少9个子进程才能看到上面的等待效果。__

**__子进程__

很多时候，子进程并不是自身，而是一个外部进程。我们创建了子进程后，还需要控制子进程的输入和输出。

__subprocess模块__可以让我们非常方便地启动一个子进程，然后控制其输入和输出。

下面的例子演示了如何在Python代码中运行命令nslookup www.python.org，这和命令行直接运行的效果是一样的：

import subprocess

print('$ nslookup www.python.org')
r = __subprocess.call(['nslookup', 'www.python.org'])__
print('Exit code:', r)

运行结果：

$ nslookup www.python.org
Server:		192.168.19.4
Address:	192.168.19.4#53

Non-authoritative answer:
www.python.org	canonical name = python.map.fastly.net.
Name:	python.map.fastly.net
Address: 199.27.79.223

Exit code: 0

__如果子进程还需要输入，则可以通过communicate()方法输入：__

import subprocess

print('$ nslookup')
__p = subprocess.Popen(['nslookup'], stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE)__
__output, err = p.communicate(b'set q=mx\npython.org\nexit\n')__
print(output.decode('utf-8'))
__print('Exit code:', p.returncode)__

上面的代码相当于在命令行执行命令nslookup，然后手动输入：

set q=mx
python.org
exit

运行结果如下：

$ nslookup
Server:		192.168.19.4
Address:	192.168.19.4#53

Non-authoritative answer:
python.org	mail exchanger = 50 mail.python.org.

Authoritative answers can be found from:
mail.python.org	internet address = 82.94.164.166
mail.python.org	has AAAA address 2001:888:2000:d::a6


Exit code: 0

__进程间通信__

Process之间肯定是需要通信的，操作系统提供了很多机制来实现进程间的通信。Python的multiprocessing模块包装了底层的机制，__提供了Queue、Pipes等多种方式来交换数据。__

我们以Queue为例，在父进程中创建两个子进程，一个往Queue里写数据，一个从Queue里读数据：

from multiprocessing import Process, Queue
import os, time, random

# 写数据进程执行的代码:
def write(q):
	print('Process to write: %s' % os.getpid())
	for value in ['A', 'B', 'C']:
		print('Put %s to queue...' % value)
		q.put(value)
		time.sleep(random.random())

# 读数据进程执行的代码:
def read(q):
	print('Process to read: %s' % os.getpid())
	while True:
		value = q.get(True)
		print('Get %s from queue.' % value)

if  _  _ name _  _ ==' _  _ main _  _ ':
	# 父进程创建Queue，并传给各个子进程：
	q = Queue()
	pw = Process(target=write, args=(q,))
	pr = Process(target=read, args=(q,))
	# 启动子进程pw，写入:
	pw.start()
	# 启动子进程pr，读取:
	pr.start()
	# 等待pw结束:
	pw.join()
	# pr进程里是死循环，无法等待其结束，只能强行终止:
	pr.terminate()

运行结果如下：

Process to write: 50563
Put A to queue...
Process to read: 50564
Get A from queue.
Put B to queue...
Get B from queue.
Put C to queue...
Get C from queue.

在Unix/Linux下，multiprocessing模块封装了fork()调用，使我们不需要关注fork()的细节。由于Windows没有fork调用，因此，multiprocessing需要“模拟”出fork的效果，父进程所有Python对象都必须通过pickle序列化再传到子进程去，所以，如果multiprocessing在Windows下调用失败了，要先考虑是不是pickle失败了。
小结

在Unix/Linux下，可以使用fork()调用实现多进程。

要实现跨平台的多进程，可以使用multiprocessing模块。

进程间通信是通过Queue、Pipes等实现的。
